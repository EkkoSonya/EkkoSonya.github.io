"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[9821],{3671:(a,n)=>{n.A=(a,n)=>{const e=a.__vccOpts||a;for(const[a,s]of n)e[a]=s;return e}},1573:(a,n,e)=>{e.r(n),e.d(n,{comp:()=>p,data:()=>d});var s=e(7847);const t=e.p+"assets/img/30.e7888167.png",o=e.p+"assets/img/31.025cfdb6.png",l=[(0,s.Fv)('<h2 id="jul日志系统2" tabindex="-1"><a class="header-anchor" href="#jul日志系统2"><span>JUL日志系统2</span></a></h2><h3 id="日志核心内容" tabindex="-1"><a class="header-anchor" href="#日志核心内容"><span>日志核心内容</span></a></h3><h4 id="核心部分-handler" tabindex="-1"><a class="header-anchor" href="#核心部分-handler"><span>核心部分 <code>Handler</code></span></a></h4><p>日志打印的核心部分：<code>Handler</code>，它用于处理我们的日志内容打印</p><p><code>ConsoleHandler</code> | <code>FileHandler</code> | <code>SocketHandler</code></p><p>JDK为我们提供了很多种类的<code>Handler</code>用于多种不同类型的日志打印，比较常见的就是打印到控制台，当然我们也可以打印到一个日志文件中，名字一般为<code>xxx.log</code>这种格式。</p><p>常用的Handler实现有：</p><ul><li><code>ConsoleHandler</code>: 将日志通过<code>System. err</code>打印到控制台，现在默认就是使用的这个。</li><li><code>FileHandler</code>: 将日志直接写入到指定的文件中。</li><li><code>SocketHandler</code>: 将日志利用Socket通过网络发送到另一个主机。</li></ul><p>当然，一个Logger中可以包含多个Handler用于同时向不同的地方打印日志，我们可以通过<code>getHandlers</code>方法来获取Logger对象中已经配置的Handler对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">getHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时打印的列表中不存在任何Handler对象，可见，我们创建的Logger默认是不带任何Handler对象的</p><p>那么我们之前的日志是怎么打印出来的呢？这实际上是Logger的父级提供的，这里我们先暂时不介绍继承关系。</p><p>我们使用<code>setUseParentHandlers</code>方法来屏蔽所有父级提供的日志处理器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>logger<span class="token punctuation">.</span><span class="token function">setUseParentHandlers</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在由于Logger没有配置任何Handler处理器，因此我们打印日志就<strong>不会有任何效果</strong>。</p><h5 id="consolehandler" tabindex="-1"><a class="header-anchor" href="#consolehandler"><span><code>ConsoleHandler</code></span></a></h5><p>我们可以来尝试自己配置一个用于控制台打印的Handler处理器，这里直接创建一个新的ConsoleHandler对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ConsoleHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们打印日志就可以出现想要的结果了：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>8月 28, 2024 12:12:37 上午 com.test.Main main\n信息: Hello World\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="filehandler" tabindex="-1"><a class="header-anchor" href="#filehandler"><span><code>FileHandler</code></span></a></h5><p>我们接着来尝试将日志记录到我们本地的文件中，这里使用FileHandler类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">FileHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token string">&quot;test.log&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token comment">//第二个参数开启后会续写已有的日志，如果不开启会直接覆盖重写</span>\nlogger<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们就可以得到一个日志文件了，默认是以XML格式进行写入的：</p><figure><img src="'+t+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>这种格式有助于程序的日志读取，但是对于我们人来说，非常难以阅读，那有没有什么办法将文件的日志打印变成控制台那种格式呢？</p><h5 id="修改输出格式-formatter" tabindex="-1"><a class="header-anchor" href="#修改输出格式-formatter"><span>修改输出格式 <code>Formatter</code></span></a></h5><p>实际上每一个Handler都有一个<code>Formatter</code>对象，它用于控制日志的格式，默认情况下，<code>ConsoleHandler</code>会配置一个<code>SimpleFormatte</code>r对象，格式为：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>时间 类名 方法\n日志级别: 日志内容\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们刚刚在<code>FileHandler</code>中见到的是默认生成的<code>XMLFormatter</code>，它会将日志以XML的形式进行打印，现在我们也可以手动修改它为<code>SimpleFormatter</code>类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token string">&quot;test.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nhandler<span class="token punctuation">.</span><span class="token function">setFormatter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时日志文件中写入的内容就是简单的日志格式了 <img src="'+o+'" alt="alt text" loading="lazy"></p>',32)],c={},p=(0,e(3671).A)(c,[["render",function(a,n){return(0,s.uX)(),(0,s.CE)("div",null,l)}]]),d=JSON.parse('{"path":"/code/javaweb/javaweb21.html","title":"javaweb - JUL日志2","lang":"zh-CN","frontmatter":{"title":"javaweb - JUL日志2","date":"2025-07-06T00:00:00.000Z","category":["code"],"tag":["javaweb","JUL"],"order":-0.7478,"description":"JUL日志系统2 日志核心内容 核心部分 Handler 日志打印的核心部分：Handler，它用于处理我们的日志内容打印 ConsoleHandler | FileHandler | SocketHandler JDK为我们提供了很多种类的Handler用于多种不同类型的日志打印，比较常见的就是打印到控制台，当然我们也可以打印到一个日志文件中，名字一...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/javaweb21.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - JUL日志2"}],["meta",{"property":"og:description","content":"JUL日志系统2 日志核心内容 核心部分 Handler 日志打印的核心部分：Handler，它用于处理我们的日志内容打印 ConsoleHandler | FileHandler | SocketHandler JDK为我们提供了很多种类的Handler用于多种不同类型的日志打印，比较常见的就是打印到控制台，当然我们也可以打印到一个日志文件中，名字一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-06T14:33:39.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"JUL"}],["meta",{"property":"article:published_time","content":"2025-07-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-06T14:33:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - JUL日志2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-06T14:33:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"JUL日志系统2","slug":"jul日志系统2","link":"#jul日志系统2","children":[{"level":3,"title":"日志核心内容","slug":"日志核心内容","link":"#日志核心内容","children":[{"level":4,"title":"核心部分 Handler","slug":"核心部分-handler","link":"#核心部分-handler","children":[{"level":5,"title":"ConsoleHandler","slug":"consolehandler","link":"#consolehandler","children":[]},{"level":5,"title":"FileHandler","slug":"filehandler","link":"#filehandler","children":[]},{"level":5,"title":"修改输出格式 Formatter","slug":"修改输出格式-formatter","link":"#修改输出格式-formatter","children":[]}]}]}]}],"git":{"createdTime":1751812419000,"updatedTime":1751812419000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":2.57,"words":771},"filePathRelative":"code/javaweb/javaweb21.md","localizedDate":"2025年7月6日","excerpt":"<h2>JUL日志系统2</h2>\\n<h3>日志核心内容</h3>\\n<h4>核心部分 <code>Handler</code></h4>\\n<p>日志打印的核心部分：<code>Handler</code>，它用于处理我们的日志内容打印</p>\\n<p><code>ConsoleHandler</code> | <code>FileHandler</code> | <code>SocketHandler</code></p>\\n<p>JDK为我们提供了很多种类的<code>Handler</code>用于多种不同类型的日志打印，比较常见的就是打印到控制台，当然我们也可以打印到一个日志文件中，名字一般为<code>xxx.log</code>这种格式。</p>","autoDesc":true}')}}]);