"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[9414],{83671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},26763:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var t=a(7847);const e=[(0,t.Fv)('<h2 id="jul日志系统" tabindex="-1"><a class="header-anchor" href="#jul日志系统"><span>JUL日志系统</span></a></h2><p>JDK为我们提供了一个自带的日志框架，位于<code>java.util.logging</code>包下，我们可以使用此框架来实现日志的规范化打印，使用起来非常简单：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 首先获取日志打印器，名称随意</span>\n        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 调用info来输出一个普通的信息，直接填写字符串即可</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;我是普通的日志&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在主类中使用日志打印，得到日志的打印结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>十一月 15, 2021 12:55:37 下午 com.test.Main main\n信息: 我是普通的日志\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，通过日志输出的结果会更加规范，在后续的学习中，日志将时刻伴随我们左右。</p><h3 id="jul基本使用" tabindex="-1"><a class="header-anchor" href="#jul基本使用"><span>JUL基本使用</span></a></h3><p>日志的打印并不是简单的输出，有些时候我们可以会打印一些比较重要的日志信息，或是一些非常紧急的日志信息，根据不同类型的信息进行划分</p><h4 id="级别划分" tabindex="-1"><a class="header-anchor" href="#级别划分"><span>级别划分</span></a></h4><p>日志一般分为7个级别，详细信息我们可以在<code>Level</code>类中查看：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Level</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  \n    <span class="token comment">//出现严重故障的消息级别，值为1000，也是可用的日志级别中最大的</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">SEVERE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">&quot;SEVERE&quot;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//存在潜在问题的消息级别，比如边充电边打电话就是个危险操作，虽然手机爆炸的概率很小，但是还是会有人警告你最好别这样做，这是日志级别中倒数第二大的</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">WARNING</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">&quot;WARNING&quot;</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//所有常规提示日志信息都以INFO级别进行打印</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">INFO</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">&quot;INFO&quot;</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//以下日志级别依次降低，不太常用</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">CONFIG</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">&quot;CONFIG&quot;</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">FINE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">&quot;FINE&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">FINER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">&quot;FINER&quot;</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">FINEST</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">&quot;FINEST&quot;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前通过<code>info</code>方法直接输出的结果就是使用的默认级别的日志，实际上每个级别都有一个对应的方法用于打印：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    logger<span class="token punctuation">.</span><span class="token function">severe</span><span class="token punctuation">(</span><span class="token string">&quot;severe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//最高日志级别</span>\n    logger<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">&quot;warning&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认日志级别</span>\n    logger<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    logger<span class="token punctuation">.</span><span class="token function">fine</span><span class="token punctuation">(</span><span class="token string">&quot;fine&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    logger<span class="token punctuation">.</span><span class="token function">finer</span><span class="token punctuation">(</span><span class="token string">&quot;finer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    logger<span class="token punctuation">.</span><span class="token function">finest</span><span class="token punctuation">(</span><span class="token string">&quot;finest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//最低日志级别</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义级别设置-logger-log" tabindex="-1"><a class="header-anchor" href="#自定义级别设置-logger-log"><span>自定义级别设置 <code>logger.log</code></span></a></h4><p>当然，如果需要更加灵活地控制日志级别</p><p>我们也可以通过<code>log</code>方法来主动设定该条日志的输出级别：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">SEVERE</span><span class="token punctuation">,</span> <span class="token string">&quot;严重的错误&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;祝你明天就遇到我&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">WARNING</span><span class="token punctuation">,</span> <span class="token string">&quot;警告的内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">,</span> <span class="token string">&quot;普通的信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;级别低于普通信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Logger</code>默认情况下只会打印INFO级别以上的日志，而INFO级别以下的日志则会直接省略，我们可以通过配置来进行调整。</p><h4 id="修改日志的默认打印级别" tabindex="-1"><a class="header-anchor" href="#修改日志的默认打印级别"><span>修改日志的默认打印级别</span></a></h4><p>我们知道日志的默认打印级别为INFO，此时低于INFO的所有日志都是被屏蔽的，而要修改日志的默认打印级别，我们需要同时调整<code>Handler</code>和<code>Logger</code>的<code>level</code>属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>handler<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">FINEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token comment">//注意，填写的日志打印级别是什么，高于等于此级别的所有日志都会被打印</span>\nlogger<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">FINEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">fine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们再次打印低于INFO级别的日志就可以正确得到结果了。</p><p><code>Logger</code>类还为我们提供了两个比较特殊的日志级别，它们专门用于配置特殊情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//表示直接关闭所有日志信息，值为int的最大值</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">OFF</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">&quot;OFF&quot;</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//表示开启所有日志信息，无论是什么级别都进行打印</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">ALL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">&quot;ALL&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这这里OFF的值为int的最大值，也就是说没有任何日志级别的值大于它，因此，如果将打印等级配置为OFF，那么所有类型的日志信息都不会被打印了，而ALL则相反。</p>',25)],p={},o=(0,a(83671).A)(p,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),c=JSON.parse('{"path":"/code/javaweb/5-JUL/javaweb20.html","title":"javaweb - JUL日志1","lang":"zh-CN","frontmatter":{"title":"javaweb - JUL日志1","date":"2025-07-04T00:00:00.000Z","category":["code"],"tag":["javaweb","JUL"],"order":-0.7478,"description":"JUL日志系统 JDK为我们提供了一个自带的日志框架，位于java.util.logging包下，我们可以使用此框架来实现日志的规范化打印，使用起来非常简单： 我们可以在主类中使用日志打印，得到日志的打印结果： 我们发现，通过日志输出的结果会更加规范，在后续的学习中，日志将时刻伴随我们左右。 JUL基本使用 日志的打印并不是简单的输出，有些时候我们可以...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/5-JUL/javaweb20.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - JUL日志1"}],["meta",{"property":"og:description","content":"JUL日志系统 JDK为我们提供了一个自带的日志框架，位于java.util.logging包下，我们可以使用此框架来实现日志的规范化打印，使用起来非常简单： 我们可以在主类中使用日志打印，得到日志的打印结果： 我们发现，通过日志输出的结果会更加规范，在后续的学习中，日志将时刻伴随我们左右。 JUL基本使用 日志的打印并不是简单的输出，有些时候我们可以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T16:02:13.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"JUL"}],["meta",{"property":"article:published_time","content":"2025-07-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T16:02:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - JUL日志1\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-07T16:02:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"JUL日志系统","slug":"jul日志系统","link":"#jul日志系统","children":[{"level":3,"title":"JUL基本使用","slug":"jul基本使用","link":"#jul基本使用","children":[{"level":4,"title":"级别划分","slug":"级别划分","link":"#级别划分","children":[]},{"level":4,"title":"自定义级别设置 logger.log","slug":"自定义级别设置-logger-log","link":"#自定义级别设置-logger-log","children":[]},{"level":4,"title":"修改日志的默认打印级别","slug":"修改日志的默认打印级别","link":"#修改日志的默认打印级别","children":[]}]}]}],"git":{"createdTime":1751904133000,"updatedTime":1751904133000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":3.5,"words":1049},"filePathRelative":"code/javaweb/5-JUL/javaweb20.md","localizedDate":"2025年7月4日","excerpt":"<h2>JUL日志系统</h2>\\n<p>JDK为我们提供了一个自带的日志框架，位于<code>java.util.logging</code>包下，我们可以使用此框架来实现日志的规范化打印，使用起来非常简单：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Main</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 首先获取日志打印器，名称随意</span>\\n        <span class=\\"token class-name\\">Logger</span> logger <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Logger</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getLogger</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"test\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 调用info来输出一个普通的信息，直接填写字符串即可</span>\\n        logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"我是普通的日志\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);