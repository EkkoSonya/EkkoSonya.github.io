"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[2424],{83671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},96096:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>u,data:()=>d});var t=s(7847);const e=s.p+"assets/img/9.5cb0c852.png",p=(0,t.Fv)('<h2 id="苍穹外卖" tabindex="-1"><a class="header-anchor" href="#苍穹外卖"><span>苍穹外卖</span></a></h2><h3 id="接口文档导入" tabindex="-1"><a class="header-anchor" href="#接口文档导入"><span>接口文档导入</span></a></h3><p>前企业主流的前后端分离开发方式，那么这种方式就要求我们之前需要先将接口定义好，这样前后端人员才能并行开发。其实，在真实的企业开发中，接口设计过程其实是一个非常漫长的过程，可能需要多次开会讨论调整，甚至在开发的过程中才会发现某些接口定义还需要再调整，这种情况其实是非常常见的</p><p><strong>前后端分离开发流程</strong>：</p><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="接口管理平台" tabindex="-1"><a class="header-anchor" href="#接口管理平台"><span>接口管理平台</span></a></h4>',6),o={href:"https://yapi.pro/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Lk)("h4",{id:"swagger-knife4j",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#swagger-knife4j"},[(0,t.Lk)("span",null,"Swagger (knife4j)")])],-1),i={href:"https://swagger.io/",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Fv)('<ol><li><p>使得前后端分离开发更加方便，有利于团队协作</p></li><li><p>接口的文档在线自动生成，降低后端开发人员编写接口文档的负担</p></li><li><p>功能测试</p><p>Spring已经将Swagger纳入自身的标准，建立了Spring-swagger项目，现在叫Springfox。通过在项目中引入Springfox ，即可非常简单快捷的使用Swagger。</p></li></ol><p>knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案,前身是swagger-bootstrap-ui,取名kni4j是希望它能像一把匕首一样小巧,轻量,并且功能强悍!</p><p>目前，一般都使用knife4j框架。</p><h5 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤"><span>使用步骤</span></a></h5><ol><li><p>导入 knife4j 的maven坐标</p><p>在pom.xml中添加依赖</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在配置类中加入 knife4j 相关配置</p><p>WebMvcConfiguration.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n     * 通过knife4j生成接口文档\n     * <span class="token keyword">@return</span>\n*/</span>\n <span class="token annotation punctuation">@Bean</span>\n <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token class-name">ApiInfo</span> apiInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n             <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;苍穹外卖项目接口文档&quot;</span><span class="token punctuation">)</span>\n             <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;2.0&quot;</span><span class="token punctuation">)</span>\n             <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;苍穹外卖项目接口文档&quot;</span><span class="token punctuation">)</span>\n             <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token class-name">Docket</span> docket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>\n             <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span>apiInfo<span class="token punctuation">)</span>\n             <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n             <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">&quot;com.sky.controller&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n             <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n             <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">return</span> docket<span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置静态资源映射，否则接口文档页面无法访问</p><p>WebMvcConfiguration.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n     * 设置静态资源映射\n     * <span class="token keyword">@param</span> <span class="token parameter">registry</span>\n*/</span>\n<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/doc.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/META-INF/resources/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/META-INF/resources/webjars/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h5 id="swagger-常用注解" tabindex="-1"><a class="header-anchor" href="#swagger-常用注解"><span>Swagger 常用注解</span></a></h5><p>通过注解可以控制生成的接口文档，使接口文档拥有更好的可读性，常用注解如下：</p><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>@Api</code></td><td>用在类上，例如Controller，表示对类的说明</td></tr><tr><td><code>@ApiMode</code>l</td><td>用在类上，例如entity、DTO、VO</td></tr><tr><td><code>@ApiModelProperty</code></td><td>用在属性上，描述属性信息</td></tr><tr><td><code>@ApiOperation</code></td><td>用在方法上，例如Controller的方法，说明方法的用途、作用</td></tr></tbody></table><p>接下来，使用上述注解，生成可读性更好的接口文档</p>',9),r={},u=(0,s(83671).A)(r,[["render",function(n,a){const s=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[p,(0,t.Lk)("p",null,[(0,t.eW)("将课程资料中提供的项目接口导入YApi。访问地址："),(0,t.Lk)("a",o,[(0,t.eW)("https://yapi.pro/"),(0,t.bF)(s)])]),c,(0,t.Lk)("p",null,[(0,t.eW)("Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务("),(0,t.Lk)("a",i,[(0,t.eW)("https://swagger.io/"),(0,t.bF)(s)]),(0,t.eW)(")。 它的主要作用是：")]),l])}]]),d=JSON.parse('{"path":"/code/java_item/1-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/article2.html","title":"Javassm - item1-2 (接口文档导入)","lang":"zh-CN","frontmatter":{"title":"Javassm - item1-2 (接口文档导入)","date":"2025-10-18T00:00:00.000Z","category":["code"],"tag":["java_item"],"order":-0.6,"description":"苍穹外卖 接口文档导入 前企业主流的前后端分离开发方式，那么这种方式就要求我们之前需要先将接口定义好，这样前后端人员才能并行开发。其实，在真实的企业开发中，接口设计过程其实是一个非常漫长的过程，可能需要多次开会讨论调整，甚至在开发的过程中才会发现某些接口定义还需要再调整，这种情况其实是非常常见的 前后端分离开发流程： alt textalt text ...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_item/1-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/article2.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - item1-2 (接口文档导入)"}],["meta",{"property":"og:description","content":"苍穹外卖 接口文档导入 前企业主流的前后端分离开发方式，那么这种方式就要求我们之前需要先将接口定义好，这样前后端人员才能并行开发。其实，在真实的企业开发中，接口设计过程其实是一个非常漫长的过程，可能需要多次开会讨论调整，甚至在开发的过程中才会发现某些接口定义还需要再调整，这种情况其实是非常常见的 前后端分离开发流程： alt textalt text ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-16T17:59:51.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"java_item"}],["meta",{"property":"article:published_time","content":"2025-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-16T17:59:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - item1-2 (接口文档导入)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-16T17:59:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"苍穹外卖","slug":"苍穹外卖","link":"#苍穹外卖","children":[{"level":3,"title":"接口文档导入","slug":"接口文档导入","link":"#接口文档导入","children":[{"level":4,"title":"接口管理平台","slug":"接口管理平台","link":"#接口管理平台","children":[]},{"level":4,"title":"Swagger  (knife4j)","slug":"swagger-knife4j","link":"#swagger-knife4j","children":[{"level":5,"title":"使用步骤","slug":"使用步骤","link":"#使用步骤","children":[]},{"level":5,"title":"Swagger 常用注解","slug":"swagger-常用注解","link":"#swagger-常用注解","children":[]}]}]}]}],"git":{"createdTime":1760637591000,"updatedTime":1760637591000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":2.29,"words":688},"filePathRelative":"code/java_item/1-苍穹外卖/article2.md","localizedDate":"2025年10月18日","excerpt":"<h2>苍穹外卖</h2>\\n<h3>接口文档导入</h3>\\n<p>前企业主流的前后端分离开发方式，那么这种方式就要求我们之前需要先将接口定义好，这样前后端人员才能并行开发。其实，在真实的企业开发中，接口设计过程其实是一个非常漫长的过程，可能需要多次开会讨论调整，甚至在开发的过程中才会发现某些接口定义还需要再调整，这种情况其实是非常常见的</p>\\n<p><strong>前后端分离开发流程</strong>：</p>\\n<figure><figcaption>alt text</figcaption></figure>\\n<h4>接口管理平台</h4>\\n<p>将课程资料中提供的项目接口导入YApi。访问地址：<a href=\\"https://yapi.pro/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://yapi.pro/</a></p>","autoDesc":true}')}}]);