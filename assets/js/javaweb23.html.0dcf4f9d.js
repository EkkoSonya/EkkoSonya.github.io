"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[687],{83671:(a,n)=>{n.A=(a,n)=>{const s=a.__vccOpts||a;for(const[a,e]of n)s[a]=e;return s}},42996:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>o,data:()=>c});var e=s(7847);const t=[(0,e.Fv)('<h2 id="jul日志系统4" tabindex="-1"><a class="header-anchor" href="#jul日志系统4"><span>JUL日志系统4</span></a></h2><h3 id="日志默认配置" tabindex="-1"><a class="header-anchor" href="#日志默认配置"><span>日志默认配置</span></a></h3><h4 id="properties-格式" tabindex="-1"><a class="header-anchor" href="#properties-格式"><span><code>Properties</code> 格式</span></a></h4><p><code>Properties</code>格式的文件是Java的一种配置文件，我们之前在学习Mybatis的时候学习了XML，但是我们发现XML配置文件读取实在是太麻烦，那么能否有一种简单一点的配置文件呢？</p><p>此时就可以使用<code>Properties</code>文件，它的格式如下：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">Test</span>\n<span class="token key attr-name">desc</span><span class="token punctuation">=</span><span class="token value attr-value">Description</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该文件配置很简单，格式<strong>类似于我们Java中的Map键值对</strong>，中间使用<strong>等号</strong>进行连接。</p><p>当然，<strong>键的名称我们也可以分为多级进行配置</strong>，每一级使用<code>.</code>进行划分，比如我们现在要配置数据库的连接信息，就可以编写为这种形式：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">jdbc.datasource.driver</span><span class="token punctuation">=</span><span class="token value attr-value">com.cj.mysql.Driver</span>\n<span class="token key attr-name">jdbc.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/test</span>\n<span class="token key attr-name">jdbc.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">test</span>\n<span class="token key attr-name">jdbc.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="java读取properties" tabindex="-1"><a class="header-anchor" href="#java读取properties"><span>JAVA读取<code>Properties</code></span></a></h5><p>JDK为我们提供了一个叫做<code>Properties</code>的类型，它继承自<code>Hashtable</code>类（是HashMap的<strong>同步加锁版</strong>）</p><p>使用起来和<code>HashMap</code>是差不多的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Properties</span> <span class="token keyword">extends</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相关操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nproperties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;test.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//使用load方法读取本地文件中的所有配置到Map中</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>\nproperties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="获取系统数据getproperties" tabindex="-1"><a class="header-anchor" href="#获取系统数据getproperties"><span>获取系统数据<code>getProperties</code></span></a></h5><p>实际上，我们也可以通过这种方式来获取我们的一些系统属性</p><p><code>System</code>类中有一个<code>getProperties</code>方法用于存储所有系统相关的属性值，这里我们打印一下系统名称和版本：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;os.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;os.version&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，程序中的Properties对象也可以快速保存为一个对应的<code>.properties</code>文件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nproperties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;system.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;系统属性&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jul设置默认配置-logmanger" tabindex="-1"><a class="header-anchor" href="#jul设置默认配置-logmanger"><span>JUL设置默认配置 <code>LogManger</code></span></a></h4><p>实际上JUL也可以通过进行<strong>配置文件来规定日志打印器的一些默认值</strong></p><p>比如我们现在想配置默认的日志打印级别：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># RootLogger 的默认处理器为</span>\n<span class="token key attr-name">handlers</span><span class="token punctuation">=</span><span class="token value attr-value">java.util.logging.ConsoleHandler</span>\n<span class="token comment"># RootLogger 的默认的日志级别</span>\n<span class="token key attr-name">.level</span><span class="token punctuation">=</span><span class="token value attr-value">ALL</span>\n<span class="token comment"># 配置ConsoleHandler的默认level</span>\n<span class="token key attr-name">java.util.logging.ConsoleHandler.level</span><span class="token punctuation">=</span><span class="token value attr-value">ALL</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们需要在程序开始之前加载这里的配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LogManager</span> manager <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token comment">//获取LogManager读取配置文件</span>\nmanager<span class="token punctuation">.</span><span class="token function">readConfiguration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以通过配置文件的形式修改一些功能的默认属性了，而不需要我们再使用代码进行配置。</p><p>实际上在JUL的这类内部也有着对应的配置处理操作，如果发现有默认配置优先使用配置里面的，比如Handler的构造方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Level</span> defaultLevel<span class="token punctuation">,</span> <span class="token class-name">Formatter</span> defaultFormatter<span class="token punctuation">,</span>\n        <span class="token class-name">Formatter</span> specifiedFormatter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token class-name">LogManager</span> manager <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> cname <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">final</span> <span class="token class-name">Level</span> level <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getLevelProperty</span><span class="token punctuation">(</span>cname <span class="token operator">+</span> <span class="token string">&quot;.level&quot;</span><span class="token punctuation">,</span> defaultLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> <span class="token class-name">Filter</span> filter <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getFilterProperty</span><span class="token punctuation">(</span>cname <span class="token operator">+</span> <span class="token string">&quot;.filter&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> <span class="token class-name">Formatter</span> formatter <span class="token operator">=</span> specifiedFormatter <span class="token operator">==</span> <span class="token keyword">null</span>\n                                <span class="token operator">?</span> manager<span class="token punctuation">.</span><span class="token function">getFormatterProperty</span><span class="token punctuation">(</span>cname <span class="token operator">+</span> <span class="token string">&quot;.formatter&quot;</span><span class="token punctuation">,</span> defaultFormatter<span class="token punctuation">)</span>\n                                <span class="token operator">:</span> specifiedFormatter<span class="token punctuation">;</span>\n    <span class="token keyword">final</span> <span class="token class-name">String</span> encoding <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getStringProperty</span><span class="token punctuation">(</span>cname <span class="token operator">+</span> <span class="token string">&quot;.encoding&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于使用配置文件的形式修改JUL部分内容的默认值就先讲解到这里。</p>',31)],p={},o=(0,s(83671).A)(p,[["render",function(a,n){return(0,e.uX)(),(0,e.CE)("div",null,t)}]]),c=JSON.parse('{"path":"/code/javaweb/5-JUL/javaweb23.html","title":"javaweb - JUL日志4","lang":"zh-CN","frontmatter":{"title":"javaweb - JUL日志4","date":"2025-07-06T00:00:00.000Z","category":["code"],"tag":["javaweb","JUL"],"order":-0.7476,"description":"JUL日志系统4 日志默认配置 Properties 格式 Properties格式的文件是Java的一种配置文件，我们之前在学习Mybatis的时候学习了XML，但是我们发现XML配置文件读取实在是太麻烦，那么能否有一种简单一点的配置文件呢？ 此时就可以使用Properties文件，它的格式如下： 该文件配置很简单，格式类似于我们Java中的Map键...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/5-JUL/javaweb23.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - JUL日志4"}],["meta",{"property":"og:description","content":"JUL日志系统4 日志默认配置 Properties 格式 Properties格式的文件是Java的一种配置文件，我们之前在学习Mybatis的时候学习了XML，但是我们发现XML配置文件读取实在是太麻烦，那么能否有一种简单一点的配置文件呢？ 此时就可以使用Properties文件，它的格式如下： 该文件配置很简单，格式类似于我们Java中的Map键..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T16:02:13.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"JUL"}],["meta",{"property":"article:published_time","content":"2025-07-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T16:02:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - JUL日志4\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-07T16:02:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"JUL日志系统4","slug":"jul日志系统4","link":"#jul日志系统4","children":[{"level":3,"title":"日志默认配置","slug":"日志默认配置","link":"#日志默认配置","children":[{"level":4,"title":"Properties 格式","slug":"properties-格式","link":"#properties-格式","children":[{"level":5,"title":"JAVA读取Properties","slug":"java读取properties","link":"#java读取properties","children":[]},{"level":5,"title":"获取系统数据getProperties","slug":"获取系统数据getproperties","link":"#获取系统数据getproperties","children":[]}]},{"level":4,"title":"JUL设置默认配置 LogManger","slug":"jul设置默认配置-logmanger","link":"#jul设置默认配置-logmanger","children":[]}]}]}],"git":{"createdTime":1751904133000,"updatedTime":1751904133000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":2.42,"words":727},"filePathRelative":"code/javaweb/5-JUL/javaweb23.md","localizedDate":"2025年7月6日","excerpt":"<h2>JUL日志系统4</h2>\\n<h3>日志默认配置</h3>\\n<h4><code>Properties</code> 格式</h4>\\n<p><code>Properties</code>格式的文件是Java的一种配置文件，我们之前在学习Mybatis的时候学习了XML，但是我们发现XML配置文件读取实在是太麻烦，那么能否有一种简单一点的配置文件呢？</p>\\n<p>此时就可以使用<code>Properties</code>文件，它的格式如下：</p>\\n<div class=\\"language-properties\\" data-ext=\\"properties\\" data-title=\\"properties\\"><pre class=\\"language-properties\\"><code><span class=\\"token key attr-name\\">name</span><span class=\\"token punctuation\\">=</span><span class=\\"token value attr-value\\">Test</span>\\n<span class=\\"token key attr-name\\">desc</span><span class=\\"token punctuation\\">=</span><span class=\\"token value attr-value\\">Description</span>\\n</code></pre></div>","autoDesc":true}')}}]);