"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[3064],{3671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},8034:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>c,data:()=>l});var t=s(7847);const e=(0,t.Fv)('<h2 id="springel表达式" tabindex="-1"><a class="header-anchor" href="#springel表达式"><span>SpringEL表达式</span></a></h2><p>SpEL 是一种强大，简洁的装配 Bean 的方式，它可以通过运行期间执行的表达式将值装配到我们的属性或构造函数当中，更可以调用 JDK 中提供的静态常量，获取外部 Properties 文件中的的配置。</p><h3 id="外部属性注入" tabindex="-1"><a class="header-anchor" href="#外部属性注入"><span>外部属性注入</span></a></h3><p>我们可以将一些外部配置文件中的配置进行读取，并完成注入。</p><p>创建以<code>.properties</code>结尾的配置文件，这种配置文件格式很简单，类似于Map，需要一个Key和一个Value，中间使用等号进行连接</p><p>这里我们在resource目录下创建一个<code>test.properties</code>文件：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">test.name</span><span class="token punctuation">=</span><span class="token value attr-value">企鹅</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="propertysource" tabindex="-1"><a class="header-anchor" href="#propertysource"><span><code>@PropertySource</code></span></a></h4><p>我们可以通过一个注解直接读取到外部配置文件中对应的属性值，首先我们需要引入这个配置文件，我们可以在配置类上添加<code>@PropertySource</code>注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.test.bean&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:test.properties&quot;</span><span class="token punctuation">)</span>\n<span class="token comment">//注意，类路径下的文件名称需要在前面加上classpath:</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfiguration</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span><code>@Value</code></span></a></h4><p>通过 <code>@Value</code> 注解将外部配置文件中的值注入到任何我们想要的位置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${test.name}&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//这里需要在外层套上 ${ }</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token comment">//String会被自动赋值为配置文件中对应属性的值</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的名字是：&quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Value</code>中的<code>${...}</code>表示占位符，它会读取外部配置文件的属性值装配到属性中，如果配置正确没问题的话，这里甚至还会直接显示对应配置项的值：</p><figure><img src="https://oss.itbaima.cn/internal/markdown/2022/11/25/HDZ4l3tcreoOGh8.png" alt="image-20221125164854022" tabindex="0" loading="lazy"><figcaption>image-20221125164854022</figcaption></figure><p>如果遇到乱码的情况，请将配置文件的编码格式切换成UTF-8：</p><p><code>Settings-&gt;Editor-&gt;File Encodings-&gt;Default encoding for properties files</code></p><p>然后在<code>@PropertySource</code>注解中添加属性</p><p><code>@PropertySource(value=&quot;classpath:test.properties&quot;, encoding = &quot;utf-8&quot;)</code></p><h5 id="方法参数注入" tabindex="-1"><a class="header-anchor" href="#方法参数注入"><span>方法参数注入</span></a></h5><p>除了在字段上进行注入之外，我们也可以在需要注入的方法中使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n    <span class="token comment">//构造方法中的参数除了被自动注入外，我们也可以选择使用@Value进行注入</span>\n    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${test.name}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的名字是：&quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果我们只是想简单的注入一个常量值，也可以直接填入固定值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n<span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>   \n  <span class="token comment">//只不过，这里都是常量值了，我干嘛不直接写到代码里呢</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，<code>@Value</code> 的功能还远不止这些，配合SpringEL表达式，能够实现更加强大的功能。</p><h3 id="spel表达式" tabindex="-1"><a class="header-anchor" href="#spel表达式"><span>SpEL表达式</span></a></h3><p>Spring官方为我们提供了一套非常高级SpEL表达式，通过使用表达式，我们可以更加灵活地使用Spring框架。</p><h4 id="创建spel表达式" tabindex="-1"><a class="header-anchor" href="#创建spel表达式"><span>创建SpEL表达式</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Hello World&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//使用parseExpression方法来创建一个表达式</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//表达式最终的运算结果可以通过getValue()获取</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里得到的就是一个很简单的 Hello World 字符串，字符串使用<strong>单引号</strong>囊括，SpEL是具有运算能力的。</p><p>我们可以像写Java一样，对这个字符串进行各种操作，比如调用方法之类的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Hello World&#39;.toUpperCase()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用String的toUpperCase方法</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅能调用方法、还可以访问属性、使用构造方法等</p><h4 id="exp-getvalue" tabindex="-1"><a class="header-anchor" href="#exp-getvalue"><span><code>exp.getValue()</code></span></a></h4><p>对于<code>Getter</code>方法，我们可以像访问属性一样去使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//比如 String.getBytes() 方法，就是一个Getter，那么可以写成 bytes</span>\n<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Hello World&#39;.bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表达式可以不止一级，我们可以多级调用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Hello World&#39;.bytes.length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//继续访问数组的length属性</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于构造方法，也可以写成这种表达式而已：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;new String(&#39;hello world&#39;).toUpperCase()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它甚至还支持根据特定表达式，从给定对象中获取属性出来：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${test.name}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//比如下面要访问name属性，那么这个属性得可以访问才行，访问权限不够是不行的</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Student</span> student <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//直接读取对象的name属性</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里表示<code>exp</code>为某个对应的<code>name</code>属性，然后通过<code>getValue()</code>去获取，对应属性就需要有对应的<code>Getter</code>方法</p><p>拿到对象属性之后，甚至还可以继续去处理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;name.bytes.length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//拿到name之后继续getBytes然后length</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="exp-setvalue" tabindex="-1"><a class="header-anchor" href="#exp-setvalue"><span><code>exp.setValue()</code></span></a></h4><p>除了获取，我们也可以调用表达式的<code>setValue</code>方法来设定属性的值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nexp<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">&quot;刻师傅&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//同样的，这个属性得有访问权限且能set才可以，否则会报错</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了属性调用，我们也可以使用运算符进行各种高级运算：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;66 &gt; 77&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//比较运算</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;99 + 99 * 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//算数运算</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="导入-t" tabindex="-1"><a class="header-anchor" href="#导入-t"><span>导入 <code>T()</code></span></a></h4><p>对于那些需要导入才能使用的类以及静态方法使用，我们需要使用一个特殊的语法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;T(java.lang.Math).random()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token comment">//由T()囊括，包含完整包名+类名</span>\n<span class="token comment">//Expression exp = parser.parseExpression(&quot;T(System).nanoTime()&quot;);   //默认导入的类可以不加包名</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即这种表达式如果只是简单字符串，表示的是对应字段属性</p><p>如果要表示字符串，需要加入单引号, <code>&quot;`xxx`&quot;</code></p><p>如果表示导入的类啥就需要 <code>T(xxx)</code></p><h3 id="集合操作相关语法" tabindex="-1"><a class="header-anchor" href="#集合操作相关语法"><span>集合操作相关语法</span></a></h3><h4 id="选取元素" tabindex="-1"><a class="header-anchor" href="#选取元素"><span>选取元素</span></a></h4><p>现在我们的类中存在一些集合类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;你干嘛&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;AAA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BBB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CCC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用SpEL快速取出集合中的元素：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;map[&#39;test&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//对于Map这里映射型，可以直接使用map[key]来取出value</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;list[2]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//对于List、数组这类，可以直接使用[index]</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建" tabindex="-1"><a class="header-anchor" href="#创建"><span>创建</span></a></h4><p>我们也可以快速创建集合：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;{5, 2, 1, 4, 6, 7, 0, 3, 9, 8}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用{}来快速创建List集合</span>\n<span class="token class-name">List</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nvalue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;{{1, 2}, {3, 4}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//支持嵌套使用的</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//创建Map也很简单，只需要key:value就可以了</span>\n<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;{name: &#39;小明&#39;, info: {address: &#39;北京市朝阳区&#39;, tel: 10086}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条件获取" tabindex="-1"><a class="header-anchor" href="#条件获取"><span>条件获取</span></a></h4><p>根据条件获取集合中的元素：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Clazz</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Clazz</span><span class="token punctuation">(</span><span class="token string">&quot;高等数学&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Clazz</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="" tabindex="-1"><a class="header-anchor" href="#"><span><code>.?</code></span></a></h5><p>获取那些满足我们条件的元素，并组成一个新的集合</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//现在我们希望从list中获取那些满足我们条件的元素，并组成一个新的集合，我们可以使用.?运算符</span>\n<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;list.?[name == &#39;高等数学&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;list.?[score &gt; 3]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//选择学分大于3分的科目</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="投影集合" tabindex="-1"><a class="header-anchor" href="#投影集合"><span>投影集合 <code>.!</code></span></a></h5><p>我们还可以针对某个属性创建对应的投影集合：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;list.![name]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//使用.!创建投影集合，这里创建的时课程名称组成的新集合</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="安全导航运算符" tabindex="-1"><a class="header-anchor" href="#安全导航运算符"><span>安全导航运算符 <code>.?</code></span></a></h4><p>我们接着来介绍安全导航运算符，安全导航运算符用于避免<code>NullPointerException</code>，它来自Groovy语言。</p><p>通常，当有对对象的引用时，可能需要在访问对象的方法或属性之前验证它是否为空。</p><p>为了避免这种情况，安全导航运算符返回null而不是抛出异常。</p><p>以下示例显示了如何使用安全导航运算符：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;name.toUpperCase()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//如果Student对象中的name属性为null</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>会直接报错显示空指针</p><p>当遇到null时很不方便，我们还得写判断：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 8之后能这样写：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是你如果写过Kotlin：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类似于这种判空问题，我们就可以直接使用安全导航运算符，SpEL也支持这种写法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;name?.toUpperCase()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当遇到空时，只会得到一个null，而不是直接抛出一个异常</p><p>我们可以将SpEL配合 <code>@Value</code> 注解或是xml配置文件中的value属性使用，比如XML中可以这样写：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>numberGuess<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.spring.samples.NumberGuess<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>randomNumber<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{ T(java.lang.Math).random() * 100.0 }<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或是使用注解开发：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldValueTestBean</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{ systemProperties[&#39;user.region&#39;] }&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们有时候在使用配置文件中的值时，就能进行一些简单的处理了。</p>',101),p={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-language-ref",target:"_blank",rel:"noopener noreferrer"},o={},c=(0,s(3671).A)(o,[["render",function(n,a){const s=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[e,(0,t.Lk)("p",null,[(0,t.eW)("有关更多详细语法教程，请前往："),(0,t.Lk)("a",p,[(0,t.eW)("https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-language-ref"),(0,t.bF)(s)])])])}]]),l=JSON.parse('{"path":"/code/java_ssm/1-Spring/3-AOP/spring7.html","title":"Javassm - SpringEL表达式1","lang":"zh-CN","frontmatter":{"title":"Javassm - SpringEL表达式1","date":"2025-08-12T00:00:00.000Z","category":["code"],"tag":["javassm","Spring","SpringEL"],"order":-0.5994,"description":"SpringEL表达式 SpEL 是一种强大，简洁的装配 Bean 的方式，它可以通过运行期间执行的表达式将值装配到我们的属性或构造函数当中，更可以调用 JDK 中提供的静态常量，获取外部 Properties 文件中的的配置。 外部属性注入 我们可以将一些外部配置文件中的配置进行读取，并完成注入。 创建以.properties结尾的配置文件，这种配置...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_ssm/1-Spring/3-AOP/spring7.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - SpringEL表达式1"}],["meta",{"property":"og:description","content":"SpringEL表达式 SpEL 是一种强大，简洁的装配 Bean 的方式，它可以通过运行期间执行的表达式将值装配到我们的属性或构造函数当中，更可以调用 JDK 中提供的静态常量，获取外部 Properties 文件中的的配置。 外部属性注入 我们可以将一些外部配置文件中的配置进行读取，并完成注入。 创建以.properties结尾的配置文件，这种配置..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.itbaima.cn/internal/markdown/2022/11/25/HDZ4l3tcreoOGh8.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-22T18:08:18.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Javassm - SpringEL表达式1"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javassm"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"SpringEL"}],["meta",{"property":"article:published_time","content":"2025-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-22T18:08:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - SpringEL表达式1\\",\\"image\\":[\\"https://oss.itbaima.cn/internal/markdown/2022/11/25/HDZ4l3tcreoOGh8.png\\"],\\"datePublished\\":\\"2025-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-22T18:08:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"SpringEL表达式","slug":"springel表达式","link":"#springel表达式","children":[{"level":3,"title":"外部属性注入","slug":"外部属性注入","link":"#外部属性注入","children":[{"level":4,"title":"@PropertySource","slug":"propertysource","link":"#propertysource","children":[]},{"level":4,"title":"@Value","slug":"value","link":"#value","children":[{"level":5,"title":"方法参数注入","slug":"方法参数注入","link":"#方法参数注入","children":[]}]}]},{"level":3,"title":"SpEL表达式","slug":"spel表达式","link":"#spel表达式","children":[{"level":4,"title":"创建SpEL表达式","slug":"创建spel表达式","link":"#创建spel表达式","children":[]},{"level":4,"title":"exp.getValue()","slug":"exp-getvalue","link":"#exp-getvalue","children":[]},{"level":4,"title":"exp.setValue()","slug":"exp-setvalue","link":"#exp-setvalue","children":[]},{"level":4,"title":"导入 T()","slug":"导入-t","link":"#导入-t","children":[]}]},{"level":3,"title":"集合操作相关语法","slug":"集合操作相关语法","link":"#集合操作相关语法","children":[{"level":4,"title":"选取元素","slug":"选取元素","link":"#选取元素","children":[]},{"level":4,"title":"创建","slug":"创建","link":"#创建","children":[]},{"level":4,"title":"条件获取","slug":"条件获取","link":"#条件获取","children":[{"level":5,"title":".?","slug":"","link":"#","children":[]},{"level":5,"title":"投影集合 .!","slug":"投影集合","link":"#投影集合","children":[]}]},{"level":4,"title":"安全导航运算符 .?","slug":"安全导航运算符","link":"#安全导航运算符","children":[]}]}]}],"git":{"createdTime":1758564498000,"updatedTime":1758564498000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":7.32,"words":2195},"filePathRelative":"code/java_ssm/1-Spring/3-AOP/spring7.md","localizedDate":"2025年8月12日","excerpt":"<h2>SpringEL表达式</h2>\\n<p>SpEL 是一种强大，简洁的装配 Bean 的方式，它可以通过运行期间执行的表达式将值装配到我们的属性或构造函数当中，更可以调用 JDK 中提供的静态常量，获取外部 Properties 文件中的的配置。</p>\\n<h3>外部属性注入</h3>\\n<p>我们可以将一些外部配置文件中的配置进行读取，并完成注入。</p>\\n<p>创建以<code>.properties</code>结尾的配置文件，这种配置文件格式很简单，类似于Map，需要一个Key和一个Value，中间使用等号进行连接</p>\\n<p>这里我们在resource目录下创建一个<code>test.properties</code>文件：</p>","autoDesc":true}')}}]);