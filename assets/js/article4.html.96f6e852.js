"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[5906],{83671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}},3152:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>k,data:()=>m});var e=s(7847);const t=s.p+"assets/img/14.a004f500.png",p=s.p+"assets/img/15.b1af9f3f.png",l=s.p+"assets/img/16.5d4917eb.png",o=s.p+"assets/img/17.9733d537.png",i=s.p+"assets/img/18.4dba02d7.png",c=s.p+"assets/img/19.059f1ec5.png",r=s.p+"assets/img/20.3bd4134a.png",d=[(0,e.Fv)('<h2 id="苍穹外卖" tabindex="-1"><a class="header-anchor" href="#苍穹外卖"><span>苍穹外卖</span></a></h2><h3 id="实现功能" tabindex="-1"><a class="header-anchor" href="#实现功能"><span>实现功能</span></a></h3><ul><li>新增员工</li><li>员工分页查询</li><li>启用禁用员工账号</li><li>编辑员工</li><li>导入分类模块功能代码</li></ul><h3 id="_3-启用禁用员工账号-admin-employee-status-status" tabindex="-1"><a class="header-anchor" href="#_3-启用禁用员工账号-admin-employee-status-status"><span>3. 启用禁用员工账号 <code>/admin/employee/status/{status}</code></span></a></h3><h4 id="产品原型" tabindex="-1"><a class="header-anchor" href="#产品原型"><span>产品原型</span></a></h4><figure><img src="'+t+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p><strong>业务规则：</strong></p><ul><li>可以对状态为“启用” 的员工账号进行“禁用”操作</li><li>可以对状态为“禁用”的员工账号进行“启用”操作</li><li>状态为“禁用”的员工账号不能登录系统</li></ul><h4 id="接口设计" tabindex="-1"><a class="header-anchor" href="#接口设计"><span>接口设计</span></a></h4><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>1). 路径参数携带状态值。 2). 同时，把id传递过去，明确对哪个用户进行操作。 3). 返回数据code状态是必须，其它是非必须。</p><h4 id="代码开发" tabindex="-1"><a class="header-anchor" href="#代码开发"><span>代码开发</span></a></h4><h5 id="controller层" tabindex="-1"><a class="header-anchor" href="#controller层"><span>Controller层</span></a></h5><p>在sky-server模块中，根据接口设计中的请求参数形式对应的在 EmployeeController 中创建启用禁用员工账号的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 启用禁用员工账号\n * <span class="token keyword">@param</span> <span class="token parameter">status</span>\n * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n * <span class="token keyword">@return</span>\n */</span>\n<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/status/{status}&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;启用禁用员工账号&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">startOrStop</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> status<span class="token punctuation">,</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;启用禁用员工账号：{},{}&quot;</span><span class="token punctuation">,</span>status<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    employeeService<span class="token punctuation">.</span><span class="token function">startOrStop</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后绪步骤定义</span>\n    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="service层接口" tabindex="-1"><a class="header-anchor" href="#service层接口"><span>Service层接口</span></a></h5><p>在 EmployeeService 接口中声明启用禁用员工账号的业务方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 启用禁用员工账号\n * <span class="token keyword">@param</span> <span class="token parameter">status</span>\n * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n */</span>\n<span class="token keyword">void</span> <span class="token function">startOrStop</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> status<span class="token punctuation">,</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="service层实现类" tabindex="-1"><a class="header-anchor" href="#service层实现类"><span>Service层实现类</span></a></h5><p>在 EmployeeServiceImpl 中实现启用禁用员工账号的业务方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 启用禁用员工账号\n *\n * <span class="token keyword">@param</span> <span class="token parameter">status</span>\n * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startOrStop</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> status<span class="token punctuation">,</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    employeeMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="mapper层" tabindex="-1"><a class="header-anchor" href="#mapper层"><span>Mapper层</span></a></h5><p>在 EmployeeMapper 接口中声明 update 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**\n     * 根据主键动态修改属性\n     * <span class="token keyword">@param</span> <span class="token parameter">employee</span>\n     */</span>\n    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 EmployeeMapper.xml 中编写SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span><span class="token keyword">update</span> id<span class="token operator">=</span><span class="token string">&quot;update&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;Employee&quot;</span><span class="token operator">&gt;</span>\n        <span class="token keyword">update</span> employee\n    <span class="token operator">&lt;</span><span class="token keyword">set</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;name != null&quot;</span><span class="token operator">&gt;</span>name <span class="token operator">=</span> <span class="token comment">#{name},&lt;/if&gt;</span>\n        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;username != null&quot;</span><span class="token operator">&gt;</span>username <span class="token operator">=</span> <span class="token comment">#{username},&lt;/if&gt;</span>\n        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;password != null&quot;</span><span class="token operator">&gt;</span>password <span class="token operator">=</span> <span class="token comment">#{password},&lt;/if&gt;</span>\n        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;phone != null&quot;</span><span class="token operator">&gt;</span>phone <span class="token operator">=</span> <span class="token comment">#{phone},&lt;/if&gt;</span>\n        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;sex != null&quot;</span><span class="token operator">&gt;</span>sex <span class="token operator">=</span> <span class="token comment">#{sex},&lt;/if&gt;</span>\n        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;idNumber != null&quot;</span><span class="token operator">&gt;</span>id_Number <span class="token operator">=</span> <span class="token comment">#{idNumber},&lt;/if&gt;</span>\n        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;updateTime != null&quot;</span><span class="token operator">&gt;</span>update_Time <span class="token operator">=</span> <span class="token comment">#{updateTime},&lt;/if&gt;</span>\n        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;updateUser != null&quot;</span><span class="token operator">&gt;</span>update_User <span class="token operator">=</span> <span class="token comment">#{updateUser},&lt;/if&gt;</span>\n        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;status != null&quot;</span><span class="token operator">&gt;</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token comment">#{status},&lt;/if&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">set</span><span class="token operator">&gt;</span>\n    <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment">#{id}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">update</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="登录时根据status限制登录" tabindex="-1"><a class="header-anchor" href="#登录时根据status限制登录"><span>登录时根据status限制登录</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">StatusConstant</span><span class="token punctuation">.</span><span class="token constant">DISABLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//账号被锁定</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccountLockedException</span><span class="token punctuation">(</span><span class="token class-name">MessageConstant</span><span class="token punctuation">.</span><span class="token constant">ACCOUNT_LOCKED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-编辑员工" tabindex="-1"><a class="header-anchor" href="#_4-编辑员工"><span>4. 编辑员工</span></a></h3><h4 id="产品原型-1" tabindex="-1"><a class="header-anchor" href="#产品原型-1"><span>产品原型</span></a></h4><p>在员工管理列表页面点击 &quot;编辑&quot; 按钮，跳转到编辑页面，在编辑页面<strong>回显</strong>员工信息并进行修改，最后点击 &quot;保存&quot; 按钮完成编辑操作。</p><figure><img src="'+l+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="接口设计-1" tabindex="-1"><a class="header-anchor" href="#接口设计-1"><span>接口设计</span></a></h4><p>根据上述原型图分析，编辑员工功能涉及到两个接口：</p><ul><li>根据id查询员工信息 <code>/admin/employee/{id}</code></li></ul><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>编辑员工信息 <code>/admin/employee</code> (<code>PUT</code>)</li></ul><figure><img src="'+i+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="代码开发-1" tabindex="-1"><a class="header-anchor" href="#代码开发-1"><span>代码开发</span></a></h4><h5 id="_1-信息回显" tabindex="-1"><a class="header-anchor" href="#_1-信息回显"><span>1. 信息回显</span></a></h5><h6 id="controller层-1" tabindex="-1"><a class="header-anchor" href="#controller层-1"><span><code>Controller</code>层</span></a></h6><p>在 EmployeeController 中创建 getById 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 根据id查询员工信息\n * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n * <span class="token keyword">@return</span>\n */</span>\n<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;根据id查询员工信息&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Employee</span> employee <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="service层接口-1" tabindex="-1"><a class="header-anchor" href="#service层接口-1"><span>Service层接口</span></a></h6><p>在 EmployeeService 接口中声明 getById 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 根据id查询员工\n * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n * <span class="token keyword">@return</span>\n */</span>\n<span class="token class-name">Employee</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="service层实现类-1" tabindex="-1"><a class="header-anchor" href="#service层实现类-1"><span>Service层实现类</span></a></h6><p>在 EmployeeServiceImpl 中实现 getById 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 根据id查询员工\n *\n * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n * <span class="token keyword">@return</span>\n */</span>\n<span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Employee</span> employee <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    employee<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;****&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> employee<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="mapper层-1" tabindex="-1"><a class="header-anchor" href="#mapper层-1"><span>Mapper层</span></a></h6><p>在 EmployeeMapper 接口中声明 getById 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 根据id查询员工信息\n * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n * <span class="token keyword">@return</span>\n */</span>\n<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from employee where id = #{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Employee</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-信息修改" tabindex="-1"><a class="header-anchor" href="#_2-信息修改"><span>2. 信息修改</span></a></h5><h6 id="controller层-2" tabindex="-1"><a class="header-anchor" href="#controller层-2"><span><code>Controller</code>层</span></a></h6><p>在 EmployeeController 中创建 update 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 编辑员工信息\n * <span class="token keyword">@param</span> <span class="token parameter">employeeDTO</span>\n * <span class="token keyword">@return</span>\n */</span>\n<span class="token annotation punctuation">@PutMapping</span>\n<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;编辑员工信息&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">EmployeeDTO</span> employeeDTO<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;编辑员工信息：{}&quot;</span><span class="token punctuation">,</span> employeeDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    employeeService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>employeeDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="service层接口-2" tabindex="-1"><a class="header-anchor" href="#service层接口-2"><span>Service层接口</span></a></h6><p>在 EmployeeService 接口中声明 getById 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 编辑员工信息\n * <span class="token keyword">@param</span> <span class="token parameter">employeeDTO</span>\n */</span>\n<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">EmployeeDTO</span> employeeDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="service层实现类-2" tabindex="-1"><a class="header-anchor" href="#service层实现类-2"><span>Service层实现类</span></a></h6><p>在 EmployeeServiceImpl 中实现 update 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 编辑员工信息\n *\n * <span class="token keyword">@param</span> <span class="token parameter">employeeDTO</span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">EmployeeDTO</span> employeeDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>employeeDTO<span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    employee<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    employee<span class="token punctuation">.</span><span class="token function">setUpdateUser</span><span class="token punctuation">(</span><span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">getCurrentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    employeeMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实现<strong>启用禁用员工账号</strong>功能时，已实现<code>employeeMapper.update(employee)</code>，在此不需写Mapper层代码。</p><h3 id="_5-分类模块功能代码-与员工管理模块类似" tabindex="-1"><a class="header-anchor" href="#_5-分类模块功能代码-与员工管理模块类似"><span>5. 分类模块功能代码 (与员工管理模块类似)</span></a></h3><h4 id="产品原型-2" tabindex="-1"><a class="header-anchor" href="#产品原型-2"><span>产品原型</span></a></h4><figure><img src="'+c+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>后台系统中可以管理分类信息，分类包括两种类型，分别是 <strong>菜品分类</strong> 和 <strong>套餐分类</strong> 。</p><p>先来分析<strong>菜品分类</strong>相关功能。</p><p><strong>新增菜品分类</strong>：当我们在后台系统中添加菜品时需要选择一个菜品分类，在移动端也会按照菜品分类来展示对应的菜品。</p><p><strong>菜品分类分页查询</strong>：系统中的分类很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p><p><strong>根据id删除菜品分类</strong>：在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是当分类关联了菜品或者套餐时，此分类不允许删除。</p><p><strong>修改菜品分类</strong>：在分类管理列表页面点击修改按钮，弹出修改窗口，在修改窗口回显分类信息并进行修改，最后点击确定按钮完成修改操作。</p><p><strong>启用禁用菜品分类</strong>：在分类管理列表页面，可以对某个分类进行启用或者禁用操作。</p><p><strong>分类类型查询</strong>：当点击分类类型下拉框时，从数据库中查询所有的菜品分类数据进行展示。</p><p><strong>业务规则：</strong></p><ul><li>分类名称必须是唯一的</li><li>分类按照类型可以分为菜品分类和套餐分类</li><li>新添加的分类状态默认为“禁用”</li></ul><h4 id="相关接口" tabindex="-1"><a class="header-anchor" href="#相关接口"><span>相关接口</span></a></h4><p>根据上述原型图分析，菜品分类模块共涉及6个接口。</p><ul><li>新增分类</li><li>分类分页查询</li><li>根据id删除分类</li><li>修改分类</li><li>启用禁用分类</li><li>根据类型查询分类</li></ul><figure><img src="'+r+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="数据表设计-category表" tabindex="-1"><a class="header-anchor" href="#数据表设计-category表"><span>数据表设计 <code>category</code>表</span></a></h4><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>分类名称</td><td>唯一</td></tr><tr><td>type</td><td>int</td><td>分类类型</td><td>1菜品分类 2套餐分类</td></tr><tr><td>sort</td><td>int</td><td>排序字段</td><td>用于分类数据的排序</td></tr><tr><td>status</td><td>int</td><td>状态</td><td>1启用 0禁用</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table>',82)],u={},k=(0,s(83671).A)(u,[["render",function(n,a){return(0,e.uX)(),(0,e.CE)("div",null,d)}]]),m=JSON.parse('{"path":"/code/java_item/1-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/article4.html","title":"Javassm - item1-4 ()","lang":"zh-CN","frontmatter":{"title":"Javassm - item1-4 ()","date":"2025-10-18T00:00:00.000Z","category":["code"],"tag":["java_item"],"order":-0.6,"description":"苍穹外卖 实现功能 新增员工 员工分页查询 启用禁用员工账号 编辑员工 导入分类模块功能代码 3. 启用禁用员工账号 /admin/employee/status/{status} 产品原型 alt textalt text 业务规则： 可以对状态为“启用” 的员工账号进行“禁用”操作 可以对状态为“禁用”的员工账号进行“启用”操作 状态为“禁用”的员...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_item/1-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/article4.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - item1-4 ()"}],["meta",{"property":"og:description","content":"苍穹外卖 实现功能 新增员工 员工分页查询 启用禁用员工账号 编辑员工 导入分类模块功能代码 3. 启用禁用员工账号 /admin/employee/status/{status} 产品原型 alt textalt text 业务规则： 可以对状态为“启用” 的员工账号进行“禁用”操作 可以对状态为“禁用”的员工账号进行“启用”操作 状态为“禁用”的员..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T16:00:49.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"java_item"}],["meta",{"property":"article:published_time","content":"2025-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T16:00:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - item1-4 ()\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-19T16:00:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"苍穹外卖","slug":"苍穹外卖","link":"#苍穹外卖","children":[{"level":3,"title":"实现功能","slug":"实现功能","link":"#实现功能","children":[]},{"level":3,"title":"3. 启用禁用员工账号 /admin/employee/status/{status}","slug":"_3-启用禁用员工账号-admin-employee-status-status","link":"#_3-启用禁用员工账号-admin-employee-status-status","children":[{"level":4,"title":"产品原型","slug":"产品原型","link":"#产品原型","children":[]},{"level":4,"title":"接口设计","slug":"接口设计","link":"#接口设计","children":[]},{"level":4,"title":"代码开发","slug":"代码开发","link":"#代码开发","children":[{"level":5,"title":"Controller层","slug":"controller层","link":"#controller层","children":[]},{"level":5,"title":"Service层接口","slug":"service层接口","link":"#service层接口","children":[]},{"level":5,"title":"Service层实现类","slug":"service层实现类","link":"#service层实现类","children":[]},{"level":5,"title":"Mapper层","slug":"mapper层","link":"#mapper层","children":[]},{"level":5,"title":"登录时根据status限制登录","slug":"登录时根据status限制登录","link":"#登录时根据status限制登录","children":[]}]}]},{"level":3,"title":"4. 编辑员工","slug":"_4-编辑员工","link":"#_4-编辑员工","children":[{"level":4,"title":"产品原型","slug":"产品原型-1","link":"#产品原型-1","children":[]},{"level":4,"title":"接口设计","slug":"接口设计-1","link":"#接口设计-1","children":[]},{"level":4,"title":"代码开发","slug":"代码开发-1","link":"#代码开发-1","children":[{"level":5,"title":"1. 信息回显","slug":"_1-信息回显","link":"#_1-信息回显","children":[]},{"level":5,"title":"2. 信息修改","slug":"_2-信息修改","link":"#_2-信息修改","children":[]}]}]},{"level":3,"title":"5. 分类模块功能代码 (与员工管理模块类似)","slug":"_5-分类模块功能代码-与员工管理模块类似","link":"#_5-分类模块功能代码-与员工管理模块类似","children":[{"level":4,"title":"产品原型","slug":"产品原型-2","link":"#产品原型-2","children":[]},{"level":4,"title":"相关接口","slug":"相关接口","link":"#相关接口","children":[]},{"level":4,"title":"数据表设计 category表","slug":"数据表设计-category表","link":"#数据表设计-category表","children":[]}]}]}],"git":{"createdTime":1760889649000,"updatedTime":1760889649000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":5.18,"words":1553},"filePathRelative":"code/java_item/1-苍穹外卖/article4.md","localizedDate":"2025年10月18日","excerpt":"<h2>苍穹外卖</h2>\\n<h3>实现功能</h3>\\n<ul>\\n<li>新增员工</li>\\n<li>员工分页查询</li>\\n<li>启用禁用员工账号</li>\\n<li>编辑员工</li>\\n<li>导入分类模块功能代码</li>\\n</ul>\\n<h3>3. 启用禁用员工账号 <code>/admin/employee/status/{status}</code></h3>\\n<h4>产品原型</h4>\\n<figure><figcaption>alt text</figcaption></figure>\\n<p><strong>业务规则：</strong></p>\\n<ul>\\n<li>可以对状态为“启用” 的员工账号进行“禁用”操作</li>\\n<li>可以对状态为“禁用”的员工账号进行“启用”操作</li>\\n<li>状态为“禁用”的员工账号不能登录系统</li>\\n</ul>","autoDesc":true}')}}]);