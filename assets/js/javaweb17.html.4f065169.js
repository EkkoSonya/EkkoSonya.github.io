"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[1948],{3671:(a,n)=>{n.A=(a,n)=>{const s=a.__vccOpts||a;for(const[a,t]of n)s[a]=t;return s}},9392:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>i,data:()=>l});var t=s(7847);const e=s.p+"assets/img/20.00c43c5a.png",p=s.p+"assets/img/21.8ca91a76.png",o=[(0,t.Fv)('<h2 id="mybatis详解5" tabindex="-1"><a class="header-anchor" href="#mybatis详解5"><span>Mybatis详解5</span></a></h2><h3 id="动态sql" tabindex="-1"><a class="header-anchor" href="#动态sql"><span>动态SQL</span></a></h3><h4 id="批处理-executortype-batch" tabindex="-1"><a class="header-anchor" href="#批处理-executortype-batch"><span>批处理 <code>ExecutorType.BATCH</code></span></a></h4><p>在之前JDBC讲解的时候，我们就提到过批量执行语句的问题，当我们要执行很多条语句时，可能会一个一个地提交：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//现在要求把下面所有用户都插入到数据库中</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;小刚&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小强&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小王&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小美&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小黑子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//使用for循环来一个一个执行insert语句</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">&quot;insert into user (name, age) values (&#39;&quot;</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">&quot;&#39;, 18)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这样看似非常完美，也符合逻辑，但是实际上我们每次执行<code>SQL</code>语句，都像是去厨房端菜到客人桌上一样，我们每次上菜的时候只从厨房端一个菜，效率非常低</p><p>但是如果我们每次上菜推一个小推车装满N个菜一起上，效率就会提升很多，而数据库也是这样，我们每一次执行SQL语句，都需要一定的时间开销</p><p>但是如果我把这些任务合在一起告诉数据库，效率会截然不同：</p><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>可见，使用循环操作执行数据库相关操作实际上非常耗费资源，不仅带来网络上的额外开销，还有数据库的额外开销</p><p>更推荐使用<strong>批处理</strong>来优化这种情况，一次性提交一个批量操作给数据库。</p><p>需要在<code>Mybatis</code>中开启批处理，我们只需要在创建<code>SqlSession</code>时进行一些配置即可：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">BATCH</span><span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在使用<code>openSession</code>时直接配置<code>ExecutorType</code>为BATCH即可，这样SqlSession会开启批处理模式，在多次处理相同SQL时会尽可能转换为一次执行，开启批处理后，无论是否处于事务模式下，我们都需要<code>flushStatements()</code>来一次性提交之前是所有批处理操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TestMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    mapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nsession<span class="token punctuation">.</span><span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时日志中可以看到Mybatis在尽可能优化我们的SQL操作：</p><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="动态sql介绍" tabindex="-1"><a class="header-anchor" href="#动态sql介绍"><span>动态SQL介绍</span></a></h4>',18)],c={},i=(0,s(3671).A)(c,[["render",function(a,n){return(0,t.uX)(),(0,t.CE)("div",null,o)}]]),l=JSON.parse('{"path":"/code/javaweb/javaweb17.html","title":"javaweb - Mybatis7","lang":"zh-CN","frontmatter":{"title":"javaweb - Mybatis7","date":"2025-06-16T00:00:00.000Z","category":["code"],"tag":["javaweb","mybatis"],"order":-0.7482,"description":"Mybatis详解5 动态SQL 批处理 ExecutorType.BATCH 在之前JDBC讲解的时候，我们就提到过批量执行语句的问题，当我们要执行很多条语句时，可能会一个一个地提交： 虽然这样看似非常完美，也符合逻辑，但是实际上我们每次执行SQL语句，都像是去厨房端菜到客人桌上一样，我们每次上菜的时候只从厨房端一个菜，效率非常低 但是如果我们每次上...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/javaweb17.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - Mybatis7"}],["meta",{"property":"og:description","content":"Mybatis详解5 动态SQL 批处理 ExecutorType.BATCH 在之前JDBC讲解的时候，我们就提到过批量执行语句的问题，当我们要执行很多条语句时，可能会一个一个地提交： 虽然这样看似非常完美，也符合逻辑，但是实际上我们每次执行SQL语句，都像是去厨房端菜到客人桌上一样，我们每次上菜的时候只从厨房端一个菜，效率非常低 但是如果我们每次上..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-15T11:52:02.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"mybatis"}],["meta",{"property":"article:published_time","content":"2025-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-15T11:52:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - Mybatis7\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-15T11:52:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"Mybatis详解5","slug":"mybatis详解5","link":"#mybatis详解5","children":[{"level":3,"title":"动态SQL","slug":"动态sql","link":"#动态sql","children":[{"level":4,"title":"批处理 ExecutorType.BATCH","slug":"批处理-executortype-batch","link":"#批处理-executortype-batch","children":[]},{"level":4,"title":"动态SQL介绍","slug":"动态sql介绍","link":"#动态sql介绍","children":[]}]}]}],"git":{"createdTime":1749988322000,"updatedTime":1749988322000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":1.78,"words":534},"filePathRelative":"code/javaweb/javaweb17.md","localizedDate":"2025年6月16日","excerpt":"<h2>Mybatis详解5</h2>\\n<h3>动态SQL</h3>\\n<h4>批处理 <code>ExecutorType.BATCH</code></h4>\\n<p>在之前JDBC讲解的时候，我们就提到过批量执行语句的问题，当我们要执行很多条语句时，可能会一个一个地提交：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">//现在要求把下面所有用户都插入到数据库中</span>\\n<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> users <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">List</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">of</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"小刚\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"小强\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"小王\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"小美\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"小黑子\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//使用for循环来一个一个执行insert语句</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> user <span class=\\"token operator\\">:</span> users<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    statement<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">executeUpdate</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"insert into user (name, age) values (\'\\"</span> <span class=\\"token operator\\">+</span> user <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"\', 18)\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);