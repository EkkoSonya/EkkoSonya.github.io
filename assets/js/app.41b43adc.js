"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[3524],{2798:(s,a,n)=>{n.d(a,{l:()=>t});const t={category:{"/":{path:"/category/",map:{daily:{path:"/category/daily/",indexes:[0]},academic:{path:"/category/academic/",indexes:[1,2,3,4,5,6,7,8,9,10,11]},code:{path:"/category/code/",indexes:[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116]}}}},tag:{"/":{path:"/tag/",map:{d1:{path:"/tag/d1/",indexes:[0]},UAV:{path:"/tag/uav/",indexes:[11]},"IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY":{path:"/tag/ieee-transactions-on-vehicular-technology/",indexes:[11]},强化学习:{path:"/tag/强化学习/",indexes:[1,2,3,4,5,6,7,8,9,10]},java:{path:"/tag/java/",indexes:[89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116]},java新特性:{path:"/tag/java新特性/",indexes:[41,42,43,44,45,46]},"java hint":{path:"/tag/java-hint/",indexes:[27,71,72]},javassm:{path:"/tag/javassm/",indexes:[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40]},Spring:{path:"/tag/spring/",indexes:[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40]},javaweb:{path:"/tag/javaweb/",indexes:[47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88]},mysql:{path:"/tag/mysql/",indexes:[79,80,82,83,84,85,86]},Lombok:{path:"/tag/lombok/",indexes:[81]},mybatis:{path:"/tag/mybatis/",indexes:[68,69,70,73,74,75,76,77,78]},JUL:{path:"/tag/jul/",indexes:[59,60,61,63,64,65,66,67]},Maven:{path:"/tag/maven/",indexes:[55,56,57,58,62]},SpringEL:{path:"/tag/springel/",indexes:[28,29,30,31,32,33,34]}}}}}},8589:(s,a,n)=>{n.d(a,{M:()=>t});const t=["/daily/d1.html","/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%2010.html","/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%209.html","/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%208.html","/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%207.html","/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%206.html","/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%205.html","/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%204.html","/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%203.html","/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%202.html","/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%201.html","/academic/UAV/Reinforcement-Learning-in-Multiple-UAV-Networks_Deployment-and-Movement-Design.html","/code/java_ssm/SpringSecurity/ss4.html","/code/java_ssm/SpringSecurity/ss2.html","/code/java_ssm/SpringSecurity/ss3.html","/code/java_ssm/SpringSecurity/ss1.html","/code/java_ssm/SpringMvc/mvc5.html","/code/java_ssm/SpringMvc/mvc6.html","/code/java_ssm/SpringMvc/mvc7.html","/code/java_ssm/SpringMvc/mvc4.html","/code/java_ssm/SpringMvc/mvc2.html","/code/java_ssm/SpringMvc/mvc3.html","/code/java_ssm/SpringMvc/mvc1.html","/code/java_ssm/Spring/6-%E5%8E%9F%E7%90%86/spring14.html","/code/java_ssm/Spring/6-%E5%8E%9F%E7%90%86/spring13.html","/code/java_ssm/Spring/6-%E5%8E%9F%E7%90%86/spring12.html","/code/java_ssm/Spring/6-%E5%8E%9F%E7%90%86/spring11.html","/code/java_hint/hint3.html","/code/java_ssm/Spring/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/spring11.html","/code/java_ssm/Spring/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/spring12.html","/code/java_ssm/Spring/5-JUnit%E6%95%B4%E5%90%88/spring10.html","/code/java_ssm/Spring/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/spring10.html","/code/java_ssm/Spring/3-AOP/spring8.html","/code/java_ssm/Spring/3-AOP/spring9.html","/code/java_ssm/Spring/3-AOP/spring7.html","/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring4.html","/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring5.html","/code/java_ssm/Spring/2-Spring%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/spring6.html","/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring3.html","/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring1.html","/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring2.html","/code/java%209-17/javainfo6.html","/code/java%209-17/javainfo5.html","/code/java%209-17/javainfo.html","/code/java%209-17/javainfo2.html","/code/java%209-17/javainfo3.html","/code/java%209-17/javainfo4.html","/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo6.html","/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo7.html","/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo8.html","/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo4.html","/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo5.html","/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo.html","/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo2.html","/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo3.html","/code/javaweb/7-Maven/maven2.html","/code/javaweb/7-Maven/maven3.html","/code/javaweb/7-Maven/maven4.html","/code/javaweb/7-Maven/maven5.html","/code/javaweb/6-JUnit/javaweb25.html","/code/javaweb/6-JUnit/javaweb26.html","/code/javaweb/6-JUnit/javaweb27.html","/code/javaweb/7-Maven/maven1.html","/code/javaweb/5-JUL/javaweb21.html","/code/javaweb/5-JUL/javaweb22.html","/code/javaweb/5-JUL/javaweb23.html","/code/javaweb/5-JUL/javaweb24.html","/code/javaweb/5-JUL/javaweb20.html","/code/javaweb/4-Mybatis/javaweb17.html","/code/javaweb/4-Mybatis/javaweb18.html","/code/javaweb/4-Mybatis/javaweb19.html","/code/java_hint/hint1.html","/code/java_hint/hint2.html","/code/javaweb/4-Mybatis/javaweb15.html","/code/javaweb/4-Mybatis/javaweb16.html","/code/javaweb/4-Mybatis/javaweb12.html","/code/javaweb/4-Mybatis/javaweb13.html","/code/javaweb/4-Mybatis/javaweb14.html","/code/javaweb/4-Mybatis/javaweb11.html","/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb8.html","/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb9.html","/code/javaweb/3-Lombok/javaweb10.html","/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb7.html","/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb3.html","/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb4.html","/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb5.html","/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb6.html","/code/javaweb/1-Socket/javaweb2.html","/code/javaweb/1-Socket/javaweb1.html","/code/java/java%2027.html","/code/java/java%2028.html","/code/java/java%2023.html","/code/java/java%2024.html","/code/java/java%2025.html","/code/java/java%2026.html","/code/java/java%2021.html","/code/java/java%2022.html","/code/java/java%2019.html","/code/java/java%2020.html","/code/java/java%2018.html","/code/java/java%2014.html","/code/java/java%2015.html","/code/java/java%2016.html","/code/java/java%2017.html","/code/java/java%2012.html","/code/java/java%2013.html","/code/java/java%2011.html","/code/java/java%2010.html","/code/java/java%209.html","/code/java/java%208.html","/code/java/java%207.html","/code/java/java%206.html","/code/java/java%205.html","/code/java/java%204.html","/code/java/java%203.html","/code/java/java%201.html","/code/java/java%202.html"]},594:(s,a,n)=>{n.d(a,{U:()=>t});const t={article:{"/":{path:"/article/",indexes:[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,1,2,3,4,115,116,5,6,7,8,9,10,11,0]}},star:{"/":{path:"/star/",indexes:[]}},timeline:{"/":{path:"/timeline/",indexes:[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,1,2,3,4,115,116,5,6,7,8,9,10,11,0]}}}},3130:(s,a,n)=>{n.d(a,{B:()=>B});var t=n(3151),p=n(8981),e=n(5670),o=n(4722),c=n(2831),l=n(255),i=n(8939);const m=(0,t.re)({enhance:({app:s})=>{(0,p.L4)("FontIcon")||s.component("FontIcon",o.A),(0,p.L4)("Badge")||s.component("Badge",c.A),(0,p.L4)("BiliBili")||s.component("BiliBili",l.A),(0,p.L4)("VidStack")||s.component("VidStack",i.A)},setup:()=>{(0,e.vCw)('  @import url("https://at.alicdn.com/t/c/font_2410206_5vb9zlyghj.css");\n  ')},rootComponents:[]});var r=n(4102),u=n(337),k=n(5212),d=n(9090),g=n(4654),h=n(9350),v=n(1735),y=n(7994),w=n(3418);const b=(0,t.re)({enhance:({app:s})=>{},setup:()=>{(0,w.n)()}});var j=n(2457),f=n(4810),S=n(2462),x=n(4232),E=n(7847),A=n(9837);(0,x.M_)((s=>{const a=s.t,n=!1!==s.I,t=s.i;return n?{title:a,content:t?()=>[(0,E.h)(S.GB,{icon:t}),a]:null,order:s.O,index:s.I}:null}));const M=(0,t.re)({enhance:({app:s,router:a})=>{const{scrollBehavior:n}=a.options;a.options.scrollBehavior=async(...s)=>(await(0,S.MK)().wait(),n(...s)),(0,S.fk)(s),s.component("HopeIcon",S.GB),s.component("BloggerInfo",A.tI)},setup:()=>{(0,S.PV)(),(0,S.i$)(),(0,A.su)()},layouts:{Layout:S.PE,NotFound:S.Mk,BlogCategory:A.Pn,BlogHome:A.qX,BlogType:A.z7,Timeline:A.Kf}}),B=[{},m,r.A,u.A,k.A,d.A,g.A,h.A,v.A,y.A,b,j.A,f.A,M]},6159:(s,a,n)=>{n.d(a,{J:()=>p,c:()=>t});const t=JSON.parse("{}"),p=Object.fromEntries([["/",{loader:()=>n.e(4470).then(n.bind(n,6128)),meta:{y:"h",t:"",i:"home"}}],["/intro.html",{loader:()=>n.e(3912).then(n.bind(n,2834)),meta:{y:"p",t:"个人介绍",i:"any"}}],["/daily/d1.html",{loader:()=>n.e(6007).then(n.bind(n,9256)),meta:{d:171288e7,l:"2024年4月12日",c:["daily"],g:["d1"],e:'<p><span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a+b=c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></p>',r:{minutes:.05,words:15},y:"a",t:"daily1",O:-.5}}],["/academic/UAV/Reinforcement-Learning-in-Multiple-UAV-Networks_Deployment-and-Movement-Design.html",{loader:()=>n.e(4261).then(n.bind(n,804)),meta:{d:17129664e5,l:"2024年4月13日",c:["academic"],g:["UAV","IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY"],e:"<p>2019 IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY</p>\n<h2>主要动机</h2>\n<ul>\n<li>A novel framework is proposed for quality of experience driven deployment and dynamic movement of multiple unmanned aerial vehicles (UAVs).</li>\n<li>过去研究大多没有基于用户的移动(movement of users)来考虑无人机的机动性，更多地是考虑多架无人机的二维部署或单架无人机在地面用户保持静止情况下的部署。</li>\n<li>考虑QoE, 而不是仅考虑吞吐量(throughput)，即需要考虑地面不同用户的具体需求。(QoE is invoked for demonstrating the users’ satisfaction, and it is supposed to be considered in UAV-assisted wireless networks)</li>\n<li>该文设计的是3D部署，过去研究主要考虑的是2D部署。</li>\n</ul>",r:{minutes:12.1,words:3630},y:"a",t:"Reinforcement Learning in Multiple-UAV Networks:Deployment and Movement Design",O:-.5}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%201.html",{loader:()=>n.e(44).then(n.bind(n,783)),meta:{d:17229024e5,l:"2024年8月6日",c:["academic"],g:["强化学习"],e:'<h2>强化学习框架图</h2>\n<figure><img src="http://myimg.ekkosonya.cn/20240807111059.png" alt="主要框架" tabindex="0" loading="lazy"><figcaption>主要框架</figcaption></figure>\n<h2>1. 基本概念</h2>\n<ul>\n<li>\n<p><strong>State(状态)</strong>：The status of the agent with respect to the environment.</p>\n</li>\n<li>\n<p><strong>State Space(状态空间)</strong>: 所有状态的集合。<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>s</mi><mi>i</mi></msub><msubsup><mo stretchy="false">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">S=\\{s_i\\}_{i=1}^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0087em;vertical-align:-0.2587em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span>。</p>\n</li>\n<li>\n<p><strong>Action(动作)</strong>: 对于每一个状态，都有可选择的动作。</p>\n</li>\n<li>\n<p><strong>Action space of a state</strong>: 对应状态中所有可选择的动作集合。<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><msub><mi>a</mi><mi>i</mi></msub><msubsup><mo stretchy="false">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">A(s_i)=\\{a_i\\}_{i=1}^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0087em;vertical-align:-0.2587em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p><strong>State transition(状态转换)</strong>: <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mo><mover><mo><mo>→</mo></mo><msub><mi>a</mi><mn>1</mn></msub></mover></mo><msub><mi>s</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">s_1\\overset{a_1}{\\rightarrow} s_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1294em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">→</span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。定义了agent与环境的交互行为。</p>\n</li>\n<li>\n<p><strong>State transition probability</strong>: <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(s_2|s_1,a_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，即状态<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">s_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>采用动作<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>转到状态<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">s_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的概率。</p>\n</li>\n<li>\n<p><strong>Policy <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span></strong>: 指导agent在当前状态下选择哪个动作。</p>\n</li>\n<li>\n<p><strong>Reward(奖励)</strong>: 在执行一个动作后获得的一个常数(依赖于当前状态和所采取的动作)。同样可以用条件概率的形式进行描述，如<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>r</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">∣</mi><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(r=1|s_1,a_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1∣</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，即在状态<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">s_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>下采用动作<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>获得的奖励<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">r=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>的概率。</p>\n</li>\n<li>\n<p><strong>Trajectory</strong>：a state-action-reward chain.(可以有限，也可以是无限长的trajectory)\n<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mi><mover><mo><mo><munder><mo><mo>→</mo></mo><mrow><mi>r</mi><mo>=</mo><mn>0</mn></mrow></munder></mo></mo><msub><mi>a</mi><mn>2</mn></msub></mover></mi><msub><mi>s</mi><mn>2</mn></msub><mi><mover><mo><mo><munder><mo><mo>→</mo></mo><mrow><mi>r</mi><mo>=</mo><mn>0</mn></mrow></munder></mo></mo><msub><mi>a</mi><mn>2</mn></msub></mover></mi><msub><mi>s</mi><mn>5</mn></msub><mi><mover><mo><mo><munder><mo><mo>→</mo></mo><mrow><mi>r</mi><mo>=</mo><mn>0</mn></mrow></munder></mo></mo><msub><mi>a</mi><mn>2</mn></msub></mover></mi><msub><mi>s</mi><mn>8</mn></msub><mi><mover><mo><mo><munder><mo><mo>→</mo></mo><mrow><mi>r</mi><mo>=</mo><mn>1</mn></mrow></munder></mo></mo><msub><mi>a</mi><mn>2</mn></msub></mover></mi><msub><mi>s</mi><mn>9</mn></msub></mrow><annotation encoding="application/x-tex">s_1\\overset{a_2}{\\underset{r=0}{\\rightarrow}}s_2\\overset{a_2}{\\underset{r=0}{\\rightarrow}}s_5\\overset{a_2}{\\underset{r=0}{\\rightarrow}}s_8\\overset{a_2}{\\underset{r=1}{\\rightarrow}}s_9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6965em;vertical-align:-0.7171em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3669em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">→</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3669em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">→</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3669em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">→</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3669em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">→</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.<br>\n个人理解，trajectory是在策略给定下，agent可能走出的全部轨迹，并非只是一个单一的轨迹。</p>\n</li>\n<li>\n<p><strong>Return of a trajectory</strong>：将对应的轨迹所获得的所有reward的总和，可以粗步衡量一个策略的好坏。</p>\n</li>\n<li>\n<p><strong>Discounted return(of a trajectory)</strong>：为了应对具有无限步的trajectory的<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">return=\\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal">t</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span>的情况。\n<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mi><mover><mo><mo><munder><mo><mo>→</mo></mo><mrow><mi>r</mi><mo>=</mo><mn>0</mn></mrow></munder></mo></mo><msub><mi>a</mi><mn>2</mn></msub></mover></mi><msub><mi>s</mi><mn>2</mn></msub><mi><mover><mo><mo><munder><mo><mo>→</mo></mo><mrow><mi>r</mi><mo>=</mo><mn>0</mn></mrow></munder></mo></mo><msub><mi>a</mi><mn>2</mn></msub></mover></mi><msub><mi>s</mi><mn>5</mn></msub><mi><mover><mo><mo><munder><mo><mo>→</mo></mo><mrow><mi>r</mi><mo>=</mo><mn>0</mn></mrow></munder></mo></mo><msub><mi>a</mi><mn>2</mn></msub></mover></mi><msub><mi>s</mi><mn>8</mn></msub><mi><mover><mo><mo><munder><mo><mo>→</mo></mo><mrow><mi>r</mi><mo>=</mo><mn>1</mn></mrow></munder></mo></mo><msub><mi>a</mi><mn>2</mn></msub></mover></mi><msub><mi>s</mi><mn>9</mn></msub><mstyle mathcolor="blue"><mrow><mi><mover><mo><mo><munder><mo><mo>→</mo></mo><mrow><mi>r</mi><mo>=</mo><mn>1</mn></mrow></munder></mo></mo><msub><mi>a</mi><mn>2</mn></msub></mover></mi><msub><mi>s</mi><mn>9</mn></msub><mi><mover><mo><mo><munder><mo><mo>→</mo></mo><mrow><mi>r</mi><mo>=</mo><mn>1</mn></mrow></munder></mo></mo><msub><mi>a</mi><mn>2</mn></msub></mover></mi><msub><mi>s</mi><mn>9</mn></msub><mo>…</mo></mrow></mstyle></mrow><annotation encoding="application/x-tex">s_1\\overset{a_2}{\\underset{r=0}{\\rightarrow}}s_2\\overset{a_2}{\\underset{r=0}{\\rightarrow}}s_5\\overset{a_2}{\\underset{r=0}{\\rightarrow}}s_8\\overset{a_2}{\\underset{r=1}{\\rightarrow}}s_9\\color{blue}{\\overset{a_2}{\\underset{r=1}{\\rightarrow}}s_9\\overset{a_2}{\\underset{r=1}{\\rightarrow}}s_9\\dots}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6965em;vertical-align:-0.7171em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3669em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">→</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3669em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">→</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3669em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">→</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3669em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">→</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord" style="color:blue;"><span class="mord" style="color:blue;"><span class="mop op-limits" style="color:blue;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop" style="color:blue;"><span class="mrel" style="color:blue;"><span class="mop op-limits" style="color:blue;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3669em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.02778em;color:blue;">r</span><span class="mrel mtight" style="color:blue;">=</span><span class="mord mtight" style="color:blue;">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop" style="color:blue;">→</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;"><span class="mord mtight" style="color:blue;"><span class="mord mathnormal mtight" style="color:blue;">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span><span class="mord" style="color:blue;"><span class="mord mathnormal" style="color:blue;">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord" style="color:blue;"><span class="mop op-limits" style="color:blue;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9794em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop" style="color:blue;"><span class="mrel" style="color:blue;"><span class="mop op-limits" style="color:blue;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3669em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;"><span class="mord mathnormal mtight" style="margin-right:0.02778em;color:blue;">r</span><span class="mrel mtight" style="color:blue;">=</span><span class="mord mtight" style="color:blue;">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop" style="color:blue;">→</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.578em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;"><span class="mord mtight" style="color:blue;"><span class="mord mathnormal mtight" style="color:blue;">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span></span><span class="mord" style="color:blue;"><span class="mord mathnormal" style="color:blue;">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:blue;"><span class="mord mtight" style="color:blue;">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="color:blue;margin-right:0.1667em;"></span><span class="minner" style="color:blue;">…</span></span></span></span></span>. 此时该trajectory的<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mo>=</mo><mn>0</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo>+</mo><mo>⋯</mo><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">return=0+0+0+1+1+\\dots=\\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal">t</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span>。\n引入<strong>discount rate</strong>, <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\gamma\\in[0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>.\n此时对应的<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>d</mi><mtext>&nbsp;</mtext><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>=</mo><mn>0</mn><mo>+</mo><mi>γ</mi><mn>0</mn><mo>+</mo><msup><mi>γ</mi><mn>2</mn></msup><mn>0</mn><mo>+</mo><msup><mi>γ</mi><mn>3</mn></msup><mn>1</mn><mo>+</mo><msup><mi>γ</mi><mn>4</mn></msup><mn>1</mn><mo>+</mo><mo>⋯</mo><mo>=</mo><msup><mi>γ</mi><mn>3</mn></msup><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>γ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">discounted\\space rate=0+\\gamma 0+\\gamma^2 0+\\gamma^3 1+\\gamma^4 1+\\dots=\\gamma^3 \\frac{1}{1-\\gamma}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">sco</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mspace">&nbsp;</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3262em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05556em;">γ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>\n显然，如果<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span>接近0，即此时的discounted return越短视，注重近期的reward；<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span>接近1，更远视，更注重长远的reward。</p>\n</li>\n<li>\n<p><strong>Episode(trial)</strong>：When interacting with the environment following a policy, the agent may stop at <strong>some terminal states</strong>. The resulting trajectory is called an episode(or a trial)/\n即表示具有终止状态<strong>terminal states</strong>的trajectory，通常是具有有限步长的trajectory.\n同理，这样的任务称为<strong>episodic tasks</strong>。</p>\n</li>\n<li>\n<p><strong>continuing tasks</strong>：即不具备terminal states的任务，会与环境一直交互下去。\n可以通过设置将episodic tasks转换成continuing tasks，如可以在target states中限制action space，控制其一直待在target states中。\nDeterministic — Stochastic</p>\n</li>\n</ul>',r:{minutes:2.8,words:841},y:"a",t:"RL1 - 基本概念",O:-.5}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%2010.html",{loader:()=>n.e(1690).then(n.bind(n,8499)),meta:{d:17246304e5,l:"2024年8月26日",c:["academic"],g:["强化学习"],e:'<ul>\n<li>actor: 对应 policy update</li>\n<li>critic: 对应 policy evaluation 或者 value evaluation</li>\n</ul>\n<figure><img src="http://myimg.ekkosonya.cn/20240830184236.png" alt="20240830184236" tabindex="0" loading="lazy"><figcaption>20240830184236</figcaption></figure>\n<p>显然，是在基于 策略梯度上升 算法的基础上，将对于 Q 值的估计通过一个网络来进行描述，这个便成为 critic, 而对应的策略梯度上升算法就是对应 actor。</p>',r:{minutes:1.41,words:424},y:"a",t:"RL10 - Actor-Critic 方法",O:-.5}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%202.html",{loader:()=>n.e(7777).then(n.bind(n,7958)),meta:{d:17229888e5,l:"2024年8月7日",c:["academic"],g:["强化学习"],e:'<h2>核心内容</h2>\n<ul>\n<li>state value</li>\n<li>the Bellman equation</li>\n</ul>\n<h2>1.State value</h2>\n<h3>1.1 <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">G_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></h3>',r:{minutes:5.33,words:1600},y:"a",t:"RL2 - 贝尔曼公式",O:-.5}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%203.html",{loader:()=>n.e(1994).then(n.bind(n,3507)),meta:{d:17230752e5,l:"2024年8月8日",c:["academic"],g:["强化学习"],e:'<ul>\n<li>Core concepts: optimal state value and optimal policy</li>\n<li>A fundamental tool: the Bellman optimality equation (BOE)</li>\n</ul>\n<h2>1. Optimal policy</h2>\n<p>最优策略的定义:<br>\nA policy <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>π</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">\\pi^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6887em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span> is optimal if <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>π</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>≥</mo><msub><mi>v</mi><mi>π</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\pi^*(s)\\ge v_\\pi(s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span> for all s and for any other policy <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span>.<br>\n需要确定几件事:</p>',r:{minutes:2.08,words:624},y:"a",t:"RL3 - 贝尔曼最优公式",O:-.5}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%204.html",{loader:()=>n.e(855).then(n.bind(n,3722)),meta:{d:17231616e5,l:"2024年8月9日",c:["academic"],g:["强化学习"],e:'<p>贝尔曼最优公式:</p>\n<p v-pre="" class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mrow><mi>max</mi><mo>⁡</mo></mrow><mi>π</mi></munder><mo stretchy="false">(</mo><msub><mi>r</mi><mi>π</mi></msub><mo>+</mo><mi>γ</mi><msub><mi>P</mi><mi>π</mi></msub><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\nv=f(v)=\\max_{\\pi}(r_\\pi+\\gamma P_\\pi v)\n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.45em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></span></p>',r:{minutes:4.66,words:1397},y:"a",t:"RL4 - 值迭代和策略迭代(动态规划)",O:-.5}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%205.html",{loader:()=>n.e(1408).then(n.bind(n,3484)),meta:{d:17233344e5,l:"2024年8月11日",c:["academic"],g:["强化学习"],e:'<ul>\n<li>\n<p>如何在没有模型 (即<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>r</mi><mi mathvariant="normal">∣</mi><mi>s</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi><mi>s</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(r|s,a),p(s\'|s,a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span>等均未知) 的情况下进行估计\n通过 Monte Carlo estimation.<br>\n其核心思想是：<br>\n若有一系列(<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi mathvariant="normal">.</mi><mi>i</mi><mi mathvariant="normal">.</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">i.i.d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">i</span><span class="mord">.</span><span class="mord mathnormal">i</span><span class="mord">.</span><span class="mord mathnormal">d</span></span></span></span>)样本采样，得到一个样本序列<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">{x_1,x_2,\\dots,x_N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><br>\n那么对于随机变量<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>的估计可以为：</p>\n<p v-pre="" class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo>≈</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\nE[x]\\approx \\bar{x} = \\frac{1}{N}\\sum_{j=1}^Nx_j\n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5678em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2421em;vertical-align:-1.4138em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>该方法成立的数学依据是 <strong>大数定理 (Law of Large Numbers)</strong><br>\n<img src="http://myimg.ekkosonya.cn/20240811225952.png" alt="20240811225952" loading="lazy"><br>\n<strong>样本必须是独立同分布(iid, independent and identically distributed)</strong></p>\n</li>\n<li>\n<p>为什么考虑 mean estimation.\n因为无论是 state value 还是 action value 其原始定义都是从<strong>期望</strong>出发的。</p>\n<p v-pre="" class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>v</mi><mi>π</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><msub><mi>G</mi><mi>t</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>S</mi><mi>t</mi></msub><mo>=</mo><mi>s</mi><mo stretchy="false">]</mo><mo separator="true">;</mo><mspace width="1em"></mspace><msub><mi>q</mi><mi>π</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><msub><mi>G</mi><mi>t</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>S</mi><mi>t</mi></msub><mo>=</mo><mi>s</mi><mo separator="true">,</mo><msub><mi>A</mi><mi>t</mi></msub><mo>=</mo><mi>a</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\n  v_\\pi(s)=E[G_t|S_t=s]; \\quad\n  q_\\pi(s,a)=E[G_t|S_t=s,A_t=a]\n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mclose">]</span><span class="mpunct">;</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mclose">]</span></span></span></span></span></p>\n</li>\n</ul>',r:{minutes:5.94,words:1781},y:"a",t:"RL5 - 蒙特卡洛方法 (Monte Carlo) model-free",O:-.5}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%206.html",{loader:()=>n.e(3173).then(n.bind(n,2553)),meta:{d:17235072e5,l:"2024年8月13日",c:["academic"],g:["强化学习"],e:"<ul>\n<li>\n<p>针对 mean estimation 问题进行研究，因为在 RL 中 无论是 state value 还是 action value 其定义都是一个均值 (means)</p>\n</li>\n<li>\n<p>Stochastic approximation(SA): SA refers to a broad class of <strong>stochastic iterative</strong> algorithms <strong>soloving root finding</strong> or <strong>optimization problems</strong>.</p>\n</li>\n</ul>",r:{minutes:5.16,words:1548},y:"a",t:"RL6 - 随机近似理论与随机梯度下降算法",O:-.5}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%207.html",{loader:()=>n.e(9774).then(n.bind(n,2801)),meta:{d:172368e7,l:"2024年8月15日",c:["academic"],g:["强化学习"],e:'<h2>1. 引入</h2>\n<p>考虑一个复杂的均值估计问题: 计算</p>\n<p v-pre="" class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>ω</mi><mo>=</mo><mi mathvariant="double-struck">E</mi><mo stretchy="false">[</mo><mi>R</mi><mo>+</mo><mi>γ</mi><mi>v</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">\n\\omega = \\mathbb{E}[R+\\gamma v(X)],\n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbb">E</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)]</span><span class="mpunct">,</span></span></span></span></span></p>',r:{minutes:3.81,words:1143},y:"a",t:"RL7 - Temporal-Difference Learning",O:-.5}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%208.html",{loader:()=>n.e(2219).then(n.bind(n,8263)),meta:{d:1724112e6,l:"2024年8月20日",c:["academic"],g:["强化学习"],e:'<p>对于 q-value 的估计从 基于表格的 (tabular representation) 转换到 基于函数的 (function representation)</p>\n<h2>1. 引入</h2>\n<ul>\n<li>通过使用一个函数来进行拟合 state values 或者 action values: <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>v</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo><mo>≈</mo><msub><mi>v</mi><mi>π</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\hat{v}(s,w)\\approx v_\\pi(s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span>， 其中<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">w\\in \\mathbb{R}^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span></span></span>是参数向量。</li>\n<li>可以提高存储效率</li>\n<li>提高泛化能力</li>\n</ul>',r:{minutes:5.51,words:1653},y:"a",t:"RL8 - 值函数近似(Value Function Approximation)",O:-.5}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/chapter%209.html",{loader:()=>n.e(6516).then(n.bind(n,9662)),meta:{d:17246304e5,l:"2024年8月26日",c:["academic"],g:["强化学习"],e:'<ul>\n<li>之前介绍的方法都是 value-based 的方法，从这章开始时基于 policy-based 的方法。</li>\n<li>policy function approximation 是直接建立一个基于策略的目标函数来进行梯度上升的优化。</li>\n</ul>\n<h2>1. 基本思路</h2>\n<p>将基于<strong>表格</strong>表示的策略 转换为 基于<strong>函数</strong>表示的策略。<br>\n即此时策略 <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span> 可以描述为：</p>',r:{minutes:4.28,words:1285},y:"a",t:"RL9 - 策略梯度法(Policy gradient)",O:-.5}}],["/code/java/java%201.html",{loader:()=>n.e(8235).then(n.bind(n,3413)),meta:{d:172368e7,l:"2024年8月15日",c:["code"],g:["java"],e:'<h2>类与对象</h2>\n<p><strong>类</strong>: 是对一类事物的描述，是抽象的、概念上的定义.<br>\n<strong>对象</strong>: 是某一类事物实际存在的每个个体，因而也被称为实例（instance）， 是类的一个具体化个体.</p>\n<p>类的创建:<br>\n类名的首字母通常是大写的.</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token comment">//这里定义的人类具有三个属性，名字、年龄、性别</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token comment">//直接在类中定义变量，表示类具有的属性</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:6.59,words:1978},y:"a",t:"Java - 类与对象1",O:-1}}],["/code/java/java%2010.html",{loader:()=>n.e(1199).then(n.bind(n,6971)),meta:{d:17308512e5,l:"2024年11月6日",c:["code"],g:["java"],e:'<h2>泛型 2</h2>\n<h3>泛型方法</h3>\n<p>当然，类型变量并不是只能在泛型类中才可以使用，我们也可以定义泛型方法。</p>\n<p>当某个方法（无论是静态方法还是成员方法）需要<strong>接受的参数类型并不确定</strong>时，我们也可以使用泛型来表示：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>   \n      <span class="token comment">//在返回值类型前添加&lt;&gt;并填写泛型变量表示这个是一个泛型方法</span>\n        <span class="token keyword">return</span> t<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:5.25,words:1574},y:"a",t:"Java - 泛型 2",O:-.91}}],["/code/java/java%2011.html",{loader:()=>n.e(8184).then(n.bind(n,2591)),meta:{d:17320608e5,l:"2024年11月20日",c:["code"],g:["java"],e:"<h2>集合类 1</h2>\n<h3>集合类</h3>\n<p>集合类是Java中非常重要的存在，使用频率极高。集合其实与我们数学中的集合是差不多的概念，集合表示一组对象，每一个对象我们都可以称其为元素。不同的集合有着不同的性质，比如一些集合允许重复的元素，而另一些则不允许，一些集合是有序的，而其他则是无序的。</p>\n<p>集合类其实就是为了更好地组织、管理和操作我们的数据而存在的，包括列表、集合、队列、映射等数据结构。</p>\n<h4>集合类与数组区别</h4>\n<p>集合跟数组一样，可以表示同样的一组元素，但是他们的相同和不同之处在于：</p>\n<p>相同之处：</p>\n<ul>\n<li>它们都是容器，都能够容纳一组元素。</li>\n</ul>",r:{minutes:11.52,words:3457},y:"a",t:"Java - 集合类 1",O:-.9}}],["/code/java/java%2012.html",{loader:()=>n.e(7021).then(n.bind(n,5791)),meta:{d:17325792e5,l:"2024年11月26日",c:["code"],g:["java"],e:'<h2>集合类 2</h2>\n<h3>迭代器</h3>\n<p>实际上我们的集合类都是支持使用<code>foreach</code>语法 (增强 for 语法) 的：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//集合类同样支持这种语法</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:5.1,words:1529},y:"a",t:"Java - 集合类 2",O:-.89}}],["/code/java/java%2013.html",{loader:()=>n.e(2278).then(n.bind(n,2445)),meta:{d:17325792e5,l:"2024年11月26日",c:["code"],g:["java"],e:'<h2>集合类 3</h2>\n<h3>Quene 和 Deque</h3>\n<p>其中 <code>LinkedList</code> 除了可以直接当做列表使用之外，还可以当做其他的数据结构使用，可以看到它不仅仅实现了List接口：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>\n    <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>\n    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span>\n</code></pre></div>',r:{minutes:6.5,words:1949},y:"a",t:"Java - 集合类 3",O:-.88}}],["/code/java/java%2014.html",{loader:()=>n.e(4587).then(n.bind(n,9085)),meta:{d:17329248e5,l:"2024年11月30日",c:["code"],g:["java"],e:"<h2>集合类 4</h2>\n<h3>Map</h3>\n<p>映射指两个元素的之间相互“对应”的关系，也就是说，我们的元素之间是两两对应的，是以键值对的形式存在。</p>\n<p><code>Map</code> 就是为了实现这种数据结构而存在的，我们通过保存键值对的形式来存储映射关系，就可以轻松地通过键找到对应的映射值</p>\n<p><code>Map</code> 并不是 <code>Collection</code> 体系下的接口，而是单独的一个体系，因为操作特殊</p>\n<h4>Map 基本定义</h4>\n<p>在 <code>Map</code> 中，这些映射关系被存储为键值对，<code>Map</code> 接口中定义的操作：</p>",r:{minutes:12.81,words:3843},y:"a",t:"Java - 集合类 4",O:-.88}}],["/code/java/java%2015.html",{loader:()=>n.e(1076).then(n.bind(n,5057)),meta:{d:17329248e5,l:"2024年11月30日",c:["code"],g:["java"],e:"<h2>Stream流</h2>\n<p>Java 8 API添加了一个新的抽象称为 <strong>流Stream</strong>，可以让你以一种声明的方式处理数据。</p>\n<p><code>Stream</code> 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。</p>\n<p>Stream API 可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p>\n<p>这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p>\n<p>元素流在管道中经过 <strong>中间操作</strong>（intermediate operation）的处理，最后由 <strong>最终操作</strong>(terminal operation)得到前面处理的结果。</p>",r:{minutes:3.53,words:1060},y:"a",t:"Java - Stream流",O:-.87}}],["/code/java/java%2016.html",{loader:()=>n.e(5977).then(n.bind(n,2709)),meta:{d:17329248e5,l:"2024年11月30日",c:["code"],g:["java"],e:'<h2>Collections 工具类</h2>\n<p>我们在前面介绍了Arrays，它是一个用于操作数组的工具类，它给我们提供了大量的工具方法。</p>\n<p>既然数组操作都这么方便了，集合操作能不能也安排点高级的玩法呢？那必须的，JDK为我们准备的 <code>Collocations</code> 类就是专用于集合的工具类</p>\n<h3>最大 | 最小</h3>\n<p>我们想快速求得List中的最大值和最小值：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.82,words:847},y:"a",t:"Java - Collections 工具类",O:-.86}}],["/code/java/java%2017.html",{loader:()=>n.e(3314).then(n.bind(n,7288)),meta:{d:17329248e5,l:"2024年11月30日",c:["code"],g:["java"],e:"<h2>集合类对象相等判定</h2>\n<p><code>Oject</code>类中的 <code>equals</code> 方法比较的是<strong>地址</strong>，所以自己定义的类要自己重写 <code>equals</code> 等方法，否则给你当成 <code>Object</code> 类</p>\n<p><code>equals</code> 方法 和 <code>==</code> 的区别</p>\n<p>集合类中并不是通过 <code>==</code> 进行判断的，都是根据 <code>equals</code> 方法进行判断的</p>\n<p><code>remove</code> 也是根据 <code>equals</code> 进行判断来删除元素</p>",r:{minutes:1.57,words:472},y:"a",t:"Java - 集合类对象相等判定",O:-.85}}],["/code/java/java%2018.html",{loader:()=>n.e(1847).then(n.bind(n,2349)),meta:{d:1737936e6,l:"2025年1月27日",c:["code"],g:["java"],e:"<h2>IO流1</h2>\n<p>一般在<code>java.io</code>中</p>\n<ul>\n<li>\n<p><strong>字节流</strong>：</p>\n<p>处理单位：以字节（8 位）为单位进行读写操作。</p>\n<p>适用场景：适用于处理所有类型的数据，包括文本、图片、音频、视频等二进制数据。</p>\n<p>主要类：InputStream 和 OutputStream 及其子类，如 FileInputStream 和 FileOutputStream。</p>\n<p>编码处理：不涉及字符编码转换，直接处理原始字节数据。</p>\n</li>\n<li>\n<p><strong>字符流</strong>：</p>\n<p>处理单位：以字符（16 位）为单位进行读写操作。</p>\n<p>适用场景：专门用于处理文本数据，如读取和写入文本文件。</p>\n<p>主要类：Reader 和 Writer 及其子类，如 FileReader 和 FileWriter。</p>\n<p>编码处理：自动处理字符编码转换，适用于处理文本文件。</p>\n</li>\n</ul>",r:{minutes:6.38,words:1914},y:"a",t:"Java - IO1",O:-.84}}],["/code/java/java%2019.html",{loader:()=>n.e(5376).then(n.bind(n,5494)),meta:{d:17404416e5,l:"2025年2月25日",c:["code"],g:["java"],e:'<h2>IO流2</h2>\n<h3>缓冲流</h3>\n<p>虽然普通的文件流读取文件数据非常便捷，但是每次都需要从外部I/O设备去获取数据，由于<strong>外部I/O设备的速度一般都达不到内存的读取速度</strong>，很有可能造成程序<strong>反应迟钝</strong>，因此性能还不够高，而缓冲流正如其名称一样，它能够提供一个缓冲，**提前将部分内容存入内存（缓冲区）**在下次读取时，如果缓冲区中存在此数据，则无需再去请求外部设备。同理，当向外部设备写入数据时，也是由缓冲区处理，而不是直接向外部设备写入。</p>\n<figure><img src="http://myimg.ekkosonya.cn/20250225181159.png" alt="20250225181159" tabindex="0" loading="lazy"><figcaption>20250225181159</figcaption></figure>',r:{minutes:3.62,words:1086},y:"a",t:"Java - IO2",O:-.84}}],["/code/java/java%202.html",{loader:()=>n.e(4370).then(n.bind(n,4408)),meta:{d:172368e7,l:"2024年8月15日",c:["code"],g:["java"],e:"<h2>静态变量和静态方法</h2>\n<p><strong>Static</strong><br>\n静态的内容，我们可以理解为是属于这个类的，也可以理解为是所有对象共享的内容。<br>\n我们通过使用 <strong>static 关键字</strong>来声明一个变量或一个方法为<strong>静态的</strong>，一旦被声明为静态，那么通过这个类创建的所有对象，<strong>操作的都是同一个目标</strong>，也就是说，对象再多，也只<strong>有这一个静态的变量或方法</strong>。<br>\n一个对象改变了静态变量的值，那么其他的对象读取的就是被改变的值。</p>\n<p>一般情况下，我们并不会通过一个具体的对象去修改和使用静态属性，而是通过这个类去使用：</p>",r:{minutes:5.8,words:1740},y:"a",t:"Java - 类与对象2",O:-.99}}],["/code/java/java%2020.html",{loader:()=>n.e(9676).then(n.bind(n,7840)),meta:{d:17404416e5,l:"2025年2月25日",c:["code"],g:["java"],e:'<h2>IO流3</h2>\n<h3>转换流</h3>\n<p>有时会遇到这样一个很麻烦的问题：我这里读取的是一个字符串或是一个个字符，但是我只能往一个<code>OutputStream</code>里输出，但是<code>OutputStream</code>又只支持<code>byte类型</code>，如果要往里面写入内容，进行数据转换就会很麻烦</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">OutputStreamWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  \n        <span class="token comment">//虽然给定的是FileOutputStream，但是现在支持以Writer的方式进行写入</span>\n        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"lbwnb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//以操作Writer的样子写入OutputStream</span>\n    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:4.29,words:1286},y:"a",t:"Java - IO3",O:-.83}}],["/code/java/java%2021.html",{loader:()=>n.e(2211).then(n.bind(n,5927)),meta:{d:1740528e6,l:"2025年2月26日",c:["code"],g:["java"],e:'<h2>多线程</h2>\n<h3>进程与线程概念</h3>\n<p><strong>进程</strong>是程序执行的实体，每一个进程都是一个应用程序（比如我们运行QQ、浏览器、LOL、网易云音乐等软件），都有自己的内存空间，<strong>CPU一个核心同时只能处理一件事情</strong>，当出现多个进程需要同时运行时，CPU一般通过<strong>时间片轮转调度算法</strong>，来实现多个进程的同时运行。</p>\n<figure><img src="http://myimg.ekkosonya.cn/20250226173747.png" alt="20250226173747" tabindex="0" loading="lazy"><figcaption>20250226173747</figcaption></figure>',r:{minutes:7.73,words:2318},y:"a",t:"Java - 多线程与反射1",O:-.82}}],["/code/java/java%2022.html",{loader:()=>n.e(4650).then(n.bind(n,2519)),meta:{d:1740528e6,l:"2025年2月26日",c:["code"],g:["java"],e:'<h2>多线程2</h2>\n<h3>线程锁和线程同步</h3>\n<h4>多线程下java内存管理</h4>\n<figure><img src="http://myimg.ekkosonya.cn/20250226223324.png" alt="20250226223324" tabindex="0" loading="lazy"><figcaption>20250226223324</figcaption></figure>\n<p>线程之间的共享变量（比如之前悬念中的value变量）存储在主内存（main memory）中，每个线程都有一个私有的工作内存（本地内存），工作内存中存储了该线程以读/写共享变量的副本。</p>',r:{minutes:5.79,words:1738},y:"a",t:"Java - 多线程与反射2",O:-.81}}],["/code/java/java%2023.html",{loader:()=>n.e(6657).then(n.bind(n,5227)),meta:{d:17414784e5,l:"2025年3月9日",c:["code"],g:["java"],e:"<h2>多线程3</h2>\n<h3><code>wait</code> 和 <code>notify</code> 方法</h3>\n<p><code>Object</code> 类还有三个方法我们从来没有使用过，分别是<code>wait()</code>、<code>notify()</code>以及<code>notifyAll()</code></p>\n<p>他们其实是需要配合<code>synchronized</code>来使用的，平常环境下是无法使用的，只有当对象作为锁时，才能用这三个方法。</p>\n<p>实际上<strong>锁就是依附于对象存在</strong>的，<strong>每个对象都应该有针对于锁的一些操作</strong>，所以说就这样设计了。</p>",r:{minutes:5.16,words:1547},y:"a",t:"Java - 多线程与反射3",O:-.8}}],["/code/java/java%2024.html",{loader:()=>n.e(3168).then(n.bind(n,3216)),meta:{d:17414784e5,l:"2025年3月9日",c:["code"],g:["java"],e:'<h2>多线程4</h2>\n<h3>守护线程</h3>\n<p><code>t.setDaemon(true);</code></p>\n<ul>\n<li>守护进程在后台运行运行，不需要和用户交互，本质和普通进程类似。</li>\n<li>而守护线程就不一样了，当其他所有的非守护线程结束之后，守护线程自动结束，也就是说，<strong>Java中所有的线程都执行完毕后，守护线程自动结束</strong>，因此守护线程不适合进行IO操作，只适合打打杂。</li>\n</ul>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">{</span>\n    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序正常运行中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置为守护线程（必须在开始之前，中途是不允许转换的）</span>\n    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.62,words:1086},y:"a",t:"Java - 多线程与反射4",O:-.79}}],["/code/java/java%2025.html",{loader:()=>n.e(5639).then(n.bind(n,5533)),meta:{d:17414784e5,l:"2025年3月9日",c:["code"],g:["java"],e:'<h2>反射1</h2>\n<h3>反射</h3>\n<p>反射就是把Java类中的各个成分映射成一个个的Java对象。即在运行状态中，<strong>对于任意一个类，都能够知道这个类所有的属性和方法</strong>，对于任意一个对象，都能调用它的任意一个方法和属性。<strong>这种动态获取信息及动态调用对象方法</strong>的功能叫Java的反射机制。</p>\n<p>简而言之，我们可以通过反射机制，获取到类的一些属性，包括类里面有哪些字段，有哪些方法，继承自哪个类，甚至还能获取到泛型！它的权限非常高，慎重使用！</p>\n<h3>JAVA 类加载机制</h3>\n<figure><img src="http://myimg.ekkosonya.cn/20250310160214.png" alt="20250310160214" tabindex="0" loading="lazy"><figcaption>20250310160214</figcaption></figure>',r:{minutes:4.79,words:1437},y:"a",t:"Java - 反射1",O:-.78}}],["/code/java/java%2026.html",{loader:()=>n.e(990).then(n.bind(n,9788)),meta:{d:17414784e5,l:"2025年3月9日",c:["code"],g:["java"],e:'<h2>反射2</h2>\n<h3>创建类对象 <code>getConstructor | newInstance</code></h3>\n<p>可以通过<code>Class</code>对象来创建对象、调用方法、修改变量。</p>\n<ul>\n<li>\n<p>我们通过 <code>newInstance()</code> 即可创建对应的对象实例。</p>\n<p>通过使用<code>newInstance()</code>方法来创建对应类型的实例，返回泛型T，注意它会抛出<code>InstantiationException</code>和<code>IllegalAccessException</code>异常</p>\n<p>当类默认的构造方法被带参构造覆盖时，会出现<code>InstantiationException</code>异常，因为<code>newInstance()</code><strong>只适用于默认无参构造</strong>。</p>\n<p>当默认无参构造的权限不是<code>public</code>时，会出现<code>IllegalAccessException</code>异常，表示我们<strong>无权去调用默认构造方法</strong>。</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n    <span class="token class-name">Student</span> student <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    student<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"萨日朗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n<li>\n<p>在JDK9之后，不再推荐使用<code>newInstance()</code>方法, 而是通过获取构造器 <code>getConstructor()</code>，来实例化对象，通过获取类的构造方法（构造器）来创建对象实例，会更加合理。\n我们可以使用<code>getConstructor()</code>方法来获取类的权限为 <code>public</code> 的构造方法，同时我们需要向其中填入参数，也就是构造方法需要的<strong>类型</strong></p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">{</span>\n      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n      <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token class-name">Student</span> student <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"penguin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      student<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre></div></li>\n<li>\n<p>当访问权限不是<code>public</code>的时候, 会无法找到此构造方法, 使用<code>getDeclaredConstructor()</code>方法可以找到类中的非public构造方法，但是在使用之前，我们需要先修改访问权限，在修改访问权限之后，就可以使用非public方法了（这意味着，反射可以无视权限修饰符访问类的内容）.</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n  <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//修改访问权限</span>\n  <span class="token class-name">Student</span> student <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"what\'s up"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  student<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li>\n</ul>',r:{minutes:5.6,words:1680},y:"a",t:"Java - 反射2",O:-.78}}],["/code/java/java%2027.html",{loader:()=>n.e(8037).then(n.bind(n,5178)),meta:{d:17417376e5,l:"2025年3月12日",c:["code"],g:["java"],e:'<h2>反射3</h2>\n<h3>类加载器 <code>AppClassLoader | ExtClassLoader | BootstarpClassLoader</code></h3>\n<p>类加载器就是用于加载一个类的，但是类加载器并不是只有一个。</p>\n<p><strong>思考</strong>： 既然说Class对象和加载的类唯一对应，那如果我们手动创建一个与JDK包名一样，同时类名也保持一致，JVM会加载这个类吗？</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>    <span class="token comment">//JDK提供的String类也是</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我姓🐴，我叫🐴nb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.18,words:953},y:"a",t:"Java - 反射3",O:-.77}}],["/code/java/java%2028.html",{loader:()=>n.e(6980).then(n.bind(n,6530)),meta:{d:17417376e5,l:"2025年3月12日",c:["code"],g:["java"],e:'<h2>注解</h2>\n<p>注解可以被标注在任意地方，包括方法上、类名上、参数上、成员属性上、注解定义上等，就像注释一样，它相当于我们对某样东西的一个标记。而与注释不同的是，注解可以通过反射在运行时获取，注解也可以选择是否保留到运行时。</p>\n<p>比如<code>@Override</code>表示重写父类方法（当然不加效果也是一样的，此注解在编译时会被自动丢弃）注解本质上也是一个类，只不过它的用法比较特殊。</p>\n<h3>预设注解</h3>\n<p>JDK预设了以下注解，作用于代码：</p>\n<ul>\n<li><a href="">@Override</a>- 检查（仅仅是检查，不保留到运行时）该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li>\n<li><a href="">@Deprecated </a>- 标记过时方法。如果使用该方法，会报编译警告。</li>\n<li><a href="">@SuppressWarnings </a>- 指示编译器去忽略注解中声明的警告（仅仅编译器阶段，不保留到运行时）</li>\n<li><a href="">@FunctionalInterface </a>- Java 8 开始支持，标识一个匿名函数或函数式接口。</li>\n<li><a href="">@SafeVarargs </a>- Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li>\n</ul>',r:{minutes:4.79,words:1438},y:"a",t:"Java - 注解",O:-.76}}],["/code/java/java%203.html",{loader:()=>n.e(5433).then(n.bind(n,5563)),meta:{d:1728864e6,l:"2024年10月14日",c:["code"],g:["java"],e:"<h2>封装 继承和多态</h2>\n<p>封装、继承和多态是面向对象编程的三大特性。</p>\n<p>封装，把对象的属性和方法结合成一个独立的整体，隐藏实现细节，并提供对外访问的接口。</p>\n<p>继承，从已知的一个类中派生出一个新的类，叫子类。子类实现了父类所有非私有化的属性和方法，并根据实际需求扩展出新的行为。</p>\n<p>多态，多个不同的对象对同一消息作出响应，同一消息根据不同的对象而采用各种不同的方法。</p>\n<p>正是这三大特性，让我们的Java程序更加生动形象。</p>\n<h3>封装</h3>\n<h3>继承</h3>\n<p>父类是 super 子类是 this</p>\n<h4>Object 类</h4>",r:{minutes:12.32,words:3695},y:"a",t:"Java - 类与对象3",O:-.98}}],["/code/java/java%204.html",{loader:()=>n.e(8216).then(n.bind(n,7863)),meta:{d:17295552e5,l:"2024年10月22日",c:["code"],g:["java"],e:"<h2>面向对象高级篇1</h2>\n<h3>基本类型包装类</h3>\n<p>Java并不是纯面向对象的语言，虽然Java语言是一个面向对象的语言，但是Java中的基本数据类型却不是面向对象的。Java中的基本类型，如果想通过对象的形式去使用他们，Java提供的基本类型包装类，使得Java能够更好的体现面向对象的思想，同时也使得基本类型能够支持对象操作！</p>\n<h4>所有包装类如下</h4>\n<figure><figcaption>20241017002218</figcaption></figure>\n<p>其中能够表示数字的基本类型包装类，继承自Number类，对应关系如下表：</p>\n",r:{minutes:3.84,words:1152},y:"a",t:"Java - 类与对象4",O:-.97}}],["/code/java/java%205.html",{loader:()=>n.e(6479).then(n.bind(n,9508)),meta:{d:1729728e6,l:"2024年10月24日",c:["code"],g:["java"],e:'<h2>面向对象高级篇 2</h2>\n<h3>数组</h3>\n<p>数组是相同类型数据的有序集合，数组可以代表任何相同类型的一组内容（包括引用类型和基本类型）其中存放的每一个数据称为数组的一个元素。</p>\n<h4>定义</h4>\n<p>数组类型比较特殊，<strong>它本身也是类，但是编程不可见</strong>（底层C++写的，在运行时动态创建）<br>\n即使是基本类型的数组，也是以对象的形式存在的，并不是基本数据类型。所以，我们要创建一个数组，同样需要使用 <code>new</code> 关键字</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//类型[]就表示这个是一个数组类型</span>\n    <span class="token class-name">Object</span> obj <span class="token operator">=</span> array<span class="token punctuation">;</span>   <span class="token comment">//因为同样是类，肯定是继承自Object的，所以说可以直接向上转型</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:9.76,words:2929},y:"a",t:"Java - 数组 | 字符串 | 正则表达式",O:-.96}}],["/code/java/java%206.html",{loader:()=>n.e(3494).then(n.bind(n,9102)),meta:{d:17299008e5,l:"2024年10月26日",c:["code"],g:["java"],e:'\n<p>静态 属于 类， 成员 属于 对象。</p>\n<h2>内部类</h2>\n<p>内部类顾名思义，就是创建在内部的类。</p>\n<h3>成员内部类 (属于 对象)</h3>\n<p>成员内部类其实在某些情况下使用起来比较麻烦，对于这种成员内部类，我们一般只会在类的内部自己使用</p>\n<p>成员内部类和成员方法、成员变量一样，<strong>是对象所有的</strong>，而<strong>不是类所有的</strong>，\n如果我们要使用成员内部类，那么就需要创造一个对象，才能去 <code>new</code> 一个成员内部类。</p>\n<ul>\n<li>\n<p>我们可以直接在类的内部定义成员内部类：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>   \n      <span class="token comment">//内部类也是类，所以说里面也可以有成员变量、方法等，甚至还可以继续套娃一个成员内部类</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是成员内部类！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//我们首先需要创建对象</span>\n    <span class="token class-name">Test<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//成员内部类的类型名称就是 外层.内部类名称</span>\n    inner<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>注意，成员内部类也可以使用访问权限控制，如果我们我们将其权限改为private，那么就像我们把成员变量访问权限变成私有一样，外部是无法访问到这个内部类的.</p>\n</li>\n<li>\n<p>这里我们需要特别注意一下，在成员内部类中，是<strong>可以访问到外层的变量的</strong></p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    \n    <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是成员内部类："</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//成员内部类可以访问到外部的成员变量</span>\n            <span class="token comment">//因为成员内部类本身就是某个对象所有的，每个对象都有这样的一个类定义，这里的name是其所依附对象的</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n<li>\n<p>每个类可以创建一个对象，<strong>每个对象中都有一个单独的类定义</strong>，可以通过这个成员内部类又创建出更多对象，套娃了属于是。</p>\n<figure><figcaption>20241027012950</figcaption></figure>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Test</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Test<span class="token punctuation">.</span>Inner</span> inner1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//依附于a创建的对象，那么就是a的</span>\n    inner1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Test</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Test<span class="token punctuation">.</span>Inner</span> inner2 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//依附于b创建的对象，那么就是b的</span>\n    inner2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n<li>\n<p>那么如果内部类中也定义了同名的变量，此时我们怎么去明确要使用的是哪一个 (<strong>就近原则</strong>)\n如果需要指定为外部的对象，那么需要<strong>在前面添加外部类型名称</strong> <code>Test.this.</code></p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n  <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>\n\n      <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法参数的name = "</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    \n          <span class="token comment">//依然是就近原则，最近的是参数，那就是参数了</span>\n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员内部类的name = "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n          <span class="token comment">//在内部类中使用this关键字，只能表示内部类对象</span>\n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员内部类的name = "</span><span class="token operator">+</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">//如果需要指定为外部的对象，那么需要在前面添加外部类型名称</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><p>包括对方法的调用和super关键字的使用，也是一样的：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//内部类自己的toString方法</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//内部类父类的toString方法</span>\n        <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//外部类的toSrting方法</span>\n        <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//外部类父类的toString方法</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n</ul>',r:{minutes:10.39,words:3118},y:"a",t:"Java - 内部类",O:-.95}}],["/code/java/java%207.html",{loader:()=>n.e(3645).then(n.bind(n,968)),meta:{d:17300736e5,l:"2024年10月28日",c:["code"],g:["java"],e:'<h2>面向对象高级篇 4</h2>\n<h3>异常机制</h3>\n<h4>异常类型</h4>\n<p>我们在之前其实已经接触过一些异常了，比如数组越界异常，空指针异常，算术异常等.<br>\n他们其实都是异常类型，我们的每一个异常也是一个类，他们都继承自 <strong>Exception</strong> 类</p>\n<ul>\n<li>\n<p><strong>运行时异常</strong>  继承自 <strong>RuntimeException</strong>\n在编译阶段无法感知代码是否会出现问题，只有在运行的时候才知道会不会出错（正常情况下是不会出错的），这样的异常称为运行时异常。<br>\n所有的运行时异常都继承自 <strong>RuntimeException</strong>\n<strong>RuntimeException</strong> 是继承 <strong>Exception</strong></p>\n</li>\n<li>\n<p><strong>编译时异常</strong>  继承 <strong>Exception</strong>\n编译时异常明确指出可能会出现的异常，在编译阶段就需要进行处理（捕获异常）必须要考虑到出现异常的情况，如果不进行处理，将<strong>无法通过编译</strong>！<br>\n默认继承自 <strong>Exception</strong> 类的异常都是编译时异常。<br>\n比如Object类中定义的clone方法，就明确指出了在运行的时候会出现的异常。</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">;</span>\n</code></pre></div><figure><img src="http://myimg.ekkosonya.cn/20241029001425.png" alt="20241029001425" tabindex="0" loading="lazy"><figcaption>20241029001425</figcaption></figure>\n</li>\n<li>\n<p><strong>错误 Error</strong>\n<strong>错误比异常更严重</strong>，异常就是不同寻常，但不一定会导致致命的问题，而错误是致命问题，一般出现错误可能JVM就无法继续正常运行了。<br>\n比如 OutOfMemoryError 就是内存溢出错误（内存占用已经超出限制，无法继续申请内存了）</p>\n</li>\n</ul>',r:{minutes:6.35,words:1906},y:"a",t:"Java - 异常",O:-.94}}],["/code/java/java%208.html",{loader:()=>n.e(4940).then(n.bind(n,9997)),meta:{d:173016e7,l:"2024年10月29日",c:["code"],g:["java"],e:'<h2>面向对象高级篇 6</h2>\n<p>工具类就是专门为一些特定场景编写的，便于我们去使用的类，工具类一般都会内置大量的静态方法，<strong>我们可以通过类名直接使用</strong>。</p>\n<h3>常用工具类</h3>\n<h4>数学工具类  <code>Math</code></h4>\n<p><code>Math</code>类 是在 <code>java.util</code> 中，因此可以直接调用。</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//Math也是java.lang包下的类，所以说默认就可以直接使用</span>\n  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//我们可以使用pow方法直接计算a的b次方</span>\n\n  <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//abs方法可以求绝对值</span>\n  <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//快速取最大值</span>\n  <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//快速取最小值</span>\n  <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//求一个数的算术平方根</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:1.16,words:349},y:"a",t:"Java - 工具类",O:-.93}}],["/code/java/java%209.html",{loader:()=>n.e(4947).then(n.bind(n,9363)),meta:{d:17308512e5,l:"2024年11月6日",c:["code"],g:["java"],e:"<h2>泛型 1</h2>\n<h3>使用泛型的原因</h3>\n<p>为了统计学生成绩，要求设计一个Score对象，包括课程名称、课程号、课程成绩，但是成绩分为两种，一种是以<code>优秀、良好、合格</code> 来作为结果，还有一种就是 <code>60.0、75.5、92.5</code> 这样的数字分数，可能高等数学这门课是以数字成绩进行结算，而计算机网络实验这门课是以等级进行结算，这两种分数类型都有可能出现，那么现在该如何去设计这样的一个 Score 类呢？</p>\n<p>现在的问题就是，成绩可能是<code>String</code>类型，也可能是<code>Integer</code>类型，如何才能很好的去存可能出现的两种类型呢？</p>",r:{minutes:5.39,words:1618},y:"a",t:"Java - 泛型 1",O:-.92}}],["/code/java%209-17/javainfo.html",{loader:()=>n.e(4204).then(n.bind(n,2898)),meta:{d:17535744e5,l:"2025年7月27日",c:["code"],g:["java新特性"],e:'<h2>Java8</h2>\n<h3>Lambda 表达式</h3>\n<h4>匿名内部类</h4>\n<p>在Java 8之前，我们在某些情况下可能需要用到匿名内部类，比如：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//现在我们想新建一个线程来搞事情</span>\n    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n        <span class="token comment">//创建一个实现Runnable的匿名内部类</span>\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//具体的实现逻辑</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:9.53,words:2859},y:"a",t:"Java8回顾",O:-.746}}],["/code/java%209-17/javainfo2.html",{loader:()=>n.e(5788).then(n.bind(n,7338)),meta:{d:17535744e5,l:"2025年7月27日",c:["code"],g:["java新特性"],e:"<h2>Java9</h2>\n<p>Java 9的主要特性有，全新的模块机制、接口的private方法等。</p>\n<h3>模块机制</h3>\n<h4>简介</h4>\n<p>当我们导入一个<code>jar</code>包作为依赖时（包括JDK官方库），实际上很多功能我们并不会用到，但是由于它们是属于同一个依赖捆绑在一起，这样就会导致我们可能只用到一部分内容，但是需要引用一个完整的类库</p>\n<p>实际上我们可以把用不到的类库排除掉，大大降低依赖库的规模。</p>\n<p>于是，Java 9引入了<strong>模块机制</strong>来对这种情况进行优化，在之前的我们的项目是这样的：</p>",r:{minutes:7.61,words:2282},y:"a",t:"Java9 - 模块机制",O:-.7464}}],["/code/java%209-17/javainfo3.html",{loader:()=>n.e(9971).then(n.bind(n,7007)),meta:{d:17535744e5,l:"2025年7月27日",c:["code"],g:["java新特性"],e:"<h2>Java9</h2>\n<h3>JShell交互式编程</h3>\n<p>Java 9为我们通过了一种交互式编程工具<code>JShell</code></p>\n<figure><figcaption>alt text</figcaption></figure>\n<p>环境配置完成后，我们只需要输入<code>jshell</code>命令即可开启交互式编程了，它支持我们一条一条命令进行操作。</p>\n<p>比如我们来做一个简单的计算：</p>\n<figure><figcaption>alt text</figcaption></figure>\n<p>我们一次输入一行（可以不加分号），先定义一个a=10和b=10，然后定义c并得到a+b的结果，可以看到还是非常方便的，但是注意语法还是和Java是一样的。</p>",r:{minutes:6.89,words:2068},y:"a",t:"Java9 - 2",O:-.7463}}],["/code/java%209-17/javainfo4.html",{loader:()=>n.e(9262).then(n.bind(n,6592)),meta:{d:17535744e5,l:"2025年7月27日",c:["code"],g:["java新特性"],e:'<h2>Java10</h2>\n<p>Java 10主要带来的是一些内部更新，相比Java 9带来的直观改变不是很多，其中比较突出的就是局部变量类型推断了</p>\n<h3>局部变量类型推断 <code>var</code></h3>\n<p>在Java中，我们可以使用自动类型推断：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// String a = "Hello World!";   之前我们定义变量必须指定类型</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>   <span class="token comment">//现在我们使用var关键字来自动进行类型推断，因为完全可以从后面的值来判断是什么类型</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:5.13,words:1540},y:"a",t:"Java10-11 - 1",O:-.7463}}],["/code/java%209-17/javainfo5.html",{loader:()=>n.e(5605).then(n.bind(n,739)),meta:{d:17537472e5,l:"2025年7月29日",c:["code"],g:["java新特性"],e:"<h2>Java 12-16 新特性</h2>\n<p>由于Java版本的更新迭代速度自Java 9开始为半年更新一次</p>\n<p>Java 8到Java 9隔了整整三年，所以各个版本之间的更新内容比较少了。</p>\n<figure><figcaption>alt text</figcaption></figure>\n<p>Java12-16这五个版本并非长期支持版本，所以很多特性都是一种处于实验性功能</p>\n<p>12/13版本引入了一些实验性功能，并根据反馈进行调整，最后在后续版本中正式开放使用。</p>\n<h3>新的switch语法</h3>\n<p>在Java 12引入全新的switch语法，让我们使用switch语句更加的灵活</p>",r:{minutes:9.67,words:2902},y:"a",t:"Java 12-16 - 1",O:-.7463}}],["/code/java%209-17/javainfo6.html",{loader:()=>n.e(1808).then(n.bind(n,9481)),meta:{d:17538336e5,l:"2025年7月30日",c:["code"],g:["java新特性"],e:'<h2><code>Consumer</code></h2>\n<p><code>Consumer</code>是Java 8中的一个函数式接口，它位于<code>java.util.function</code>包中。</p>\n<p>定义了一个名为<code>accept</code>的抽象方法，该方法接受一个参数并且不返回任何结果。</p>\n<p>换句话说，<code>Consumer</code>接口表示一个消费者，它可以对给定的对象<strong>执行某些操作，但不产生任何结果</strong>。</p>\n<h3>接口声明</h3>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * Performs this operation on the given argument.\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">t</span> the input argument\n     */</span>\n    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * Returns a composed <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Consumer</span></span></span><span class="token punctuation">}</span> that performs, in sequence, this\n     * operation followed by the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> operation. If performing either\n     * operation throws an exception, it is relayed to the caller of the\n     * composed operation.  If performing this operation throws an exception,\n     * the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> operation will not be performed.\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">after</span> the operation to perform after this operation\n     * <span class="token keyword">@return</span> a composed <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Consumer</span></span></span><span class="token punctuation">}</span> that performs in sequence this\n     * operation followed by the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> operation\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">after</span></span><span class="token punctuation">}</span> is null\n     */</span>\n    <span class="token keyword">default</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">andThen</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> after<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:9.87,words:2962},y:"a",t:"Java 杂",O:-.7463}}],["/code/java_hint/hint1.html",{loader:()=>n.e(7398).then(n.bind(n,1236)),meta:{d:1750032e6,l:"2025年6月16日",c:["code"],g:["java hint"],e:'<p>带初始值的初始化</p>\n<ul>\n<li>\n<p>如果是 <code>java 9+</code>, 可以直接使用 <code>list.of</code></p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n  <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>这种方式创建的列表 不可修改，<code>add()</code> 和 <code>remove()</code> 都会抛出 <code>UnsupportedOperationException</code>。</p>\n</li>\n<li>\n<p>但如果是 <code>java 8</code>，就没有这个，可以使用 <code>Stream</code></p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n      <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Charlie"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li>\n</ul>',r:{minutes:.76,words:227},y:"a",t:"hint - List初始化",O:-.7482}}],["/code/java_hint/hint2.html",{loader:()=>n.e(8671).then(n.bind(n,4934)),meta:{d:1750032e6,l:"2025年6月16日",c:["code"],g:["java hint"],e:'<ol>\n<li>\n<p>-128 到 +127 以内的int值都是自动包装好，所以对象都是一个\n</p>\n</li>\n<li>\n<p><code>Scanner</code> 的 <code>nextInt</code>\n<code>Scanner scanner = new Scanner(System.in);</code>\n<code>scanner.nextInt()</code> 只读整数，不读换行符（\\n）\n换行符仍然留在输入缓冲区中，需要清理对应的换行符</p>\n</li>\n<li>\n<p>Java 中 finally 的行为</p>\n<p>不论 try 里是正常结束、遇到 return、遇到异常，finally 块里的内容都会被执行。</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InputMismatchException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的不是数字，重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关键：清除输入缓冲区的换行符</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><p>即使这样，也会执行 <code>finally</code>，这样解决了缓冲区存在 <code>\\n</code> 的问题</p>\n</li>\n<li>\n<p>consume</p>\n</li>\n</ol>',r:{minutes:.61,words:183},y:"a",t:"hint2",O:-.7482}}],["/code/java_hint/hint3.html",{loader:()=>n.e(8744).then(n.bind(n,7033)),meta:{d:17558208e5,l:"2025年8月22日",c:["code"],g:["java hint"],e:"<p>首先，注解的使用分成两类</p>\n<ul>\n<li>编译期生效（Lombok：改写字节码，帮你生成方法）</li>\n<li>运行期生效（Spring：反射 + AOP，帮你注入 Bean、加事务、AoP等）</li>\n</ul>\n<p>个人目前感觉</p>\n<p>注解就是一个标记，在代码编译或者运行时可以通过一些手段找到对应标记的东西</p>\n<p>然后基于此，相当于打了个坐标，然后在此上面进行一些自己的处理</p>\n<p>主要就是定义注解，然后使用注解，最后写个注解处理器来捕获并处理</p>\n<figure><figcaption>alt text</figcaption></figure>",r:{minutes:.66,words:197},y:"a",t:"hint - 注解理解",O:-.7482}}],["/code/java_ssm/SpringMvc/mvc1.html",{loader:()=>n.e(8271).then(n.bind(n,3154)),meta:{d:17567712e5,l:"2025年9月2日",c:["code"],g:["javassm","Spring"],e:"<h2>MVC理论基础</h2>\n<p>SpringMVC - 表示层框架</p>\n<p>MVC三层架构包括：</p>\n<figure><figcaption>alt text</figcaption></figure>\n<p>每一层都有着各自的职责</p>\n<p>其中最关键的当属表示层，因为它相当于就是直接与用户的浏览器打交道的一层</p>\n<p>并且所有的请求都会经过它进行解析，然后再告知业务层进行处理，任何页面的返回和数据填充也全靠表示层来完成，因此它实际上是整个三层架构中最关键的一层</p>\n<p>而在之前的实战开发中，我们编写了大量的Servlet（也就是表示层实现）来处理来自浏览器的各种请求，但是我们发现，仅仅是几个很小的功能，以及几个很基本的页面，我们都要编写将近十个Servlet</p>",r:{minutes:5.89,words:1767},y:"a",t:"Javassm - SpringMVC1",O:-.6}}],["/code/java_ssm/SpringMvc/mvc2.html",{loader:()=>n.e(9174).then(n.bind(n,6679)),meta:{d:1756944e6,l:"2025年9月4日",c:["code"],g:["javassm","Spring"],e:"<h2>Controller控制器1</h2>\n<figure><figcaption>alt text</figcaption></figure>\n<figure><figcaption>alt text</figcaption></figure>\n<p>有了SpringMVC之后，我们不必再像之前那样一个请求地址创建一个Servlet了</p>\n<p>SpringMVC 使用 <code>DispatcherServlet</code> 替代Tomcat为我们提供的默认的静态资源Servlet，也就是说，现在所有的请求（除了jsp，因为Tomcat还提供了一个jsp的Servlet）都会经过<code>DispatcherServlet</code>进行处理。</p>",r:{minutes:5.99,words:1798},y:"a",t:"Javassm - SpringMVC2",O:-.6}}],["/code/java_ssm/SpringMvc/mvc3.html",{loader:()=>n.e(2477).then(n.bind(n,2758)),meta:{d:1756944e6,l:"2025年9月4日",c:["code"],g:["javassm","Spring"],e:'<h2>Controller控制器2</h2>\n<h3>@RequestMapping详解</h3>\n<p>前面我们已经了解了如何创建一个控制器来处理我们的请求，接着我们只需要在控制器添加一个方法用于处理对应的请求即可</p>\n<p>之前我们需要完整地编写一个Servlet来实现，而现在我们只需要添加一个<code>@RequestMapping</code>即可实现</p>\n<p>从它的名字我们也能得知，此注解就是将<strong>请求和处理请求的方法建立一个映射关系</strong>，当收到请求时就可以根据映射关系调用对应的请求处理方法</p>\n<p>注解定义如下：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span>\n<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RequestMapping</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">RequestMethod</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">consumes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">produces</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:9.77,words:2930},y:"a",t:"Javassm - SpringMVC3",O:-.6}}],["/code/java_ssm/SpringMvc/mvc4.html",{loader:()=>n.e(2132).then(n.bind(n,5659)),meta:{d:17570304e5,l:"2025年9月5日",c:["code"],g:["javassm","Spring"],e:"<h2>Interceptor拦截器</h2>\n<p>拦截器是整个SpringMVC的一个重要内容，拦截器与过滤器类似，都是用于拦截一些非法请求</p>\n<p>但是我们之前讲解的过滤器是作用于Servlet之前，<strong>只有经过层层的过滤器才可以成功到达Servlet</strong></p>\n<p>而拦截器并不是在Servlet之前，它在Servlet与RequestMapping之间，相当于DispatcherServlet在将请求交给对应Controller中的<strong>方法之前进行拦截处理</strong></p>\n<p>它只会拦截所有Controller中定义的请求映射对应的请求（不会拦截静态资源），这里一定要区分两者的不同。</p>",r:{minutes:6.35,words:1906},y:"a",t:"Javassm - SpringMVC4",O:-.6}}],["/code/java_ssm/SpringMvc/mvc5.html",{loader:()=>n.e(3995).then(n.bind(n,3933)),meta:{d:17571168e5,l:"2025年9月6日",c:["code"],g:["javassm","Spring"],e:"<h2>JSON数据格式与Axios请求</h2>\n<p>JSON (JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。</p>\n<p>我们现在推崇的是前后端分离的开发模式，而不是所有的内容全部交给后端渲染再发送给浏览器</p>\n<p>也就是说，整个Web页面的内容在一开始就编写完成了，而其中的数据由前端执行JS代码来向服务器动态获取，再到前端进行渲染（填充），这样可以大幅度减少后端的压力，并且后端只需要传输关键数据即可</p>\n<h3>JSON数据格式</h3>\n<p>既然要实现前后端分离，那么我们就必须约定一种更加高效的数据传输模式，来向前端页面传输后端提供的数据。</p>",r:{minutes:8.51,words:2553},y:"a",t:"Javassm - SpringMVC5",O:-.6}}],["/code/java_ssm/SpringMvc/mvc6.html",{loader:()=>n.e(2722).then(n.bind(n,5205)),meta:{d:17571168e5,l:"2025年9月6日",c:["code"],g:["javassm","Spring"],e:'<h2>解读DispatcherServlet源码</h2>\n<p>到目前为止，关于SpringMVC的相关内容就学习得差不多了</p>\n<p>了解一下DispatcherServlet底层是如何进行调度的</p>\n<h3>源码分析</h3>\n<p>首先我们需要找到<code>DispatcherServlet</code>的最顶层<code>HttpServletBean</code>，在这里直接继承的<code>HttpServlet</code></p>\n<p>那么我们首先来看一下，它在初始化方法中做了什么：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n    <span class="token comment">//读取配置参数，并进行配置</span>\n    <span class="token class-name">PropertyValues</span> pvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpServletBean<span class="token punctuation">.</span>ServletConfigPropertyValues</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requiredProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pvs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">BeanWrapper</span> bw <span class="token operator">=</span> <span class="token class-name">PropertyAccessorFactory</span><span class="token punctuation">.</span><span class="token function">forBeanPropertyAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">ResourceLoader</span> resourceLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            bw<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ResourceEditor</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initBeanWrapper</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            bw<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isErrorEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to set bean properties on servlet \'"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\'"</span><span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">throw</span> var4<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//此初始化阶段由子类实现，</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:5.48,words:1645},y:"a",t:"Javassm - SpringMVC6",O:-.6}}],["/code/java_ssm/SpringMvc/mvc7.html",{loader:()=>n.e(2649).then(n.bind(n,6367)),meta:{d:17571168e5,l:"2025年9月6日",c:["code"],g:["javassm","Spring"],e:'<h2>MVC</h2>\n<figure><figcaption>alt text</figcaption></figure>\n<h3>HandleMapping</h3>\n<p>可以看到有：</p>\n<figure><figcaption>alt text</figcaption></figure>\n<p>应该这是 Spring MVC 自带的三个 <code>HandleMapping</code></p>\n<figure><figcaption>alt text</figcaption></figure>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initHandlerMappings</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>detectAllHandlerMappings<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HandlerMapping</span><span class="token punctuation">&gt;</span></span> matchingBeans <span class="token operator">=</span> <span class="token class-name">BeanFactoryUtils</span><span class="token punctuation">.</span><span class="token function">beansOfTypeIncludingAncestors</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">HandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:.31,words:94},y:"a",t:"Javassm - SpringMVC7 (杂)",O:-.6}}],["/code/java_ssm/SpringSecurity/ss1.html",{loader:()=>n.e(5863).then(n.bind(n,606)),meta:{d:17574624e5,l:"2025年9月10日",c:["code"],g:["javassm","Spring"],e:'<h2>SpringSecurity</h2>\n<p>SpringSecurity是一个基于Spring开发的非常强大的权限验证框架，其核心功能包括：</p>\n<ul>\n<li>认证 （用户登录）</li>\n<li>授权 （此用户能够做哪些事情）</li>\n<li>攻击防护 （防止伪造身份攻击）</li>\n</ul>\n<h3>测试环境搭建</h3>\n<p>为了测试我们之前的网站安全性，这里我们基于Mvc框架重新搭建一个采用之前的验证方式的简易网站</p>\n<figure><figcaption>alt text</figcaption></figure>\n<p>首先是登录界面部分：</p>\n<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>登录白马银行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>\n      用户名：\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>\n      密码：\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${status}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>登录失败，用户名或密码错误！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:1.84,words:553},y:"a",t:"Javassm - SpringSecurity1",O:-.599}}],["/code/java_ssm/SpringSecurity/ss2.html",{loader:()=>n.e(8622).then(n.bind(n,5350)),meta:{d:17575488e5,l:"2025年9月11日",c:["code"],g:["javassm","Spring"],e:"<h2>SpringSecurity2</h2>\n<h3>CSRF跨站请求伪造攻击</h3>\n<p>CSRF是我们要介绍的第一种攻击形式，这种攻击方式非常好理解。</p>\n<p>我们时常会在QQ上收到别人发送的钓鱼网站链接，只要你在上面登陆了你的QQ账号，那么不出意外，你的号已经在别人手中了。</p>\n<p>实际上这一类网站都属于恶意网站，专门用于盗取他人信息，执行非法操作，甚至获取他人账户中的财产，非法转账等。而这里，我们需要了解一种比较容易发生的恶意操作，从不法分子的角度去了解整个流程。</p>\n<p>我们在JavaWeb阶段已经了解了Session和Cookie的机制，在一开始的时候，服务端会给浏览器一个名为JSESSIONID的Cookie信息作为会话的唯一凭据，只要用户携带此Cookie访问我们的网站，那么我们就可以认定此会话属于哪个浏览器用户。</p>",r:{minutes:8.56,words:2568},y:"a",t:"Javassm - SpringSecurity2",O:-.599}}],["/code/java_ssm/SpringSecurity/ss3.html",{loader:()=>n.e(7989).then(n.bind(n,2177)),meta:{d:17575488e5,l:"2025年9月11日",c:["code"],g:["javassm","Spring"],e:'<h2>SpringSecurity3</h2>\n<h3>SpringSecurity 环境配置</h3>\n<h4>模块导入</h4>\n<p>我们继续使用之前的测试项目进行教学，首先我们需要导入SpringSecurity的相关依赖</p>\n<p>它不仅仅是一个模块，我们可以根据需求导入需要的模块，常用的是以下两个：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:1.17,words:351},y:"a",t:"Javassm - SpringSecurity3",O:-.599}}],["/code/java_ssm/SpringSecurity/ss4.html",{loader:()=>n.e(9324).then(n.bind(n,8156)),meta:{d:17576352e5,l:"2025年9月12日",c:["code"],g:["javassm","Spring"],e:'<h2>认证</h2>\n<p>认证是我们网站的第一步，用户需要登录之后才能进入</p>\n<p>这一部分我们将详细介绍如何使用SpringSecurity实现用户登录。</p>\n<h3>基于内存验证</h3>\n<p>首先我们来看看最简单的基于内存的配置，也就是说我们直接以代码的形式配置我们网站的用户和密码</p>\n<h4><code>UserDetailsService</code></h4>\n<p>配置方式非常简单，只需要在Security配置类中注册一个Bean即可：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableWebSecurity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfiguration</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Bean</span>   <span class="token comment">//UserDetailsService就是获取用户信息的服务</span>\n    <span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//每一个UserDetails就代表一个用户信息，其中包含用户的用户名和密码以及角色</span>\n        <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>  <span class="token comment">//角色目前我们不需要关心，随便写就行，后面会专门讲解</span>\n                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">UserDetails</span> admin <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">,</span> <span class="token string">"USER"</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> admin<span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token comment">//创建一个基于内存的用户信息管理器作为UserDetailsService</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:10.41,words:3122},y:"a",t:"Javassm - SpringSecurity4",O:-.599}}],["/code/javaweb/1-Socket/javaweb1.html",{loader:()=>n.e(1301).then(n.bind(n,4189)),meta:{d:17425152e5,l:"2025年3月21日",c:["code"],g:["javaweb"],e:'<h2>Socket</h2>\n<p>通过Socket技术（它是计算机之间进行通信的一种约定或一种方式），我们就可以实现两台计算机之间的通信，Socket也被翻译为套接字，是操作系统底层提供的一项通信技术，它支持TCP和UDP。而Java就对socket底层支持进行了一套完整的封装，我们可以通过Java来实现Socket通信。</p>\n<h3>socket 连接示例</h3>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//服务端</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    \n        <span class="token comment">//将服务端创建在端口8080上</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在等待客户端连接..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n        <span class="token comment">//当没有客户端连接时，线程会阻塞，直到有客户端连接为止</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端已连接，IP地址为："</span><span class="token operator">+</span>socket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//由于继承了Autocloseble 省略 socket.close()</span>\n    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.89,words:1167},y:"a",t:"javaweb - Socket1",O:-.75}}],["/code/javaweb/1-Socket/javaweb2.html",{loader:()=>n.e(4080).then(n.bind(n,3502)),meta:{d:17426016e5,l:"2025年3月22日",c:["code"],g:["javaweb"],e:'<h2>Socket2</h2>\n<h3>Socket 传输文件</h3>\n<p>其实本质上都差不多，主要掌握几种流之间的操作，和 <code>socket</code> 的用法</p>\n<ol>\n<li>一般 <code>xxxOutputStream</code> 的操作是往对应的xxx流内写入一些东西；<code>xxxInputStream</code> 的操作是从对应的xxx流内获取一些东西。</li>\n</ol>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Server.java</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"net/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">InputStream</span> inputstream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> inputstream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            fileOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.86,words:858},y:"a",t:"javaweb - Socket2",O:-.7499}}],["/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb3.html",{loader:()=>n.e(6055).then(n.bind(n,5046)),meta:{d:1742688e6,l:"2025年3月23日",c:["code"],g:["javaweb","mysql"],e:"<h2>数据库 1</h2>\n<h3>简介</h3>\n<p>数据库是数据管理的有效技术，是由一批数据构成的有序集合，这些数据被存放在结构化的数据表里。数据表之间相互关联，反映客观事物间的本质联系。数据库能有效地帮助一个组织或企业科学地管理各类信息资源。简而言之，我们的数据可以交给数据库来帮助我们进行管理，同时数据库能够为我们提供高效的访问性能。</p>\n<p>常见的数据库有很多种，包括但不限于：</p>\n<p>MySQL - 免费，用的最多的，开源数据库，适用于中小型\nMicrosoft SQL Server - 收钱的，但是提供技术支持，适用于Windows Server\nOracle - 收钱的，大型数据库系统</p>",r:{minutes:5.42,words:1626},y:"a",t:"javaweb - 数据库1",O:-.7498}}],["/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb4.html",{loader:()=>n.e(3146).then(n.bind(n,7019)),meta:{d:1742688e6,l:"2025年3月23日",c:["code"],g:["javaweb","mysql"],e:"<h2>数据库 2</h2>\n<h2>SQL 语句</h2>\n<p>结构化查询语言（Structured Query Language）简称SQL，这是一种特殊的语言，它专门用于数据库的操作。每一种数据库都支持SQL，但是他们之间会存在一些细微的差异，因此不同的数据库都存在自己的“方言”。</p>\n<p>SQL语句<strong>不区分大小写</strong>（关键字推荐使用大写），它支持多行，并且需要使用<code>;</code>进行结尾！</p>\n<p>SQL也支持注释，通过使用<code>--</code>或是<code>#</code>来编写注释内容，也可以使用<code>/*</code>来进行多行注释。</p>",r:{minutes:6.79,words:2037},y:"a",t:"javaweb - 数据库2",O:-.7497}}],["/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb5.html",{loader:()=>n.e(8577).then(n.bind(n,2707)),meta:{d:1742688e6,l:"2025年3月23日",c:["code"],g:["javaweb","mysql"],e:'<h2>数据库 3</h2>\n<h2>数据库查询语言 (DQL)</h2>\n<h3>单表查询 <code>SELECET</code></h3>\n<p>单表查询是最简单的一种查询，我们只需要在一张表中去查找数据即可，通过使用<code>select</code>语句来进行单表查询：</p>\n<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 指定查询某一列数据</span>\n<span class="token keyword">SELECT</span> 列名<span class="token punctuation">[</span><span class="token punctuation">,</span>列名<span class="token punctuation">]</span> <span class="token keyword">FROM</span> 表名\n<span class="token comment">-- 会以别名显示此列</span>\n<span class="token keyword">SELECT</span> 列名 别名 <span class="token keyword">FROM</span> 表名\n<span class="token comment">-- 查询所有的列数据</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名\n<span class="token comment">-- 只查询不重复的值</span>\n<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 列名 <span class="token keyword">FROM</span> 表名\n</code></pre></div>',r:{minutes:5.32,words:1597},y:"a",t:"javaweb - 数据库3",O:-.7496}}],["/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb6.html",{loader:()=>n.e(2220).then(n.bind(n,1451)),meta:{d:1742688e6,l:"2025年3月23日",c:["code"],g:["javaweb","mysql"],e:'<h2>数据库 4</h2>\n<h2>视图</h2>\n<p>视图本质就是一个查询的结果，不过我们每次都可以通过打开视图来按照我们想要的样子查看数据。</p>\n<p>既然视图本质就是一个查询的结果，那么<strong>它本身就是一个虚表，并不是真实存在的</strong>，<strong>数据实际上还是存放在原来的表中</strong>。\n对视图的修改就是对基本表的修改，相当于一个指针。</p>\n<p>我们可以通过<code>create view</code>来创建视图;</p>\n<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">(</span>列名<span class="token punctuation">)</span> <span class="token keyword">as</span> 子查询语句 <span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:5.51,words:1654},y:"a",t:"javaweb - 数据库4",O:-.7495}}],["/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb7.html",{loader:()=>n.e(5651).then(n.bind(n,7221)),meta:{d:17479584e5,l:"2025年5月23日",c:["code"],g:["javaweb","mysql"],e:"<h2>主要内容</h2>\n<p>通过Java如何去使用数据库来帮助我们存储数据</p>\n<h2>JDBC</h2>\n<p>JDBC英文名为：Java Data Base Connectivity(Java数据库连接)，官方解释它是Java编程语言和广泛的数据库之间独立于数据库的连接标准的Java API，根本上说JDBC是一种规范，它提供的接口，一套完整的，允许便捷式访问底层数据库。可以用JAVA来写不同类型的可执行文件：JAVA应用程序、JAVA Applets、Java Servlet、JSP等，不同的可执行文件都能通过JDBC访问数据库，又兼备存储的优势。简单说它就是Java与数据库的连接的桥梁或者插件，用Java代码就能操作数据库的增删改查、存储过程、事务等。</p>",r:{minutes:4.34,words:1303},y:"a",t:"javaweb - JAVA与数据库1",O:-.7494}}],["/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb8.html",{loader:()=>n.e(5590).then(n.bind(n,5125)),meta:{d:17482176e5,l:"2025年5月26日",c:["code"],g:["javaweb","mysql"],e:'<h2>JDBC</h2>\n<h3>执行DML操作 <code>executeUpdate()</code></h3>\n<p>删除、更新、添加</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span>\n                <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/study"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">int</span> i <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"insert into student values(4,\'monkey\',\'男\')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// statement.executeUpdate("delete from student where sid = 4");</span>\n            <span class="token comment">// int i = statement.executeUpdate("update student set name = \'dog\' where sid=3");</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生效了："</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.46,words:737},y:"a",t:"javaweb - JAVA与数据库2",O:-.7493}}],["/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb9.html",{loader:()=>n.e(2349).then(n.bind(n,3384)),meta:{d:17482176e5,l:"2025年5月26日",c:["code"],g:["javaweb","mysql"],e:'<h2>JDBC</h2>\n<h3>实现登陆与SQL注入攻击</h3>\n<p>在使用之前，我们先来看看如果我们想模拟登陆一个用户，我们该怎么去写：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"URL"</span><span class="token punctuation">,</span><span class="token string">"用户名"</span><span class="token punctuation">,</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">ResultSet</span> res <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"select * from user where username=\'"</span><span class="token operator">+</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\'and pwd=\'"</span><span class="token operator">+</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> username <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token operator">+</span><span class="token string">" 登陆成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:4.3,words:1291},y:"a",t:"javaweb - JAVA与数据库3",O:-.7492}}],["/code/javaweb/3-Lombok/javaweb10.html",{loader:()=>n.e(773).then(n.bind(n,2602)),meta:{d:17482176e5,l:"2025年5月26日",c:["code"],g:["javaweb","Lombok"],e:'<h2>Lombok1</h2>\n<p>我们发现，在以往编写项目时，尤其是在类进行类内部成员字段封装时，需要编写大量的<code>get/set</code>方法，这不仅使得我们类定义中充满了get和set方法，同时如果字段名称发生改变，又要挨个进行修改，甚至当字段变得很多时，构造方法的编写会非常麻烦！</p>\n<p>通过使用 Lombok（小辣椒）就可以解决这样的问题！</p>\n<figure><figcaption>img</figcaption></figure>\n<p>使用原生方式和小辣椒方式编写类的区别，首先是传统方式：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sid<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sid<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">//长！</span>\n        <span class="token keyword">return</span> sid<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sid<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//到！</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">//爆！</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//炸！</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.98,words:894},y:"a",t:"javaweb - Lombok1",O:-.7491}}],["/code/javaweb/4-Mybatis/javaweb11.html",{loader:()=>n.e(6702).then(n.bind(n,4479)),meta:{d:17494272e5,l:"2025年6月9日",c:["code"],g:["javaweb","mybatis"],e:"<h2>Mybatis1</h2>\n<p>在前面JDBC的学习中，虽然我们能够通过JDBC来连接和操作数据库，但是哪怕只是完成一个SQL语句的执行，都需要编写大量的代码，更不用说如果我还需要进行实体类映射，将数据转换为我们可以直接操作的实体类型，JDBC很方便，但是还不够方便，我们需要一种更加简洁高效的方式来和数据库进行交互。</p>\n<p><strong>再次强调：</strong> 学习厉害的框架或是厉害的技术，并不是为了一定要去使用它，而是它们能够使得我们在不同的开发场景下，合理地使用这些技术，以灵活地应对需要解决的问题。</p>\n<figure><figcaption>image-20230306163528771</figcaption></figure>",r:{minutes:3.53,words:1060},y:"a",t:"javaweb - Mybatis1",O:-.7489}}],["/code/javaweb/4-Mybatis/javaweb12.html",{loader:()=>n.e(2359).then(n.bind(n,3120)),meta:{d:17495136e5,l:"2025年6月10日",c:["code"],g:["javaweb","mybatis"],e:'<h2>Mybatis2</h2>\n<h3>初次使用 Mybatis</h3>\n<p>文档网站：<a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html" target="_blank" rel="noopener noreferrer">https://mybatis.org/mybatis-3/zh_CN/configuration.html</a></p>\n<p>我们需要导入Mybatis的依赖，依赖导入完成后，编写<code>Mybatis</code>的配置文件(通过一个<code>XML</code>文件去配置)</p>',r:{minutes:3.74,words:1123},y:"a",t:"javaweb - Mybatis2",O:-.7488}}],["/code/javaweb/4-Mybatis/javaweb13.html",{loader:()=>n.e(3136).then(n.bind(n,3854)),meta:{d:17495136e5,l:"2025年6月10日",c:["code"],g:["javaweb","mybatis"],e:'<h2>Mybatis详解1</h2>\n<p>由于<code>SqlSessionFactory</code>一般只需要创建一次，因此我们可以创建一个工具类来集中创建<code>SqlSession</code>，这样会更加方便一些：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtil</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">//在类加载时就进行创建</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>\n    <span class="token keyword">static</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 获取一个新的会话\n     * <span class="token keyword">@param</span> <span class="token parameter">autoCommit</span> 是否开启自动提交（跟JDBC是一样的，如果不自动提交，则会变成事务操作）\n     * <span class="token keyword">@return</span> SqlSession对象\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSession</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span>autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:6.93,words:2080},y:"a",t:"javaweb - Mybatis3",O:-.7487}}],["/code/javaweb/4-Mybatis/javaweb14.html",{loader:()=>n.e(4865).then(n.bind(n,9610)),meta:{d:17495136e5,l:"2025年6月10日",c:["code"],g:["javaweb","mybatis"],e:'<h2>Mybatis详解2</h2>\n<h3>指定构造方法</h3>\n<p>(一般不咋用)\n通过前面的学习，我们已经知道如何使用Mybatis进行各种查询操作。我们知道，<code>Mybatis</code>在执行完查询语句后，会自动将查询的结果转换为我们所需要的实体类</p>\n<p>实际上<code>Mybatis</code>一开始会通过我们实体类<strong>默认的无参构造</strong>得到一个<strong>最初的对象</strong>，然后通过<strong>反射进行赋值</strong>，我们可以手动编写一个带调试信息的无参构造：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"????"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:6.54,words:1962},y:"a",t:"javaweb - Mybatis4",O:-.7486}}],["/code/javaweb/4-Mybatis/javaweb15.html",{loader:()=>n.e(7434).then(n.bind(n,7892)),meta:{d:17499456e5,l:"2025年6月15日",c:["code"],g:["javaweb","mybatis"],e:'<h2>Mybatis详解3</h2>\n<h3>复杂查询</h3>\n<h4>一对一查询</h4>\n<p>首先来看最简单的一对一查询，假设我们每个用户都有一个自己的详细信息表：</p>\n<figure><figcaption>alt text</figcaption></figure>\n<p>这里的id与用户id一致，作为用户id的逻辑外键，表示对应用户的详细信息。对应的实体类为：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetail</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> description<span class="token punctuation">;</span>\n    <span class="token class-name">Date</span> register<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token class-name">UserDetail</span> detail<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:6.29,words:1887},y:"a",t:"javaweb - Mybatis5",O:-.7485}}],["/code/javaweb/4-Mybatis/javaweb16.html",{loader:()=>n.e(531).then(n.bind(n,8657)),meta:{d:17499456e5,l:"2025年6月15日",c:["code"],g:["javaweb","mybatis"],e:'<h2>Mybatis详解4</h2>\n<h3>DML 操作</h3>\n<p>前面我们介绍了<strong>查询操作</strong>，我们接着来看修改相关操作(<strong>增、删、改</strong>)。</p>\n<p><code>Mybatis</code>为我们的<code>DML</code>操作提供了几个预设方法：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:3.86,words:1159},y:"a",t:"javaweb - Mybatis6",O:-.7484}}],["/code/javaweb/4-Mybatis/javaweb17.html",{loader:()=>n.e(1948).then(n.bind(n,1070)),meta:{d:17501184e5,l:"2025年6月17日",c:["code"],g:["javaweb","mybatis"],e:'<h2>Mybatis详解5</h2>\n<h3>动态SQL</h3>\n<h4>批处理 <code>ExecutorType.BATCH</code></h4>\n<p>在之前JDBC讲解的时候，我们就提到过批量执行语句的问题，当我们要执行很多条语句时，可能会一个一个地提交：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//现在要求把下面所有用户都插入到数据库中</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"小刚"</span><span class="token punctuation">,</span> <span class="token string">"小强"</span><span class="token punctuation">,</span> <span class="token string">"小王"</span><span class="token punctuation">,</span> <span class="token string">"小美"</span><span class="token punctuation">,</span> <span class="token string">"小黑子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//使用for循环来一个一个执行insert语句</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"insert into user (name, age) values (\'"</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">"\', 18)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:5.38,words:1613},y:"a",t:"javaweb - Mybatis7",O:-.7481}}],["/code/javaweb/4-Mybatis/javaweb18.html",{loader:()=>n.e(9117).then(n.bind(n,1414)),meta:{d:17501184e5,l:"2025年6月17日",c:["code"],g:["javaweb","mybatis"],e:"<h2>Mybatis详解6</h2>\n<h3>缓存机制</h3>\n<p>其实缓存机制我们在之前学习IO流的时候已经提及过了，我们可以提前将一部分内容放入缓存，下次需要获取数据时，就可以直接从缓存中读取，这样的话相当于直接从内存中获取而不是再去向数据库索要数据，效率会更高，缓存的概念在我们后续的学习中还会经常遇见，它也是现在提高数据获取效率的良好解决方案。</p>\n<p>Mybatis为了查询效率，同样内置了一个缓存机制，我们在查询时，如果Mybatis缓存中存在数据，那么我们就可以直接从缓存中获取，而不是再去向数据库进行请求，节省性能开销。</p>\n<figure><figcaption>alt text</figcaption></figure>",r:{minutes:7.42,words:2226},y:"a",t:"javaweb - Mybatis8",O:-.748}}],["/code/javaweb/4-Mybatis/javaweb19.html",{loader:()=>n.e(6070).then(n.bind(n,9779)),meta:{d:17501184e5,l:"2025年6月17日",c:["code"],g:["javaweb","mybatis"],e:"<h2>Mybatis详解7</h2>\n<h3>使用注解开发</h3>\n<p>在之前的学习中，我们已经体验到<code>Mybatis</code>为我们带来的便捷了</p>\n<p>我们只需要编写对应的映射器，并将其绑定到一个接口上，即可直接通过该接口执行我们的SQL语句，极大的简化了我们之前JDBC那样的代码编写模式。</p>\n<p>那么，能否<strong>实现无需XML映射器配置</strong>，而是直接使用注解在接口上进行配置呢？</p>\n<p>我们可以直接删除掉所有的<code>Mapper.xml</code>文件了，只保留<code>Mapper</code>相关的接口。</p>",r:{minutes:7.07,words:2121},y:"a",t:"javaweb - Mybatis9",O:-.7479}}],["/code/javaweb/5-JUL/javaweb20.html",{loader:()=>n.e(9414).then(n.bind(n,6763)),meta:{d:17515872e5,l:"2025年7月4日",c:["code"],g:["javaweb","JUL"],e:'<h2>JUL日志系统</h2>\n<p>JDK为我们提供了一个自带的日志框架，位于<code>java.util.logging</code>包下，我们可以使用此框架来实现日志的规范化打印，使用起来非常简单：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 首先获取日志打印器，名称随意</span>\n        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 调用info来输出一个普通的信息，直接填写字符串即可</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是普通的日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.5,words:1049},y:"a",t:"javaweb - JUL日志1",O:-.7478}}],["/code/javaweb/5-JUL/javaweb21.html",{loader:()=>n.e(9821).then(n.bind(n,1755)),meta:{d:175176e7,l:"2025年7月6日",c:["code"],g:["javaweb","JUL"],e:"<h2>JUL日志系统2</h2>\n<h3>日志核心内容</h3>\n<h4>核心部分 <code>Handler</code></h4>\n<p>日志打印的核心部分：<code>Handler</code>，它用于处理我们的日志内容打印</p>\n<p><code>ConsoleHandler</code> | <code>FileHandler</code> | <code>SocketHandler</code></p>\n<p>JDK为我们提供了很多种类的<code>Handler</code>用于多种不同类型的日志打印，比较常见的就是打印到控制台，当然我们也可以打印到一个日志文件中，名字一般为<code>xxx.log</code>这种格式。</p>",r:{minutes:2.57,words:771},y:"a",t:"javaweb - JUL日志2",O:-.7478}}],["/code/javaweb/5-JUL/javaweb22.html",{loader:()=>n.e(760).then(n.bind(n,9527)),meta:{d:175176e7,l:"2025年7月6日",c:["code"],g:["javaweb","JUL"],e:'<h2>JUL日志系统3</h2>\n<h3>日志继承关系</h3>\n<h4><code>RootLogger</code></h4>\n<p>JUL中Logger之间存在父子关系，这种父子关系类似于继承，我们可以通过Logger的<code>getParent</code>方法来获取其父Logger对象：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:1.8,words:541},y:"a",t:"javaweb - JUL日志3",O:-.7477}}],["/code/javaweb/5-JUL/javaweb23.html",{loader:()=>n.e(687).then(n.bind(n,2996)),meta:{d:175176e7,l:"2025年7月6日",c:["code"],g:["javaweb","JUL"],e:'<h2>JUL日志系统4</h2>\n<h3>日志默认配置</h3>\n<h4><code>Properties</code> 格式</h4>\n<p><code>Properties</code>格式的文件是Java的一种配置文件，我们之前在学习Mybatis的时候学习了XML，但是我们发现XML配置文件读取实在是太麻烦，那么能否有一种简单一点的配置文件呢？</p>\n<p>此时就可以使用<code>Properties</code>文件，它的格式如下：</p>\n<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">Test</span>\n<span class="token key attr-name">desc</span><span class="token punctuation">=</span><span class="token value attr-value">Description</span>\n</code></pre></div>',r:{minutes:2.42,words:727},y:"a",t:"javaweb - JUL日志4",O:-.7476}}],["/code/javaweb/5-JUL/javaweb24.html",{loader:()=>n.e(1394).then(n.bind(n,9360)),meta:{d:175176e7,l:"2025年7月6日",c:["code"],g:["javaweb","JUL"],e:'<h2>JUL日志系统5</h2>\n<h3>自定义日志格式</h3>\n<p>新建一个类，来继承<code>Formatter</code>，通过修改对应的<code>format</code>函数来实现自定义</p>\n<p>每一个<code>Handler</code>都可以配置一个对应的<code>Formatter</code>来决定日志打印的格式，除了官方为我们提供的两种默认格式外，我们也可以自定义我们想要的日志打印格式。</p>\n<p>我们只需要继承<code>Formatter</code>类，就可以创建一个自定义的日志格式处理逻辑了：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFormatter</span> <span class="token keyword">extends</span> <span class="token class-name">Formatter</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LogRecord</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">"我是自定义日志格式"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.19,words:956},y:"a",t:"javaweb - JUL日志5",O:-.7475}}],["/code/javaweb/6-JUnit/javaweb25.html",{loader:()=>n.e(7433).then(n.bind(n,1029)),meta:{d:17519328e5,l:"2025年7月8日",c:["code"],g:["javaweb","JUL"],e:'<h2>JUnit单元测试1</h2>\n<h3>单元测试</h3>\n<p>在很多情况下，我们的项目可能会很庞大，不可能每次都去完整地启动一个项目来测试某一个功能，这样显然会降低我们的开发效率，因此，我们需要使用单元测试来帮助我们针对于某个功能或是某个模块单独运行代码进行测试，而不是启动整个项目，比如：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是第一个功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是第二个功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是第三个功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:4.3,words:1291},y:"a",t:"javaweb - JUnit1",O:-.7474}}],["/code/javaweb/6-JUnit/javaweb26.html",{loader:()=>n.e(7844).then(n.bind(n,3909)),meta:{d:17519328e5,l:"2025年7月8日",c:["code"],g:["javaweb","JUL"],e:"<h2>JUnit单元测试2</h2>\n<h3>断言工具 <code>Assertions</code></h3>\n<p>JUnit提供了非常多的断言操作，相比JUnit 4，它们都被封装在一个新的<code>Assertions</code>类中</p>\n<p>这些断言操作基本上都是用于判断某个测试结果是否符合我们的预期情况</p>\n<h4>值判断 <code>Assertions.assertEquals</code></h4>\n<p>其中最简单的就是判断结果是否等于某个值</p>\n<p><code>Assertions.assertEquals(expected, actual, message)</code></p>",r:{minutes:4.86,words:1459},y:"a",t:"javaweb - JUnit2",O:-.7473}}],["/code/javaweb/6-JUnit/javaweb27.html",{loader:()=>n.e(9339).then(n.bind(n,3013)),meta:{d:17519328e5,l:"2025年7月8日",c:["code"],g:["javaweb","JUL"],e:'<h2>JUnit单元测试3</h2>\n<h3>生命周期</h3>\n<p><code>@BeforeAll</code> <code>@AferAll</code> <code>@BeforeEach</code> <code>@AfterEach</code></p>\n<p>其中 <code>@BeforeAll</code> 必须是<code>static</code>方法</p>\n<p>我们可以自由设定某些操作在测试开始之前或之后执行，比如测试前的准备工作或是测试后的收尾工作：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是测试方法1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@BeforeAll</span>  <span class="token comment">//使用BeforeAll必须为static方法</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是测试前必须要执行的准备工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:7.17,words:2152},y:"a",t:"javaweb - JUnit2",O:-.7472}}],["/code/javaweb/7-Maven/maven1.html",{loader:()=>n.e(9030).then(n.bind(n,1111)),meta:{d:17519328e5,l:"2025年7月8日",c:["code"],g:["javaweb","Maven"],e:'<h2>Maven1 - 简介与项目结构</h2>\n<h3>简介</h3>\n<p>Maven 翻译为"专家"、"内行"，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</p>\n<p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。</p>\n<p>Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。</p>',r:{minutes:3.35,words:1006},y:"a",t:"Maven1 - 简介与项目结构",O:-.747}}],["/code/javaweb/7-Maven/maven2.html",{loader:()=>n.e(4975).then(n.bind(n,9283)),meta:{d:17521056e5,l:"2025年7月10日",c:["code"],g:["javaweb","Maven"],e:'<h2>Maven2</h2>\n<h3>Maven依赖导入</h3>\n<p>我们尝试使用Maven来帮助我们快速导入依赖，我们需要导入之前的JDBC驱动依赖、JUnit依赖、Mybatis依赖、Lombok依赖，那么如何使用Maven来管理依赖呢？</p>\n<p>我们可以创建一个<code>dependencies</code>节点：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n    //里面填写的就是所有的依赖\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:2.77,words:830},y:"a",t:"Maven2 - 依赖导入",O:-.7469}}],["/code/javaweb/7-Maven/maven3.html",{loader:()=>n.e(7240).then(n.bind(n,8298)),meta:{d:17521056e5,l:"2025年7月10日",c:["code"],g:["javaweb","Maven"],e:"<h2>Maven3 - 依赖作用域</h2>\n<h3>Maven依赖作用域</h3>\n<p>除了三个基本的属性用于定位坐标外，依赖还可以添加以下属性：</p>\n<ul>\n<li><strong>type</strong>：依赖的类型，对于项目坐标定义的packaging。\n大部分情况下，该元素不必声明，其默认值为jar</li>\n<li><strong>scope</strong>：依赖的范围（作用域，着重讲解）</li>\n<li><strong>optional</strong>：标记依赖是否可选</li>\n<li><strong>exclusions</strong>：用来排除传递性依赖（一个项目有可能依赖于其他项目，就像我们的项目，如果别人要用我们的项目作为依赖，那么就需要一起下载我们项目的依赖，如Lombok）</li>\n</ul>",r:{minutes:4.19,words:1258},y:"a",t:"Maven3 - 依赖作用域",O:-.7469}}],["/code/javaweb/7-Maven/maven4.html",{loader:()=>n.e(2505).then(n.bind(n,4268)),meta:{d:17521056e5,l:"2025年7月10日",c:["code"],g:["javaweb","Maven"],e:'<h2>Maven4 - 导入本地依赖</h2>\n<h3>Maven项目导入自己项目 <code>mvn install</code></h3>\n<p>如何在其他项目中引入我们自己编写的Maven项目作为依赖使用。</p>\n<p>这里我们创建一个用于测试的简单项目：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>\n         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>\n         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>TestMaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n\n    ...\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:3.13,words:939},y:"a",t:"Maven4 - 导入本地依赖",O:-.7467}}],["/code/javaweb/7-Maven/maven5.html",{loader:()=>n.e(6370).then(n.bind(n,5765)),meta:{d:17521056e5,l:"2025年7月10日",c:["code"],g:["javaweb","Maven"],e:"<h2>Maven5 - 继承、多模块 + 测试和打包</h2>\n<h3>Maven继承和多模块</h3>\n<h4>继承</h4>\n<p><strong>一个Maven项目可以继承自另一个Maven项目</strong></p>\n<p>比如多个子项目都需要父项目的依赖，我们就可以使用继承关系来快速配置。</p>\n<p>在我们学习到SpringBoot或是SpringCloud开发时，很多项目往往都会采用这种<strong>多模块子项目</strong>的形式的去编写，来更加合理地对项目中代码进行职责划分。</p>\n<p>(在一个项目内部在创建一个项目就行)\n要创建一个子项目非常简单，我们只需右键左侧栏，新建模块，来创建一个子项目：</p>",r:{minutes:5.83,words:1749},y:"a",t:"Maven5 - 继承和多模块 + 测试和打包",O:-.7467}}],["/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo.html",{loader:()=>n.e(4204).then(n.bind(n,3727)),meta:{d:17529696e5,l:"2025年7月20日",c:["code"],g:["javaweb"],e:"<h2>网络基础1</h2>\n<p>在计算机网络（谢希仁 第七版 第264页）中，是这样描述万维网的：</p>\n<blockquote>\n<p>万维网（World Wide Web）并非是某种特殊的计算机网络，万维网是一个大规模的联机式信息储藏所，英文简称<code>Web</code>，万维网用<strong>链接</strong>的方法，能够非常方便地从互联网上的一个站点访问另一个站点，从而主动地按需求获取丰富的信息。\n万维网以客户服务器的方式工作，浏览器就是安装在用户主机上的万维网客户程序，万维网文档所驻留的主机则运行服务器程序，因此这台主机也称为万维网服务器。<strong>客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的万维网文档</strong>，在一个客户程序主窗口上显示出的万维网文档称为页面。</p>\n</blockquote>",r:{minutes:4.06,words:1219},y:"a",t:"Content - 网络基础1",O:-.7466}}],["/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo2.html",{loader:()=>n.e(5788).then(n.bind(n,6082)),meta:{d:17529696e5,l:"2025年7月20日",c:["code"],g:["javaweb"],e:'<h2>网络基础2</h2>\n<h3>Tomact 安装</h3>\n<p>Tomcat（汤姆猫）就是一个典型的Web应用服务器软件，通过运行Tomcat服务器，我们就可以快速部署我们的Web项目，并交由Tomcat进行管理，我们只需要直接通过浏览器访问我们的项目即可。</p>\n<p>那么首先，我们需要进行一个简单的环境搭建，我们需要在Tomcat官网下载最新的Tomcat服务端程序：<a href="https://tomcat.apache.org/download-10.cgi" target="_blank" rel="noopener noreferrer">https://tomcat.apache.org/download-10.cgi</a></p>',r:{minutes:4.74,words:1421},y:"a",t:"Content - Tomact",O:-.7465}}],["/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo3.html",{loader:()=>n.e(9971).then(n.bind(n,5241)),meta:{d:17529696e5,l:"2025年7月20日",c:["code"],g:["javaweb"],e:"<h2>网络基础3</h2>\n<h3>Servlet</h3>\n<p>Servlet 是 Java EE的一个标准，大部分的Web服务器都支持此标准，包括Tomcat，就像之前的JDBC一样，由官方定义了一系列接口，而具体实现由我们来编写，最后交给Web服务器（如Tomcat）来运行我们编写的 Servlet。</p>\n<p>我们可以通过实现 Servlet 来进行动态网页响应，使用Servlet，不再是直接由Tomcat 服务器发送我们编写好的静态网页内容（HTML文件），而是由我们通过Java 代码进行动态拼接的结果，它能够很好地实现动态网页的返回。</p>\n<p>当然，Servlet并不是专用于HTTP协议通信，也可以用于其他的通信，但是一般都是用于 HTTP。</p>",r:{minutes:8.17,words:2451},y:"a",t:"Content - Servlet1",O:-.7464}}],["/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo4.html",{loader:()=>n.e(9262).then(n.bind(n,1800)),meta:{d:17531424e5,l:"2025年7月22日",c:["code"],g:["javaweb"],e:'<h2>Servlet2</h2>\n<h3>使用POST请求完成登陆</h3>\n<p>一般通过 <code>Post</code> 操作来向服务器传输数据</p>\n<p>我们需要修改一下我们的<code>Servlet</code>，让其能够接收一个POST请求：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:4.92,words:1475},y:"a",t:"Content - Servlet2",O:-.7463}}],["/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo5.html",{loader:()=>n.e(5605).then(n.bind(n,2012)),meta:{d:17531424e5,l:"2025年7月22日",c:["code"],g:["javaweb"],e:'<h2>Servlet3</h2>\n<h3>重定向与请求转发</h3>\n<h4>重定向 302 <code>resp.sendRedirect()</code></h4>\n<p>当我们希望用户登录完成之后，直接跳转到网站的首页，那么这个时候，我们就可以使用<strong>重定向</strong>来完成。</p>\n<p>当浏览器收到一个重定向的响应时，会按照重定向响应给出的地址，再次向此地址发出请求。</p>\n<p>实现重定向很简单，只需要调用一个方法即可</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:4.7,words:1410},y:"a",t:"Content - Servlet3",O:-.7462}}],["/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo6.html",{loader:()=>n.e(1808).then(n.bind(n,2704)),meta:{d:17533152e5,l:"2025年7月24日",c:["code"],g:["javaweb"],e:'<h2>Cookie</h2>\n<p>Cookie, 可以在浏览器中保存一些信息，并且在下次请求时，请求头中会携带这些信息。</p>\n<h3>简单使用</h3>\n<p>在服务器端发送 Cookie 的请求头</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"yyds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nresp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>\nresp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:6.35,words:1904},y:"a",t:"Content - Cookie + Session",O:-.7461}}],["/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo7.html",{loader:()=>n.e(8551).then(n.bind(n,597)),meta:{d:17533152e5,l:"2025年7月24日",c:["code"],g:["javaweb"],e:"<h2>Filter</h2>\n<p>有了Session之后，我们就可以很好地控制用户的登陆验证了，只有授权的用户，才可以访问一些页面，但是我们需要一个一个去进行配置，还是太过复杂，能否一次性地过滤掉没有登录验证的用户呢？</p>\n<p>过滤器相当于在所有访问前加了一堵墙，来自浏览器的所有访问请求都会首先经过过滤器，只有过滤器允许通过的请求，才可以顺利地到达对应的<code>Servlet</code></p>\n<p>而过滤器不允许的通过的请求，我们可以自由地进行控制是否进行重定向或是请求转发。并且过滤器可以添加很多个，就相当于添加了很多堵墙，我们的请求只有穿过层层阻碍，才能与Servlet相拥，像极了爱情。</p>",r:{minutes:4.15,words:1245},y:"a",t:"Content - Filter + Listener",O:-.746}}],["/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo8.html",{loader:()=>n.e(1266).then(n.bind(n,7968)),meta:{d:17533152e5,l:"2025年7月24日",c:["code"],g:["javaweb"],e:"<h2>Tomcat类加载机制</h2>\n<p>Tomcat到底是如何加载和运行我们的Web应用程序的。</p>\n<p>Tomcat服务器既然要同时运行多个Web应用程序，那么就必须要实现不同应用程序之间的隔离</p>\n<p>也就是说，Tomcat需要分别去加载不同应用程序的类以及依赖，还必须保证应用程序之间的类无法相互访问</p>\n<p>而传统的类加载机制无法做到这一点，同时每个应用程序都有自己的依赖，如果两个应用程序使用了同一个版本的同一个依赖，那么还有必要去重新加载吗，带着诸多问题，Tomcat服务器编写了一套自己的类加载机制。</p>\n<figure><figcaption>img</figcaption></figure>",r:{minutes:2.72,words:817},y:"a",t:"Content - Tomact类加载机制",O:-.746}}],["/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring1.html",{loader:()=>n.e(8194).then(n.bind(n,7955)),meta:{d:17542656e5,l:"2025年8月4日",c:["code"],g:["javassm","Spring"],e:'<p>SSM（Spring+SpringMVC+Mybatis）</p>\n<h2>Spring 简介</h2>\n<p>Spring是一个框架(文档：<a href="https://docs.spring.io/spring-framework/docs/6.0.10/reference/html/core.html#spring-core" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-framework/docs/6.0.10/reference/html/core.html#spring-core</a>)</p>',r:{minutes:8.17,words:2452},y:"a",t:"Javassm - Spring1",O:-.6}}],["/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring2.html",{loader:()=>n.e(9467).then(n.bind(n,2271)),meta:{d:17542656e5,l:"2025年8月4日",c:["code"],g:["javassm","Spring"],e:'<h2>IoC理论基础 2</h2>\n<h3>Bean注册与配置</h3>\n<p>详细了解一下如何向<code>Spring</code>注册<code>Bean</code>以及<code>Bean</code>的相关配置。</p>\n<p>实际上我们的配置文件<strong>可以有很多个</strong>，并且这些配置文件是可以相互导入的：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:12.85,words:3854},y:"a",t:"Javassm - Spring2 (Bean注册与配置 + 依赖注入)",O:-.5999}}],["/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring3.html",{loader:()=>n.e(5956).then(n.bind(n,2791)),meta:{d:1754352e6,l:"2025年8月5日",c:["code"],g:["javassm","Spring"],e:'<h2>IoC理论基础 3</h2>\n<h3>Bean生命周期与继承</h3>\n<h4>初始化 <code>init-method</code> 和 销毁 <code>destroy-method</code></h4>\n<p>我们可以为<code>Bean</code>指定初始化方法和销毁方法，以便在对象创建和被销毁时执行一些其他的任务</p>\n<p>通过<code>init-method</code>和<code>destroy-method</code>属性来指定：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.bean.Student<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre></div>',r:{minutes:3.92,words:1175},y:"a",t:"Javassm - Spring3 (Bean生命周期与继承)",O:-.5998}}],["/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring4.html",{loader:()=>n.e(1901).then(n.bind(n,3769)),meta:{d:17544384e5,l:"2025年8月6日",c:["code"],g:["javassm","Spring"],e:'<h2>IoC理论基础 4</h2>\n<h3>工厂模式和工厂Bean</h3>\n<p>默认情况下，容器会调用Bean对应类型的构造方法进行对象创建</p>\n<p>但是在某些时候，我们可能不希望外界使用类的构造方法完成对象创建，比如在工厂方法设计模式中</p>\n<p>我们更希望 Spring 不要直接利用反射机制通过构造方法创建Bean对象, 而是利用反射机制先找到<strong>对应的工厂类</strong>，然后<strong>利用工厂类去生成需要的Bean对象</strong>：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我被构造了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.29,words:987},y:"a",t:"Javassm - Spring4 (工厂模式和工厂Bean)",O:-.5997}}],["/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring5.html",{loader:()=>n.e(7158).then(n.bind(n,2081)),meta:{d:17544384e5,l:"2025年8月6日",c:["code"],g:["javassm","Spring"],e:'<h2>IoC理论基础 5</h2>\n<h3>使用注解开发</h3>\n<p>前面我们已经完成了大部分的配置文件学习，但是我们发现，使用配置文件进行配置，似乎有点复杂</p>\n<p>可以想象一下，如果我们的项目非常庞大，整个配置文件将会充满Bean配置，并且会继续庞大下去。</p>\n<p>所以可以用注解来进行配置</p>\n<h4><code>AnnotationConfigApplicationContext()</code></h4>\n<p>既然现在要使用注解来进行开发，那么我们就删掉之前的xml配置文件吧，我们来看看使用注解能有多方便。</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:11.06,words:3318},y:"a",t:"Javassm - Spring5",O:-.5996}}],["/code/java_ssm/Spring/2-Spring%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/spring6.html",{loader:()=>n.e(6079).then(n.bind(n,8814)),meta:{d:17544384e5,l:"2025年8月6日",c:["code"],g:["javassm","Spring"],e:"<h2>Spring高级特性1</h2>\n<h3>Bean Aware</h3>\n<p>在Spring中提供了一些以<code>Aware</code>结尾的接口，实现了<code>Aware</code>接口的<code>bean</code>在被初始化之后，可以获取相应资源。</p>\n<p>Aware的中文意思为<strong>感知</strong>。</p>\n<p>简单来说，他就是一个标识，实现此接口的类会获得某些感知能力，Spring容器会<strong>在Bean被加载时</strong>，根据类实现的感知接口，<strong>会调用类中实现的对应感知方法</strong>。</p>",r:{minutes:6.48,words:1945},y:"a",t:"Javassm - Spring高级特性 (Aware接口+任务调度+监听器)",O:-.5995}}],["/code/java_ssm/Spring/3-AOP/spring7.html",{loader:()=>n.e(3064).then(n.bind(n,4157)),meta:{d:17549568e5,l:"2025年8月12日",c:["code"],g:["javassm","Spring","SpringEL"],e:"<h2>SpringEL表达式</h2>\n<p>SpEL 是一种强大，简洁的装配 Bean 的方式，它可以通过运行期间执行的表达式将值装配到我们的属性或构造函数当中，更可以调用 JDK 中提供的静态常量，获取外部 Properties 文件中的的配置。</p>\n<h3>外部属性注入</h3>\n<p>我们可以将一些外部配置文件中的配置进行读取，并完成注入。</p>\n<p>创建以<code>.properties</code>结尾的配置文件，这种配置文件格式很简单，类似于Map，需要一个Key和一个Value，中间使用等号进行连接</p>\n<p>这里我们在resource目录下创建一个<code>test.properties</code>文件：</p>",r:{minutes:7.32,words:2195},y:"a",t:"Javassm - SpringEL表达式1",O:-.5994}}],["/code/java_ssm/Spring/3-AOP/spring8.html",{loader:()=>n.e(5633).then(n.bind(n,1122)),meta:{d:17553024e5,l:"2025年8月16日",c:["code"],g:["javassm","Spring","SpringEL"],e:"<h2>AOP面向切片</h2>\n<p>AOP（Aspect Oriented Programming）思想实际上就是：在运行时，<strong>动态地将代码切入</strong>到类的指定方法、指定位置上。</p>\n<p>也就是说，我们可以使用<code>AOP</code>来帮助我们在<strong>方法执行前或执行之后，做一些额外的操作</strong>，实际上，它就是代理！</p>\n<p>通过AOP我们可以在保证原有业务不变的情况下，添加额外的动作</p>\n<p>比如我们的某些方法执行完成之后，需要打印日志，那么这个时候，我们就可以使用AOP来帮助我们完成，它可以批量地为这些方法添加动作。可以说，它相当于将我们原有的方法，在<strong>不改变源代码的基础上进行了增强处理</strong>。</p>",r:{minutes:11.64,words:3491},y:"a",t:"Javassm - AOP1",O:-.5994}}],["/code/java_ssm/Spring/3-AOP/spring9.html",{loader:()=>n.e(7690).then(n.bind(n,7281)),meta:{d:17553024e5,l:"2025年8月16日",c:["code"],g:["javassm","Spring","SpringEL"],e:'<h2>AOP面向切片2</h2>\n<h3>使用接口实现AOP</h3>\n<p>我们来看看如何使用<code>Advice</code>接口实现AOP。</p>\n<p>它与我们之前学习的动态代理更接近一些，比如在方法开始执行之前或是执行之后会去调用我们实现的接口，首先我们需要将一个类实现<code>Advice</code>接口，只有实现此接口，才可以被通知</p>\n<p>比如我们这里使用<code>MethodBeforeAdvice</code>表示是一个在方法执行之前的动作：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentAOP</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Advice实现AOP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:4.21,words:1262},y:"a",t:"Javassm - AOP2",O:-.5994}}],["/code/java_ssm/Spring/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/spring10.html",{loader:()=>n.e(5084).then(n.bind(n,6711)),meta:{d:1755648e6,l:"2025年8月20日",c:["code"],g:["javassm","Spring","SpringEL"],e:"<h2>数据库框架整合1</h2>\n<p>学习了Spring之后，我们已经了解如何将一个类作为Bean交由IoC容器管理，这样，我们就可以通过更方便的方式来使用Mybatis框架，我们可以直接把SqlSessionFactory、Mapper交给Spring进行管理，并且可以通过注入的方式快速地使用它们。</p>\n<h3>数据源 <code>DataSource</code>接口</h3>\n<p>在之前，我们如果需要创建一个JDBC的连接，那么必须使用<code>DriverManager.getConnection()</code>来创建连接，连接建立后，通过创建<code>Statement</code>对象，就可以进行数据库操作。</p>",r:{minutes:12.12,words:3635},y:"a",t:"Javassm - 数据库框架整合1",O:-.5993}}],["/code/java_ssm/Spring/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/spring11.html",{loader:()=>n.e(3667).then(n.bind(n,8797)),meta:{d:17557344e5,l:"2025年8月21日",c:["code"],g:["javassm","Spring","SpringEL"],e:'<h2>数据库框架整合2</h2>\n<h3>整合Mybatis框架</h3>\n<p>通过了解数据源，我们已经清楚，Mybatis实际上是在使用自己编写的数据源（数据源实现其实有很多）默认使用的是池化数据源，它预先存储了很多的连接对象。</p>\n<p>如何将Mybatis与Spring更好的结合</p>\n<h4>使用例子</h4>\n<p>比如我们现在希望将<code>SqlSessionFactory</code>交给IoC容器进行管理，而不是我们自己创建工具类来管理（我们之前一直都在使用工具类管理和创建会话）</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 这两个依赖不用我说了吧 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 注意，对于Spring 6.0来说，版本需要在3.5以上 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- Mybatis针对于Spring专门编写的支持框架 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- Spring的JDBC支持框架 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:5.79,words:1737},y:"a",t:"Javassm - 数据库框架整合2",O:-.5991}}],["/code/java_ssm/Spring/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/spring12.html",{loader:()=>n.e(2586).then(n.bind(n,200)),meta:{d:17557344e5,l:"2025年8月21日",c:["code"],g:["javassm","Spring","SpringEL"],e:"<h2>数据库框架整合3</h2>\n<h3>Mybatis事务管理</h3>\n<p>通过将对应的Bean类型注册到容器中，就能更加方便的去使用Mapper</p>\n<p>接着来看Spring的事务控制。</p>\n<h4>事务机制回顾</h4>\n<p>回顾一下事务机制。首先事务遵循一个<code>ACID</code>原则：</p>\n<ul>\n<li>原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</li>\n<li>一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。类比银行转账，从一个账号扣款，另一个账号增款，必须保证总金额不变。</li>\n<li>隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。类比多个人同时编辑同一文档，每个人看到的结果都是独立的，不会受其他人的影响，不过难免会存在冲突。</li>\n<li>持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。类比写入硬盘的文件，即使关机重启，文件仍然存在。</li>\n</ul>",r:{minutes:13.07,words:3921},y:"a",t:"Javassm - 数据库框架整合2",O:-.599}}],["/code/java_ssm/Spring/5-JUnit%E6%95%B4%E5%90%88/spring10.html",{loader:()=>n.e(5084).then(n.bind(n,4794)),meta:{d:17557344e5,l:"2025年8月21日",c:["code"],g:["javassm","Spring","SpringEL"],e:'<h2>JUnit整合</h2>\n<p>集成JUnit测试</p>\n<p>既然使用了Spring，那么怎么集成到JUnit中进行测试呢，首先大家能够想到的肯定是：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">TestConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">TestService</span> service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">TestService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        service<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:1.34,words:401},y:"a",t:"Javassm - JUnit整合",O:-.5989}}],["/code/java_ssm/Spring/6-%E5%8E%9F%E7%90%86/spring11.html",{loader:()=>n.e(3667).then(n.bind(n,5742)),meta:{d:17559936e5,l:"2025年8月24日",c:["code"],g:["javassm","Spring"],e:"<h3>Bean工厂与Bean定义</h3>\n<p>实际上我们之前的所有操作都离不开一个东西，那就是IoC容器，那么它到底是如何实现呢？这一部分我们将详细介绍，首先我们大致了解一下ApplicationContext的加载流程：</p>\n<figure><figcaption>alt text</figcaption></figure>\n<figure><figcaption>alt text</figcaption></figure>\n<h4><code>BeanFactory</code></h4>\n<p>首先，容器既然要管理Bean，那么肯定需要一个完善的管理机制</p>\n<p>实际上，对Bean的管理都是依靠BeanFactory在进行，顾名思义BeanFactory就是对Bean进行生产和管理的工厂，我们可以尝试自己创建和使用BeanFactory对象：</p>",r:{minutes:10.23,words:3068},y:"a",t:"Javassm - Bean相关分析",O:-.5989}}],["/code/java_ssm/Spring/6-%E5%8E%9F%E7%90%86/spring12.html",{loader:()=>n.e(2586).then(n.bind(n,3785)),meta:{d:17562528e5,l:"2025年8月27日",c:["code"],g:["javassm","Spring"],e:"<h3>后置处理器与AOP</h3>\n<h4><code>PostProcessor</code></h4>\n<p>介绍一下<code>PostProcessor</code>，它其实是Spring提供的一种后置处理机制</p>\n<p>可以让我们能够插手<code>Bean</code>、<code>BeanFactory</code>、<code>BeanDefinition</code>的创建过程，相当于进行一个最终的处理，而最后得到的结果（比如Bean实例、Bean定义等）就是经过后置处理器返回的结果</p>\n<p>它是整个加载过程的最后一步。</p>\n<p>而AOP机制正是通过它来实现</p>",r:{minutes:5.23,words:1568},y:"a",t:"Javassm - 后置处理器与AOP",O:-.5989}}],["/code/java_ssm/Spring/6-%E5%8E%9F%E7%90%86/spring13.html",{loader:()=>n.e(529).then(n.bind(n,3208)),meta:{d:17563392e5,l:"2025年8月28日",c:["code"],g:["javassm","Spring"],e:'<h3>应用程序上下文详解</h3>\n<p>前面我们详细介绍了<code>BeanFactory</code>是如何工作的，接着我们来研究一下<code>ApplicationContext</code>的内部</p>\n<p>实际上我们真正在项目中使用的就是ApplicationContext的实现。</p>\n<h4><code>ApplicationContext</code>接口</h4>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">EnvironmentCapable</span><span class="token punctuation">,</span> <span class="token class-name">ListableBeanFactory</span><span class="token punctuation">,</span> <span class="token class-name">HierarchicalBeanFactory</span><span class="token punctuation">,</span> <span class="token class-name">MessageSource</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">,</span> <span class="token class-name">ResourcePatternResolver</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Nullable</span>\n    <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> <span class="token function">getApplicationName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">long</span> <span class="token function">getStartupDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Nullable</span>\n    <span class="token class-name">ApplicationContext</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">AutowireCapableBeanFactory</span> <span class="token function">getAutowireCapableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:4.63,words:1389},y:"a",t:"Javassm - 应用程序上下文",O:-.5989}}],["/code/java_ssm/Spring/6-%E5%8E%9F%E7%90%86/spring14.html",{loader:()=>n.e(8800).then(n.bind(n,7005)),meta:{d:1756512e6,l:"2025年8月30日",c:["code"],g:["javassm","Spring"],e:'<h3>Mybatis整合原理</h3>\n<h4><code>@MapperScan</code>实现</h4>\n<p>通过之前的了解，我们再来看Mybatis的<code>@MapperScan</code>是如何实现的，现在理解起来就非常简单了。</p>\n<p>我们可以直接打开查看：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Documented</span>\n<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">MapperScannerRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">MapperScans</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MapperScan</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.41,words:1024},y:"a",t:"Javassm - Mybatis整合原理",O:-.5989}}],["/404.html",{loader:()=>n.e(7490).then(n.bind(n,2095)),meta:{y:"p",t:""}}],["/daily/",{loader:()=>n.e(4470).then(n.bind(n,3142)),meta:{y:"p",t:"Daily"}}],["/academic/UAV/",{loader:()=>n.e(4470).then(n.bind(n,4713)),meta:{y:"p",t:"UAV"}}],["/academic/",{loader:()=>n.e(4470).then(n.bind(n,2510)),meta:{y:"p",t:"Academic"}}],["/academic/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/",{loader:()=>n.e(4470).then(n.bind(n,2678)),meta:{y:"p",t:"强化学习"}}],["/code/java/",{loader:()=>n.e(4470).then(n.bind(n,9821)),meta:{y:"p",t:"Java"}}],["/code/",{loader:()=>n.e(4470).then(n.bind(n,9005)),meta:{y:"p",t:"Code"}}],["/code/java%209-17/",{loader:()=>n.e(4470).then(n.bind(n,4040)),meta:{y:"p",t:"Java 9 17"}}],["/code/java_hint/",{loader:()=>n.e(4470).then(n.bind(n,8181)),meta:{y:"p",t:"Java Hint"}}],["/code/java_ssm/SpringMvc/",{loader:()=>n.e(4470).then(n.bind(n,1419)),meta:{y:"p",t:"Spring Mvc"}}],["/code/java_ssm/",{loader:()=>n.e(4470).then(n.bind(n,7041)),meta:{y:"p",t:"Java Ssm"}}],["/code/java_ssm/SpringSecurity/",{loader:()=>n.e(4470).then(n.bind(n,2336)),meta:{y:"p",t:"Spring Security"}}],["/code/javaweb/1-Socket/",{loader:()=>n.e(4470).then(n.bind(n,1617)),meta:{y:"p",t:"1 Socket"}}],["/code/javaweb/",{loader:()=>n.e(4470).then(n.bind(n,6744)),meta:{y:"p",t:"Javaweb"}}],["/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/",{loader:()=>n.e(4470).then(n.bind(n,7862)),meta:{y:"p",t:"2 数据库"}}],["/code/javaweb/3-Lombok/",{loader:()=>n.e(4470).then(n.bind(n,6139)),meta:{y:"p",t:"3 Lombok"}}],["/code/javaweb/4-Mybatis/",{loader:()=>n.e(4470).then(n.bind(n,4394)),meta:{y:"p",t:"4 Mybatis"}}],["/code/javaweb/5-JUL/",{loader:()=>n.e(4470).then(n.bind(n,8902)),meta:{y:"p",t:"5 JUL"}}],["/code/javaweb/6-JUnit/",{loader:()=>n.e(4470).then(n.bind(n,6454)),meta:{y:"p",t:"6 JUnit"}}],["/code/javaweb/7-Maven/",{loader:()=>n.e(4470).then(n.bind(n,7593)),meta:{y:"p",t:"7 Maven"}}],["/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/",{loader:()=>n.e(4470).then(n.bind(n,3076)),meta:{y:"p",t:"8 网络内容"}}],["/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/",{loader:()=>n.e(4470).then(n.bind(n,9632)),meta:{y:"p",t:"1 Io C容器"}}],["/code/java_ssm/Spring/",{loader:()=>n.e(4470).then(n.bind(n,6428)),meta:{y:"p",t:"Spring"}}],["/code/java_ssm/Spring/2-Spring%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/",{loader:()=>n.e(4470).then(n.bind(n,7087)),meta:{y:"p",t:"2 Spring高级特性"}}],["/code/java_ssm/Spring/3-AOP/",{loader:()=>n.e(4470).then(n.bind(n,7952)),meta:{y:"p",t:"3 AOP"}}],["/code/java_ssm/Spring/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/",{loader:()=>n.e(4470).then(n.bind(n,4114)),meta:{y:"p",t:"4 数据库框架整合"}}],["/code/java_ssm/Spring/5-JUnit%E6%95%B4%E5%90%88/",{loader:()=>n.e(4470).then(n.bind(n,5851)),meta:{y:"p",t:"5 JUnit整合"}}],["/code/java_ssm/Spring/6-%E5%8E%9F%E7%90%86/",{loader:()=>n.e(4470).then(n.bind(n,2234)),meta:{y:"p",t:"6 原理"}}],["/category/",{loader:()=>n.e(4470).then(n.bind(n,9947)),meta:{y:"p",t:"分类",I:!1}}],["/category/daily/",{loader:()=>n.e(4470).then(n.bind(n,5729)),meta:{y:"p",t:"daily 分类",I:!1}}],["/category/academic/",{loader:()=>n.e(4470).then(n.bind(n,2608)),meta:{y:"p",t:"academic 分类",I:!1}}],["/category/code/",{loader:()=>n.e(4470).then(n.bind(n,3795)),meta:{y:"p",t:"code 分类",I:!1}}],["/tag/",{loader:()=>n.e(4470).then(n.bind(n,7479)),meta:{y:"p",t:"标签",I:!1}}],["/tag/d1/",{loader:()=>n.e(4470).then(n.bind(n,6860)),meta:{y:"p",t:"标签: d1",I:!1}}],["/tag/uav/",{loader:()=>n.e(4470).then(n.bind(n,7179)),meta:{y:"p",t:"标签: UAV",I:!1}}],["/tag/ieee-transactions-on-vehicular-technology/",{loader:()=>n.e(4470).then(n.bind(n,3158)),meta:{y:"p",t:"标签: IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY",I:!1}}],["/tag/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/",{loader:()=>n.e(4470).then(n.bind(n,6807)),meta:{y:"p",t:"标签: 强化学习",I:!1}}],["/tag/java/",{loader:()=>n.e(4470).then(n.bind(n,9509)),meta:{y:"p",t:"标签: java",I:!1}}],["/tag/java%E6%96%B0%E7%89%B9%E6%80%A7/",{loader:()=>n.e(4470).then(n.bind(n,7002)),meta:{y:"p",t:"标签: java新特性",I:!1}}],["/tag/java-hint/",{loader:()=>n.e(4470).then(n.bind(n,1970)),meta:{y:"p",t:"标签: java hint",I:!1}}],["/tag/javassm/",{loader:()=>n.e(4470).then(n.bind(n,1887)),meta:{y:"p",t:"标签: javassm",I:!1}}],["/tag/spring/",{loader:()=>n.e(4470).then(n.bind(n,147)),meta:{y:"p",t:"标签: Spring",I:!1}}],["/tag/javaweb/",{loader:()=>n.e(4470).then(n.bind(n,692)),meta:{y:"p",t:"标签: javaweb",I:!1}}],["/tag/mysql/",{loader:()=>n.e(4470).then(n.bind(n,5698)),meta:{y:"p",t:"标签: mysql",I:!1}}],["/tag/lombok/",{loader:()=>n.e(4470).then(n.bind(n,2227)),meta:{y:"p",t:"标签: Lombok",I:!1}}],["/tag/mybatis/",{loader:()=>n.e(4470).then(n.bind(n,7644)),meta:{y:"p",t:"标签: mybatis",I:!1}}],["/tag/jul/",{loader:()=>n.e(4470).then(n.bind(n,5899)),meta:{y:"p",t:"标签: JUL",I:!1}}],["/tag/maven/",{loader:()=>n.e(4470).then(n.bind(n,8203)),meta:{y:"p",t:"标签: Maven",I:!1}}],["/tag/springel/",{loader:()=>n.e(4470).then(n.bind(n,1633)),meta:{y:"p",t:"标签: SpringEL",I:!1}}],["/article/",{loader:()=>n.e(4470).then(n.bind(n,662)),meta:{y:"p",t:"文章",I:!1}}],["/star/",{loader:()=>n.e(4470).then(n.bind(n,4405)),meta:{y:"p",t:"星标",I:!1}}],["/timeline/",{loader:()=>n.e(4470).then(n.bind(n,4124)),meta:{y:"p",t:"时间轴",I:!1}}]])},9354:(s,a,n)=>{n.d(a,{U:()=>t});const t=JSON.parse('{"base":"/","lang":"zh-CN","title":"EkkoSonya\'s Blog","description":"笔记记录","head":[["link",{"rel":"alternate","type":"application/rss+xml","href":"http://ekkosonya.cn/rss.xml","title":"EkkoSonya\'s Blog RSS Feed"}]],"locales":{}}')},8120:(s,a,n)=>{n.d(a,{K:()=>t});const t=JSON.parse('{"encrypt":{},"author":{"name":"EkkoSonya","url":"http://ekkosonya.cn"},"logo":"/penguin1.png","breadcrumb":false,"contributors":false,"lastUpdated":true,"editLink":false,"darkmode":"switch","fullscreen":true,"repo":"EkkoSonya","repoLabel":"GitHub","repoDisplay":true,"docsDir":"docs","navbarLayout":{"start":["Brand"],"center":["Links"],"end":["SocialLink","Repo","Outlook","Search"]},"copyright":"Copyright © 2024-present <a href=\\"http://ekkosonya.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">EkkoSonya\'s Blog</a>","displayFooter":true,"footer":"<img src=\\"/beian.png\\" style=\\"width:1.2rem;margin-right:2px;\\"> <a href=\\"https://beian.mps.gov.cn/#/query/webSearch?code=33019202000049\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">浙公网安备33019202000049</a>","pageInfo":["Category","Tag","Word","ReadingTime","PageView"],"blog":{"articleInfo":["Date","PageView","Category","Tag","ReadingTime"],"name":"EkkoSonya","avatar":"/penguin2.png","description":"好好学习，天天向上","roundAvatar":true,"medias":{"GitHub":"https://github.com/EkkoSonya","Email":"mailto:ekkosonya@163.com"}},"headerDepth":4,"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":[{"text":"主页","link":""},{"text":"学术","prefix":"/academic/","link":"/academic/"},{"text":"代码","prefix":"/code/","link":"/code/"},{"text":"随笔","prefix":"/daily/","link":"/daily/"},{"text":"工具","icon":"tool","children":[{"text":"ChatGPT SC","icon":"creative","link":"https://www.aishort.top/"},{"text":"IMGPrompt","icon":"pic","link":"https://prompt.newzone.top/"},{"text":"多语言处理","icon":"others","link":"https://tools.newzone.top/json-translate"},{"text":"工具收藏","icon":"categoryselected","link":"https://nav.newzone.top/"}]}],"sidebar":{"":[{"text":"学术","prefix":"/academic/","collapsible":true,"children":"structure"},{"text":"代码","prefix":"/code/","collapsible":true,"children":"structure"},{"text":"随笔","prefix":"/daily/","collapsible":true,"children":"structure"}]}}}}')},1878:(s,a,n)=>{n.d(a,{v:()=>t});const t={"/academic/":[{text:"UAV",prefix:"UAV/",collapsible:!0,children:["Reinforcement-Learning-in-Multiple-UAV-Networks_Deployment-and-Movement-Design"]},{text:"强化学习",prefix:"强化学习/",collapsible:!0,children:["chapter 1","chapter 2","chapter 3","chapter 4","chapter 5","chapter 6","chapter 7","chapter 8","chapter 9","chapter 10"]}],"/code/":[{text:"Java",prefix:"java/",collapsible:!0,children:["java 1","java 2","java 3","java 4","java 5","java 6","java 7","java 8","java 9","java 10","java 11","java 12","java 13","java 14","java 15","java 16","java 17","java 18","java 19","java 20","java 21","java 22","java 23","java 24","java 25","java 26","java 27","java 28"]},{text:"Java 9 17",prefix:"java 9-17/",collapsible:!0,children:["javainfo2","javainfo5","javainfo6","javainfo3","javainfo4","javainfo"]},{text:"Java Hint",prefix:"java_hint/",collapsible:!0,children:["hint1","hint3","hint2"]},{text:"Java Ssm",prefix:"java_ssm/",collapsible:!0,children:[{text:"Spring",prefix:"Spring/",collapsible:!0,children:[{text:"1 Io C容器",prefix:"1-IoC容器/",collapsible:!0,children:["spring1","spring2","spring3","spring4","spring5"]},{text:"2 Spring高级特性",prefix:"2-Spring高级特性/",collapsible:!0,children:["spring6"]},{text:"3 AOP",prefix:"3-AOP/",collapsible:!0,children:["spring8","spring9","spring7"]},{text:"4 数据库框架整合",prefix:"4-数据库框架整合/",collapsible:!0,children:["spring10","spring11","spring12"]},{text:"5 JUnit整合",prefix:"5-JUnit整合/",collapsible:!0,children:["spring10"]},{text:"6 原理",prefix:"6-原理/",collapsible:!0,children:["spring11","spring14","spring12","spring13"]}]},{text:"Spring Mvc",prefix:"SpringMvc/",collapsible:!0,children:["mvc1","mvc2","mvc3","mvc4","mvc5","mvc6","mvc7"]},{text:"Spring Security",prefix:"SpringSecurity/",collapsible:!0,children:["ss1","ss2","ss3","ss4"]}]},{text:"Javaweb",prefix:"javaweb/",collapsible:!0,children:[{text:"1 Socket",prefix:"1-Socket/",collapsible:!0,children:["javaweb1","javaweb2"]},{text:"2 数据库",prefix:"2-数据库/",collapsible:!0,children:["javaweb3","javaweb4","javaweb5","javaweb6","javaweb7","javaweb8","javaweb9"]},{text:"3 Lombok",prefix:"3-Lombok/",collapsible:!0,children:["javaweb10"]},{text:"4 Mybatis",prefix:"4-Mybatis/",collapsible:!0,children:["javaweb11","javaweb12","javaweb13","javaweb14","javaweb15","javaweb16","javaweb17","javaweb18","javaweb19"]},{text:"5 JUL",prefix:"5-JUL/",collapsible:!0,children:["javaweb20","javaweb21","javaweb22","javaweb23","javaweb24"]},{text:"6 JUnit",prefix:"6-JUnit/",collapsible:!0,children:["javaweb25","javaweb26","javaweb27"]},{text:"7 Maven",prefix:"7-Maven/",collapsible:!0,children:["maven1","maven2","maven3","maven4","maven5"]},{text:"8 网络内容",prefix:"8-网络内容/",collapsible:!0,children:["javainfo","javainfo2","javainfo3","javainfo4","javainfo5","javainfo6","javainfo7","javainfo8"]}]}],"/daily/":["d1"]}},8047:(s,a,n)=>{n.d(a,{P:()=>t});const t={GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>'}}},s=>{s.O(0,[1410,731],(()=>(1392,s(s.s=1392)))),s.O()}]);