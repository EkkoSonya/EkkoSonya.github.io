"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[1901],{3671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},3769:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>u});var t=s(7847);const e=s.p+"assets/img/16.e0e0784f.png",p=s.p+"assets/img/17.746a593e.png",o=s.p+"assets/img/18.007752e1.png",c=[(0,t.Fv)('<h2 id="ioc理论基础-4" tabindex="-1"><a class="header-anchor" href="#ioc理论基础-4"><span>IoC理论基础 4</span></a></h2><h3 id="工厂模式和工厂bean" tabindex="-1"><a class="header-anchor" href="#工厂模式和工厂bean"><span>工厂模式和工厂Bean</span></a></h3><p>默认情况下，容器会调用Bean对应类型的构造方法进行对象创建</p><p>但是在某些时候，我们可能不希望外界使用类的构造方法完成对象创建，比如在工厂方法设计模式中</p><p>我们更希望 Spring 不要直接利用反射机制通过构造方法创建Bean对象, 而是利用反射机制先找到<strong>对应的工厂类</strong>，然后<strong>利用工厂类去生成需要的Bean对象</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我被构造了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentFactory</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎光临电子厂&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="factory-method" tabindex="-1"><a class="header-anchor" href="#factory-method"><span><code>factory-method</code></span></a></h4><p>得到的<code>Bean</code>依然是对应对象的<code>Bean</code>, 而不是对应工厂的。</p><p>此时Student有一个工厂，我们正常情况下需要使用工厂才可以得到Student对象，现在我们希望Spring也这样做，不要直接去反射搞构造方法创建，我们可以通过<code>factory-method</code>进行指定：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.test.bean.StudentFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getStudent<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，这里的Bean类型需要填写为<strong>Student类的工厂类</strong>，并且添加<code>factory-method</code>指定对应的工厂方法</p><p>但是<strong>最后注册的是工厂方法的返回类型</strong>，所以说依然是<code>Student</code>的Bean</p><p>此时我们再去进行获取，拿到的也是通过工厂方法得到的对象</p><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><blockquote><p>这里有一个误区，千万不要认为是我们注册了StudentFactory这个Bean，class填写为这个类这个<strong>只是为了告诉Spring我们的工厂方法在哪个位置</strong>，真正注册的是工厂方法提供的东西。 也可以用<code>init-method</code>测试，当你把对应的<code>init</code>方法写在<code>StudentFactory</code>中，idea会自动报错，只有写在<code>Student</code>中才是正确的。 <img src="'+p+'" alt="alt text" loading="lazy"></p></blockquote><p>可以发现，当我们采用工厂模式后，我们就无法再通过配置文件对Bean进行依赖注入等操作了，而是只能在工厂方法中完成.</p><h4 id="工厂bean-factory-bean" tabindex="-1"><a class="header-anchor" href="#工厂bean-factory-bean"><span>工厂<code>Bean</code> - <code>factory-bean</code></span></a></h4><p>当然，可能某些工厂类需要构造出对象之后才能使用(比如对应构建实体类对象的方法不是<code>Static</code>)</p><p>就需要先将这个工厂类注册为一个<code>bean</code>，然后再基于这个<code>bean</code>作为新的<code>bean</code>的<code>factory-bean</code>的值</p><p>我们也可以将某个工厂类直接注册为工厂Bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentFactory</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎光临电子厂&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在需要<code>StudentFactory</code>对象才可以获取到<code>Student</code>，此时我们就<strong>只能先将其注册为Bean了</strong>，像这样将工厂类注册为Bean，我们称其为工厂Bean，然后再使用<code>factory-bean</code>来指定Bean的工厂Bean：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>studentFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.test.bean.StudentFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>studentFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getStudent<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，使用factory-bean之后，不再要求指定class，我们可以直接使用了：</p><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>此时可以看到，工厂方法上同样有了图标，这种方式，由于工厂类被注册为Bean，此时我们就可以在配置文件中为工厂Bean配置依赖注入等内容了。</p><p>这里还有一个很细节的操作，如果我们想获取工厂Bean为我们提供的Bean，<strong>可以直接输入工厂Bean的名称，这样不会得到工厂Bean的实例，而是工厂Bean生产的Bean的实例</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Student</span> bean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;studentFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，如果我们需要获取工厂类的实例，可以在名称前面添加<code>&amp;</code>符号：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">StudentFactory</span> bean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StudentFactory</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;studentFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="直接继承factorybean" tabindex="-1"><a class="header-anchor" href="#直接继承factorybean"><span>直接继承<code>FactoryBean&lt;?&gt;</code></span></a></h5><p>不需要注册工厂<code>bean</code>，xml只需要：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.test.entity.StudentFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后让对应的工厂类继承<code>FactoryBean</code>:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;getStudent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',36)],l={},i=(0,s(3671).A)(l,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,c)}]]),u=JSON.parse('{"path":"/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring4.html","title":"Javassm - Spring4 (工厂模式和工厂Bean)","lang":"zh-CN","frontmatter":{"title":"Javassm - Spring4 (工厂模式和工厂Bean)","date":"2025-08-06T00:00:00.000Z","category":["code"],"tag":["javassm","Spring"],"order":-0.5997,"description":"IoC理论基础 4 工厂模式和工厂Bean 默认情况下，容器会调用Bean对应类型的构造方法进行对象创建 但是在某些时候，我们可能不希望外界使用类的构造方法完成对象创建，比如在工厂方法设计模式中 我们更希望 Spring 不要直接利用反射机制通过构造方法创建Bean对象, 而是利用反射机制先找到对应的工厂类，然后利用工厂类去生成需要的Bean对象： f...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_ssm/Spring/1-IoC%E5%AE%B9%E5%99%A8/spring4.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - Spring4 (工厂模式和工厂Bean)"}],["meta",{"property":"og:description","content":"IoC理论基础 4 工厂模式和工厂Bean 默认情况下，容器会调用Bean对应类型的构造方法进行对象创建 但是在某些时候，我们可能不希望外界使用类的构造方法完成对象创建，比如在工厂方法设计模式中 我们更希望 Spring 不要直接利用反射机制通过构造方法创建Bean对象, 而是利用反射机制先找到对应的工厂类，然后利用工厂类去生成需要的Bean对象： f..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-21T03:34:45.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javassm"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2025-08-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-21T03:34:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - Spring4 (工厂模式和工厂Bean)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-21T03:34:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"IoC理论基础 4","slug":"ioc理论基础-4","link":"#ioc理论基础-4","children":[{"level":3,"title":"工厂模式和工厂Bean","slug":"工厂模式和工厂bean","link":"#工厂模式和工厂bean","children":[{"level":4,"title":"factory-method","slug":"factory-method","link":"#factory-method","children":[]},{"level":4,"title":"工厂Bean - factory-bean","slug":"工厂bean-factory-bean","link":"#工厂bean-factory-bean","children":[{"level":5,"title":"直接继承FactoryBean<?>","slug":"直接继承factorybean","link":"#直接继承factorybean","children":[]}]}]}]}],"git":{"createdTime":1755747285000,"updatedTime":1755747285000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":3.29,"words":987},"filePathRelative":"code/java_ssm/Spring/1-IoC容器/spring4.md","localizedDate":"2025年8月6日","excerpt":"<h2>IoC理论基础 4</h2>\\n<h3>工厂模式和工厂Bean</h3>\\n<p>默认情况下，容器会调用Bean对应类型的构造方法进行对象创建</p>\\n<p>但是在某些时候，我们可能不希望外界使用类的构造方法完成对象创建，比如在工厂方法设计模式中</p>\\n<p>我们更希望 Spring 不要直接利用反射机制通过构造方法创建Bean对象, 而是利用反射机制先找到<strong>对应的工厂类</strong>，然后<strong>利用工厂类去生成需要的Bean对象</strong>：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Student</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"我被构造了\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);