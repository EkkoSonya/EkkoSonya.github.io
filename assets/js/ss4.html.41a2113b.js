"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[9324],{3671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},8156:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>d,data:()=>v});var t=a(7847);const e=a.p+"assets/img/6.7eedb146.png",p=a.p+"assets/img/7.439ab53b.png",o=a.p+"assets/img/8.437ff80e.png",c=a.p+"assets/img/9.5d801840.png",l=a.p+"assets/img/10.442b8e22.png",i=(0,t.Fv)('<h2 id="认证" tabindex="-1"><a class="header-anchor" href="#认证"><span>认证</span></a></h2><p>认证是我们网站的第一步，用户需要登录之后才能进入</p><p>这一部分我们将详细介绍如何使用SpringSecurity实现用户登录。</p><h3 id="基于内存验证" tabindex="-1"><a class="header-anchor" href="#基于内存验证"><span>基于内存验证</span></a></h3><p>首先我们来看看最简单的基于内存的配置，也就是说我们直接以代码的形式配置我们网站的用户和密码</p><h4 id="userdetailsservice" tabindex="-1"><a class="header-anchor" href="#userdetailsservice"><span><code>UserDetailsService</code></span></a></h4><p>配置方式非常简单，只需要在Security配置类中注册一个Bean即可：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableWebSecurity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfiguration</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Bean</span>   <span class="token comment">//UserDetailsService就是获取用户信息的服务</span>\n    <span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//每一个UserDetails就代表一个用户信息，其中包含用户的用户名和密码以及角色</span>\n        <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//角色目前我们不需要关心，随便写就行，后面会专门讲解</span>\n                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">UserDetails</span> admin <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;ADMIN&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> admin<span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token comment">//创建一个基于内存的用户信息管理器作为UserDetailsService</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，我们就可以前往登录界面，进行登录操作了</p><p>登录成功后，就可以访问到我们之前的界面了</p><p>并且为了防止我们之前提到的会话固定问题，<strong>在登录之后，JSESSIONID会得到重新分配</strong></p>',11),u={href:"http://localhost:8080/mvc/logout",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Fv)('<figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>退出登录后就需要重新登录才能访问我们的网站了。</p><p>可以发现，在有了SpringSecurity之后，我们网站的登录验证模块相当于直接被接管了，因此，从现在开始，我们的网站不需要再自己编写登录模块了，这里我们可以直接去掉，只留下主页面：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">//现在所有接口不需要任何验证了，因为Security已经帮我们做了，没登录是根本进不来的</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@ResponseBody</span>\n    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/pay&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">JSONObject</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> account<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">JSONObject</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;转账给&quot;</span><span class="token operator">+</span>account<span class="token operator">+</span><span class="token string">&quot;成功，交易已完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        object<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> object<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们的网站就成功用上了更加安全的SpringSecurity框架了。</p><h4 id="加密工具-bcrypt" tabindex="-1"><a class="header-anchor" href="#加密工具-bcrypt"><span>加密工具 <code>BCrypt</code></span></a></h4><p>我们在配置用户信息的时候，报了黄标，实际上这种方式存储密码并不安全：</p><p>这是因为SpringSecurity的密码校验不推荐直接使用原文进行比较，而是<strong>使用加密算法将密码进行加密</strong>（更准确地说应该进行Hash处理，此过程是不可逆的，无法解密），最后<strong>将用户提供的密码以同样的方式加密后与密文进行比较</strong>。</p><p>对于我们来说，用户提供的密码属于隐私信息，直接明文存储并不好，而且如果数据库内容被窃取，那么所有用户的密码将全部泄露，这是我们不希望看到的结果，</p><p>我们需要一种既能隐藏用户密码也能完成认证的机制，而Hash处理就是一种很好的解决方案，通过将用户的密码进行Hash值计算，计算出来的结果一般是单向的，无法还原为原文，如果需要验证是否与此密码一致，那么需要以同样的方式加密再比较两个Hash值是否一致，这样就很好的保证了用户密码的安全性。</p><p>因此，我们在配置用户信息的时候，可以使用官方提供的BCrypt加密工具：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableWebSecurity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfiguration</span> <span class="token punctuation">{</span>\n    \n    <span class="token comment">//这里将BCryptPasswordEncoder直接注册为Bean，Security会自动进行选择</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token class-name">PasswordEncoder</span> encoder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token class-name">User</span>\n                <span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   \n                <span class="token comment">//这里将密码进行加密后存储</span>\n                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//一会观察一下加密出来之后的密码长啥样</span>\n        <span class="token class-name">UserDetails</span> admin <span class="token operator">=</span> <span class="token class-name">User</span>\n                <span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//这里将密码进行加密后存储</span>\n                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;ADMIN&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> admin<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们存储的密码就是更加安全的密码了：</p><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="_403-权限问题-csrf" tabindex="-1"><a class="header-anchor" href="#_403-权限问题-csrf"><span>403 权限问题 <code>csrf</code></span></a></h4><p>不过，可能会有小伙伴发现，所有的POST请求都被403了：</p><figure><img src="https://s2.loli.net/2023/07/02/F94URzLh6oIBrCJ.png" alt="image-20230702183040922" tabindex="0" loading="lazy"><figcaption>image-20230702183040922</figcaption></figure><p>这是因为SpringSecurity自带了csrf防护，需求我们在POST请求中携带页面中的csrfToken才可以，否则一律进行拦截操作，这里我们可以将其嵌入到页面中，随便找一个地方添加以下内容：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${_csrf.getParameterName()}<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${_csrf.token}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">hidden</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着在axios发起请求时，携带这个input的value值：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> account <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value\n    <span class="token keyword">const</span> csrf <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;_csrf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value\n    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/mvc/pay&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">account</span><span class="token operator">:</span> account<span class="token punctuation">,</span>\n        <span class="token literal-property property">_csrf</span><span class="token operator">:</span> csrf   <span class="token comment">//携带此信息即可，否则会被拦截</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果后续各位小伙伴遇到那种需要再form表单中提交的情况，也可以直接像下面这样给塞到表单里：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/xxxx<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    ...\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${_csrf.getParameterName()}<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${_csrf.token}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">hidden</span><span class="token punctuation">&gt;</span></span>\n    ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上现在的浏览器已经很安全了，完全不需要使用自带的csrf防护，后面我们会讲解如何通过配置关闭csrf防护。这里温馨提醒一下，在后续各位小伙伴跟我们的实战项目时，如果遇到诸如401、403这种错误时，优先查看你的SpringSecurity配置是否错误。</p><blockquote><p>从Spring Security 4.0开始，默认情况下会启用CSRF保护，以防止CSRF攻击应用程序，Spring Security CSRF会针对PATCH，POST，PUT和DELETE方法的请求（不仅仅只是登陆请求，这里指的是任何请求路径）进行防护，而这里的登陆表单正好是一个POST类型的请求。在默认配置下，无论是否登陆，页面中只要发起了PATCH，POST，PUT和DELETE请求一定会被拒绝，并返回<strong>403</strong>错误**（注意，这里是个究极大坑，这个没有任何提示，直接403，因此如果你不知道的话根本不清楚是什么问题，就一直卡这里了）**，需要在请求的时候加入csrfToken才行，也就是&quot;83421936-b84b-44e3-be47-58bb2c14571a&quot;，正是csrfToken，如果提交的是表单类型的数据，那么表单中必须包含此Token字符串，键名称为&quot;_csrf&quot;；如果是JSON数据格式发送的，那么就需要在请求头中包含此Token字符串。</p></blockquote><h3 id="基于数据库验证" tabindex="-1"><a class="header-anchor" href="#基于数据库验证"><span>基于数据库验证</span></a></h3><p>前面我们已经实现了直接认证的方式，但是实际项目中往往都是将用户信息存储在数据库中，那么如何将其连接到数据库，通过查询数据库中的用户信息来进行用户登录呢？</p><h4 id="建立数据库" tabindex="-1"><a class="header-anchor" href="#建立数据库"><span>建立数据库</span></a></h4><p>官方默认提供了可以直接使用的用户和权限表设计，根本不需要我们来建表，直接在Navicat中执行以下查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> users<span class="token punctuation">(</span>username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>enabled <span class="token keyword">boolean</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">create</span> <span class="token keyword">table</span> authorities <span class="token punctuation">(</span>username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>authority <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token keyword">constraint</span> fk_authorities_users <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">references</span> users<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> ix_auth_username <span class="token keyword">on</span> authorities <span class="token punctuation">(</span>username<span class="token punctuation">,</span>authority<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖"><span>添加依赖</span></a></h4><p>接着我们添加Mybatis和MySQL相关的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置类" tabindex="-1"><a class="header-anchor" href="#配置类"><span>配置类</span></a></h4><p>接着我们编写配置类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableWebSecurity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfiguration</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//数据源配置</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PooledDataSource</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">,</span>\n                <span class="token string">&quot;jdbc:mysql://localhost:3306/test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">UserDetailsManager</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span>\n            <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span>\n            <span class="token class-name">PasswordEncoder</span> encoder\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">JdbcUserDetailsManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcUserDetailsManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//仅首次启动时创建一个新的用户用于测试，后续无需创建</span>\n        manager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动后，可以看到两张表中已经自动添加好对应的数据了：</p><figure><img src="'+c+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><figure><img src="'+l+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>我们可以直接尝试进行登录，使用方式和之前是完全一样的</p><p>这样，当我们下次需要快速创建一个用户登录的应用程序时，直接使用这种方式就能快速完成了，是不是感觉特别方便。</p><h4 id="userdetailsmanager-接口" tabindex="-1"><a class="header-anchor" href="#userdetailsmanager-接口"><span><code>UserDetailsManager</code> 接口</span></a></h4><p>无论是我们上节课认识的<code>InMemoryUserDetailsManager</code>还是现在认识的<code>JdbcUserDetailsManager</code>，他们都是实现自<code>UserDetailsManager</code>接口</p><p>这个接口中有着一套完整的增删改查操作，方便我们直接对用户进行处理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDetailsManager</span> <span class="token keyword">extends</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>\n        \n    <span class="token comment">//创建一个新的用户</span>\n    <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//更新用户信息</span>\n    <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//删除用户</span>\n    <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//修改用户密码</span>\n    <span class="token keyword">void</span> <span class="token function">changePassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> oldPassword<span class="token punctuation">,</span> <span class="token class-name">String</span> newPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//判断是否存在指定用户</span>\n    <span class="token keyword">boolean</span> <span class="token function">userExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用UserDetailsManager对象，我们就能快速执行用户相关的管理操作</p><h4 id="简单重置密码接口" tabindex="-1"><a class="header-anchor" href="#简单重置密码接口"><span>简单重置密码接口</span></a></h4><p>比如我们可以直接在网站上添加一个快速重置密码的接口，首先需要配置一下<code>JdbcUserDetailsManager</code>，为其添加一个<code>AuthenticationManager</code>用于原密码的校验：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableWebSecurity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfiguration</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token comment">//手动创建一个AuthenticationManager用于处理密码校验</span>\n    <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">getAuthenticationManager</span><span class="token punctuation">(</span>\n            <span class="token class-name">UserDetailsManager</span> manager<span class="token punctuation">,</span>\n            <span class="token class-name">PasswordEncoder</span> encoder\n    <span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">DaoAuthenticationProvider</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DaoAuthenticationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        provider<span class="token punctuation">.</span><span class="token function">setUserDetailsService</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        provider<span class="token punctuation">.</span><span class="token function">setPasswordEncoder</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProviderManager</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">UserDetailsManager</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span>\n            <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span>\n            <span class="token class-name">PasswordEncoder</span> encoder\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">JdbcUserDetailsManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcUserDetailsManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        manager<span class="token punctuation">.</span><span class="token function">setAuthenticationManager</span><span class="token punctuation">(</span><span class="token function">getAuthenticationManager</span><span class="token punctuation">(</span>manager<span class="token punctuation">,</span> encoder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们编写一个快速重置密码的接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>\n<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/change-password&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">JSONObject</span> <span class="token function">changePassword</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> oldPassword<span class="token punctuation">,</span>\n                                 <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> newPassword<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    manager<span class="token punctuation">.</span><span class="token function">changePassword</span><span class="token punctuation">(</span>oldPassword<span class="token punctuation">,</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>newPassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">JSONObject</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    object<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> object<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们在主界面中添加一个重置密码的操作：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>\n        修改密码：\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>oldPassword<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>旧密码<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newPassword<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>新密码<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>修改密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> oldPassword <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;oldPassword&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value\n    <span class="token keyword">const</span> newPassword <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;newPassword&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value\n    <span class="token keyword">const</span> csrf <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;_csrf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value\n    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/mvc/change-password&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">oldPassword</span><span class="token operator">:</span> oldPassword<span class="token punctuation">,</span>\n        <span class="token literal-property property">newPassword</span><span class="token operator">:</span> newPassword<span class="token punctuation">,</span>\n        <span class="token literal-property property">_csrf</span><span class="token operator">:</span> csrf\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>success <span class="token operator">?</span> <span class="token string">&quot;密码修改成功&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;密码修改失败，请检查原密码是否正确&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就可以在首页进行修改密码操作了</p><p>当然，这种方式的权限校验虽然能够直接使用数据库，但是存在一定的局限性，只适合快速搭建Demo使用，<strong>不适合实际生产环境下编写</strong></p><h3 id="自定义验证" tabindex="-1"><a class="header-anchor" href="#自定义验证"><span>自定义验证</span></a></h3><p>有些时候，我们的数据库可能并不会像SpringSecurity默认的那样进行设计，而是采用自定义的表结构，这种情况下，上面两种方式就很难进行验证了，此时我们得编写自定义验证，来应对各种任意变化的情况。</p><p>既然需要自定义，那么我们就需要自行实现<code>UserDetailsService</code>或是功能更完善的<code>UserDetailsManager</code>接口</p><h4 id="自行实现-userdetailsservice-接口" tabindex="-1"><a class="header-anchor" href="#自行实现-userdetailsservice-接口"><span>自行实现 <code>UserDetailsService</code> 接口</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>\n    <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里为了简单，我们直接选择前者进行实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizeService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要去实现这个<code>loadUserByUsername</code>方法，表示在验证的时候通过自定义的方式，根据给定的用户名查询用户，并封装为<code>UserDetails</code>对象返回</p><p>然后由<code>SpringSecurity</code>将我们返回的对象与用户登录的信息进行核验，基本流程实际上跟之前是一样的，只是现在由我们自己来提供用户查询方式。</p><p>只需要将其注册为 <code>Bean</code> 即可</p><p>现在我们在数据库中创建一个自定义的用户表</p><h5 id="构建实体类" tabindex="-1"><a class="header-anchor" href="#构建实体类"><span>构建实体类</span></a></h5><p>接着我们自行编写对应的查询操作，首先创建一个对应的实体类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="构建对应-mapper-接口" tabindex="-1"><a class="header-anchor" href="#构建对应-mapper-接口"><span>构建对应 <code>Mapper</code> 接口</span></a></h5><p>然后是根据用户名查询用户的Mapper接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user where username = #{username}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">Account</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注册对应包扫描" tabindex="-1"><a class="header-anchor" href="#注册对应包扫描"><span>注册对应包扫描</span></a></h5><p>最后我们在配置类上添加相应的包扫描，同时也需要对应的 <code>SqlSessionFactory</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableWebMvc</span>\n<span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@ComponentScans</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.controller&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.service&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.mapper&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">SqlSessionFactoryBean</span> <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">SqlSessionFactoryBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="service端进行查询" tabindex="-1"><a class="header-anchor" href="#service端进行查询"><span><code>Service</code>端进行查询</span></a></h5><p>然后我们来到Service这边进行一下完善，从数据库中进行查询：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizeService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Resource</span>\n    <span class="token class-name">UserMapper</span> mapper<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Account</span> account <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>account <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;用户名或密码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token class-name">User</span>\n                <span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就通过自定义的方式实现了数据库信息查询，并完成用户登录操作。</p>',82),k={},d=(0,a(3671).A)(k,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[i,(0,t.Lk)("p",null,[(0,t.eW)("当我们想要退出时，也可以直接访问："),(0,t.Lk)("a",u,[(0,t.eW)("http://localhost:8080/mvc/logout"),(0,t.bF)(a)]),(0,t.eW)(" 地址，我们会进入到一个退出登录界面：")]),r])}]]),v=JSON.parse('{"path":"/code/java_ssm/SpringSecurity/ss4.html","title":"Javassm - SpringSecurity4","lang":"zh-CN","frontmatter":{"title":"Javassm - SpringSecurity4","date":"2025-09-12T00:00:00.000Z","category":["code"],"tag":["javassm","Spring"],"order":-0.599,"description":"认证 认证是我们网站的第一步，用户需要登录之后才能进入 这一部分我们将详细介绍如何使用SpringSecurity实现用户登录。 基于内存验证 首先我们来看看最简单的基于内存的配置，也就是说我们直接以代码的形式配置我们网站的用户和密码 UserDetailsService 配置方式非常简单，只需要在Security配置类中注册一个Bean即可： 配置完...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_ssm/SpringSecurity/ss4.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - SpringSecurity4"}],["meta",{"property":"og:description","content":"认证 认证是我们网站的第一步，用户需要登录之后才能进入 这一部分我们将详细介绍如何使用SpringSecurity实现用户登录。 基于内存验证 首先我们来看看最简单的基于内存的配置，也就是说我们直接以代码的形式配置我们网站的用户和密码 UserDetailsService 配置方式非常简单，只需要在Security配置类中注册一个Bean即可： 配置完..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2023/07/02/F94URzLh6oIBrCJ.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-12T17:37:58.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Javassm - SpringSecurity4"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javassm"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2025-09-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-12T17:37:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - SpringSecurity4\\",\\"image\\":[\\"https://s2.loli.net/2023/07/02/F94URzLh6oIBrCJ.png\\"],\\"datePublished\\":\\"2025-09-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-12T17:37:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"认证","slug":"认证","link":"#认证","children":[{"level":3,"title":"基于内存验证","slug":"基于内存验证","link":"#基于内存验证","children":[{"level":4,"title":"UserDetailsService","slug":"userdetailsservice","link":"#userdetailsservice","children":[]},{"level":4,"title":"加密工具 BCrypt","slug":"加密工具-bcrypt","link":"#加密工具-bcrypt","children":[]},{"level":4,"title":"403 权限问题 csrf","slug":"_403-权限问题-csrf","link":"#_403-权限问题-csrf","children":[]}]},{"level":3,"title":"基于数据库验证","slug":"基于数据库验证","link":"#基于数据库验证","children":[{"level":4,"title":"建立数据库","slug":"建立数据库","link":"#建立数据库","children":[]},{"level":4,"title":"添加依赖","slug":"添加依赖","link":"#添加依赖","children":[]},{"level":4,"title":"配置类","slug":"配置类","link":"#配置类","children":[]},{"level":4,"title":"UserDetailsManager 接口","slug":"userdetailsmanager-接口","link":"#userdetailsmanager-接口","children":[]},{"level":4,"title":"简单重置密码接口","slug":"简单重置密码接口","link":"#简单重置密码接口","children":[]}]},{"level":3,"title":"自定义验证","slug":"自定义验证","link":"#自定义验证","children":[{"level":4,"title":"自行实现 UserDetailsService 接口","slug":"自行实现-userdetailsservice-接口","link":"#自行实现-userdetailsservice-接口","children":[{"level":5,"title":"构建实体类","slug":"构建实体类","link":"#构建实体类","children":[]},{"level":5,"title":"构建对应 Mapper 接口","slug":"构建对应-mapper-接口","link":"#构建对应-mapper-接口","children":[]},{"level":5,"title":"注册对应包扫描","slug":"注册对应包扫描","link":"#注册对应包扫描","children":[]},{"level":5,"title":"Service端进行查询","slug":"service端进行查询","link":"#service端进行查询","children":[]}]}]}]}],"git":{"createdTime":1757698678000,"updatedTime":1757698678000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":10.41,"words":3122},"filePathRelative":"code/java_ssm/SpringSecurity/ss4.md","localizedDate":"2025年9月12日","excerpt":"<h2>认证</h2>\\n<p>认证是我们网站的第一步，用户需要登录之后才能进入</p>\\n<p>这一部分我们将详细介绍如何使用SpringSecurity实现用户登录。</p>\\n<h3>基于内存验证</h3>\\n<p>首先我们来看看最简单的基于内存的配置，也就是说我们直接以代码的形式配置我们网站的用户和密码</p>\\n<h4><code>UserDetailsService</code></h4>\\n<p>配置方式非常简单，只需要在Security配置类中注册一个Bean即可：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Configuration</span>\\n<span class=\\"token annotation punctuation\\">@EnableWebSecurity</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">SecurityConfiguration</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token annotation punctuation\\">@Bean</span>   <span class=\\"token comment\\">//UserDetailsService就是获取用户信息的服务</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">UserDetailsService</span> <span class=\\"token function\\">userDetailsService</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//每一个UserDetails就代表一个用户信息，其中包含用户的用户名和密码以及角色</span>\\n        <span class=\\"token class-name\\">UserDetails</span> user <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">User</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">withDefaultPasswordEncoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">username</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"user\\"</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">password</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"password\\"</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">roles</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"USER\\"</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">//角色目前我们不需要关心，随便写就行，后面会专门讲解</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">UserDetails</span> admin <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">User</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">withDefaultPasswordEncoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">username</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"admin\\"</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">password</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"password\\"</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">roles</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"ADMIN\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"USER\\"</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">InMemoryUserDetailsManager</span><span class=\\"token punctuation\\">(</span>user<span class=\\"token punctuation\\">,</span> admin<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n        <span class=\\"token comment\\">//创建一个基于内存的用户信息管理器作为UserDetailsService</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);