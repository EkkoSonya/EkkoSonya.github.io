"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[3146],{3671:(a,n)=>{n.A=(a,n)=>{const s=a.__vccOpts||a;for(const[a,e]of n)s[a]=e;return s}},7019:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>o,data:()=>l});var e=s(7847);const t=[(0,e.Fv)('<h2 id="数据库-2" tabindex="-1"><a class="header-anchor" href="#数据库-2"><span>数据库 2</span></a></h2><h2 id="sql-语句" tabindex="-1"><a class="header-anchor" href="#sql-语句"><span>SQL 语句</span></a></h2><p>结构化查询语言（Structured Query Language）简称SQL，这是一种特殊的语言，它专门用于数据库的操作。每一种数据库都支持SQL，但是他们之间会存在一些细微的差异，因此不同的数据库都存在自己的“方言”。</p><p>SQL语句<strong>不区分大小写</strong>（关键字推荐使用大写），它支持多行，并且需要使用<code>;</code>进行结尾！</p><p>SQL也支持注释，通过使用<code>--</code>或是<code>#</code>来编写注释内容，也可以使用<code>/*</code>来进行多行注释。</p><p>我们要学习的就是以下四种类型的SQL语言：</p><ul><li><p>数据查询语言（Data Query Language, DQL） 基本结构是由<code>SELECT</code>子句，<code>FROM</code>子句，<code>WHERE</code>子句组成的查询块。</p></li><li><p>数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集， 以<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>三种指令为核心，分别代表插入、更新与删除，是开发以数据为中心的应用程序必定会使用到的指令。</p></li><li><p>数据库定义语言DDL(Data Definition Language)，是用于描述数据库中要存储的现实世界实体的语言。</p></li><li><p>DCL（Data Control Language）是数据库控制语言。 是用来设置或更改数据库用户或角色权限的语句 包括（grant,deny,revoke等）语句。在默认状态下，只有sysadmin,dbcreator,db_owner或db_securityadmin等人员才有权力执行DCL。</p></li></ul><p>我们平时所说的CRUD其实就是增删改查（Create/Retrieve/Update/Delete）</p><h3 id="数据库定义语言-ddl" tabindex="-1"><a class="header-anchor" href="#数据库定义语言-ddl"><span>数据库定义语言（DDL）</span></a></h3><h4 id="sql数据类型" tabindex="-1"><a class="header-anchor" href="#sql数据类型"><span>SQL数据类型</span></a></h4><p>以下的数据类型用于字符串存储：</p><ul><li><code>char(n)</code>可以存储任意字符串，但是是<strong>固定长度为n</strong>，如果插入的长度小于定义长度时，则用空格填充。</li><li><code>varchar(n)</code>也可以存储任意数量字符串，<strong>长度不固定</strong>，但<strong>不能超过n</strong>，不会用空格填充。</li></ul><p>以下数据类型用于存储数字：</p><ul><li><code>smallint</code>用于存储小的整数，范围在 (-32768，32767)</li><li><code>int</code>用于存储一般的整数，范围在 (-2147483648，2147483647)</li><li><code>bigint</code>用于存储大型整数，范围在 (-9,223,372,036,854,775,808，9,223,372,036,854,775,807)</li><li><code>float</code>用于存储单精度小数</li><li><code>double</code>用于存储双精度的小数</li></ul><p>以下数据类型用于存储时间：</p><ul><li><code>date</code>存储日期</li><li><code>time</code>存储时间</li><li><code>year</code>存储年份</li><li><code>datetime</code>用于混合存储日期+时间</li></ul><h4 id="列级约束条件" tabindex="-1"><a class="header-anchor" href="#列级约束条件"><span>列级约束条件</span></a></h4><p>列级约束有六种：</p><ul><li><p>主键 Primary key 确保列中的每个值都是唯一的，并且不能为空。一个表只能有一个主键，主键列的值用来唯一标识每一行数据。在主键列中，不允许有重复的值和空值。</p><p><code>id INT PRIMARY KEY</code> 表示 <code>id</code> 列是主键，且不能为空且唯一。</p></li><li><p>外键 foreign key 用于建立和维护两表之间的关系，确保列中的值必须存在于另一表的主键或唯一约束列中。它保证数据的参照完整性。即外键列中的数据值必须对应于另一表的主键或唯一列中的某个值。</p><p><code>FOREIGN KEY (department_id) REFERENCES departments(id)</code>，表示 <code>department_id</code> 列是外键，参照 <code>departments</code> 表的 <code>id</code> 列。</p></li><li><p>唯一 unique 确保列中的每个值都是唯一的，但允许空值。与主键类似，唯一约束保证列中所有的非空数据都是唯一的。一个表可以有多个唯一约束，不同于主键，唯一约束允许有空值。</p><p><code>email VARCHAR(255) UNIQUE</code> 表示 <code>email</code> 列的值是唯一的。</p></li><li><p>检查 check （MySQL不支持） 用于定义列的值必须满足某些条件。检查约束通常用于限制某些特定的数值范围或模式。</p><p><code>age INT CHECK (age &gt;= 18)</code>，表示 <code>age</code> 列的值必须大于或等于 18。</p></li><li><p>默认 default 用于为列指定默认值。如果在插入数据时没有为该列提供值，则会使用默认值。默认值仅在插入数据时使用，如果插入时该列有明确值，则默认值不会生效。</p><p><code>status VARCHAR(10) DEFAULT &#39;active&#39;</code>，表示 <code>status</code> 列在未指定值时默认值为 &#39;active&#39;。</p></li><li><p>非空/空值 not null/ null 用于定义列是否可以为空。NOT NULL 约束要求该列的每一行必须有一个非空值，而 NULL 允许列中的某些行没有值。</p><p><code>name VARCHAR(100) NOT NULL</code> 表示 <code>name</code> 列不能为 <code>NULL</code>，每一行必须有值。</p></li></ul><h4 id="表级约束条件" tabindex="-1"><a class="header-anchor" href="#表级约束条件"><span>表级约束条件</span></a></h4><p>表级约束有四种：主键、外键、唯一、检查</p><ul><li><p>主键 主键约束保证表中的每一行数据都有唯一的标识符，且该列的值不能为空。一个表只能有一个主键。</p><p><code>CONSTRAINT pk_primary_key PRIMARY KEY (id)</code></p></li><li><p>外键 外键约束用于<strong>在两个表之间建立参照完整性关系</strong>，确保某列的值必须存在于另一表的主键或唯一约束列中。</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Departments <span class="token punctuation">(</span>\n    DepartmentID <span class="token keyword">INT</span><span class="token punctuation">,</span>\n    DepartmentName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    Location <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    ManagerID <span class="token keyword">INT</span><span class="token punctuation">,</span>\n    Budget <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n    <span class="token keyword">CONSTRAINT</span> PK_Departments <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>DepartmentID<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">CONSTRAINT</span> UC_DepartmentName <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span>DepartmentName<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">CONSTRAINT</span> CK_BudgetPositive <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>Budget <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">CONSTRAINT</span> FK_Manager <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>ManagerID<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Employees<span class="token punctuation">(</span>EmployeeID<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">CONSTRAINT</span> DF_Location <span class="token keyword">DEFAULT</span> <span class="token string">&#39;Headquarters&#39;</span> <span class="token keyword">FOR</span> Location\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作"><span>数据库操作</span></a></h4><p>我们可以通过<code>create database</code>来创建一个数据库：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了能够支持中文，我们在创建时可以设定编码格式：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> 数据库名 <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们创建错误了，我们可以将此数据库删除，通过使用<code>drop database</code>来删除一个数据库：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> 数据库名\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="创建表-create" tabindex="-1"><a class="header-anchor" href="#创建表-create"><span>创建表 <code>CREATE</code></span></a></h4><p>在创建表之前，一定要先切换到我们要创建表的数据库内 <code>use xxxx;</code>，默认并不是你创建的数据库。</p><p>数据库创建完成后，我们一般通过<code>create table</code>语句来创建一张表：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>列名 数据类型<span class="token punctuation">[</span>列级约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>\n             列名 数据类型<span class="token punctuation">[</span>列级约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>\n             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n             <span class="token punctuation">[</span><span class="token punctuation">,</span>表级约束条件<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改表-alter" tabindex="-1"><a class="header-anchor" href="#修改表-alter"><span>修改表 <code>ALTER</code></span></a></h4><p>如果我们想修改表结构，我们可以通过<code>alter table</code>来进行修改：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token punctuation">[</span><span class="token keyword">ADD</span> 新列名 数据类型<span class="token punctuation">[</span>列级约束条件<span class="token punctuation">]</span><span class="token punctuation">]</span>\n                <span class="token punctuation">[</span><span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> 列名<span class="token punctuation">[</span><span class="token keyword">restrict</span><span class="token operator">|</span><span class="token keyword">cascade</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n                <span class="token punctuation">[</span><span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> 列名 新数据类型<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过<code>ADD</code>来添加一个新的列，通过<code>DROP</code>来删除一个列，不过我们可以添加<code>restrict</code>或<code>cascade</code>，默认是<code>restrict</code>，表示如果此列作为其他表的约束或视图引用到此列时，将无法删除，而<code>cascade</code>会强制连带引用此列的约束、视图一起删除。还可以通过<code>ALTER</code>来修改此列的属性。</p><h4 id="删除表-drop" tabindex="-1"><a class="header-anchor" href="#删除表-drop"><span>删除表 <code>DROP</code></span></a></h4><p>我们可以通过<code>drop table</code>来删除一个表：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">[</span><span class="token keyword">restrict</span><span class="token operator">|</span><span class="token keyword">cascade</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中restrict和cascade上面的效果一致。</p><h3 id="数据库操纵语言-dml" tabindex="-1"><a class="header-anchor" href="#数据库操纵语言-dml"><span>数据库操纵语言 (DML)</span></a></h3><h4 id="插入数据-insert-into" tabindex="-1"><a class="header-anchor" href="#插入数据-insert-into"><span>插入数据 <code>INSERT INTO</code></span></a></h4><p>通过使用<code>insert into</code>语句来向数据库中插入一条数据（一条记录）：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> 值<span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果插入的数据与列一一对应，那么可以省略列名，但是如果希望向指定列上插入数据，就需要给出列名：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span> 列名<span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们也可以一次性向数据库中插入多条数据：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span> 列名<span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们来试试看向我们刚刚创建的表中添加三条数据。</p><h4 id="修改数据-update" tabindex="-1"><a class="header-anchor" href="#修改数据-update"><span>修改数据 <code>UPDATE</code></span></a></h4><p>我们可以通过<code>update</code>语句来更新表中的数据：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 列名<span class="token operator">=</span>值<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> 条件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，SQL语句中的等于判断是<code>=</code></p><p><strong>警告：</strong> 如果忘记添加<code>WHERE</code>字句来限定条件，<strong>将使得整个表中此列的所有数据都被修改</strong>！</p><h4 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据"><span>删除数据</span></a></h4><p>我们可以通过使用<code>delete</code>来删除表中的数据：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过这种方式，<strong>将删除表中全部数据</strong>，我们也可以使用<code>where</code>来添加条件，只删除指定的数据：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',61)],p={},o=(0,s(3671).A)(p,[["render",function(a,n){return(0,e.uX)(),(0,e.CE)("div",null,t)}]]),l=JSON.parse('{"path":"/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb4.html","title":"javaweb - 数据库2","lang":"zh-CN","frontmatter":{"title":"javaweb - 数据库2","date":"2025-03-23T00:00:00.000Z","category":["code"],"tag":["javaweb","mysql"],"order":-0.7497,"description":"数据库 2 SQL 语句 结构化查询语言（Structured Query Language）简称SQL，这是一种特殊的语言，它专门用于数据库的操作。每一种数据库都支持SQL，但是他们之间会存在一些细微的差异，因此不同的数据库都存在自己的“方言”。 SQL语句不区分大小写（关键字推荐使用大写），它支持多行，并且需要使用;进行结尾！ SQL也支持注释，通...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/2-%E6%95%B0%E6%8D%AE%E5%BA%93/javaweb4.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - 数据库2"}],["meta",{"property":"og:description","content":"数据库 2 SQL 语句 结构化查询语言（Structured Query Language）简称SQL，这是一种特殊的语言，它专门用于数据库的操作。每一种数据库都支持SQL，但是他们之间会存在一些细微的差异，因此不同的数据库都存在自己的“方言”。 SQL语句不区分大小写（关键字推荐使用大写），它支持多行，并且需要使用;进行结尾！ SQL也支持注释，通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T16:02:13.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:published_time","content":"2025-03-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T16:02:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - 数据库2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-07T16:02:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"数据库 2","slug":"数据库-2","link":"#数据库-2","children":[]},{"level":2,"title":"SQL 语句","slug":"sql-语句","link":"#sql-语句","children":[{"level":3,"title":"数据库定义语言（DDL）","slug":"数据库定义语言-ddl","link":"#数据库定义语言-ddl","children":[{"level":4,"title":"SQL数据类型","slug":"sql数据类型","link":"#sql数据类型","children":[]},{"level":4,"title":"列级约束条件","slug":"列级约束条件","link":"#列级约束条件","children":[]},{"level":4,"title":"表级约束条件","slug":"表级约束条件","link":"#表级约束条件","children":[]},{"level":4,"title":"数据库操作","slug":"数据库操作","link":"#数据库操作","children":[]},{"level":4,"title":"创建表 CREATE","slug":"创建表-create","link":"#创建表-create","children":[]},{"level":4,"title":"修改表 ALTER","slug":"修改表-alter","link":"#修改表-alter","children":[]},{"level":4,"title":"删除表 DROP","slug":"删除表-drop","link":"#删除表-drop","children":[]}]},{"level":3,"title":"数据库操纵语言 (DML)","slug":"数据库操纵语言-dml","link":"#数据库操纵语言-dml","children":[{"level":4,"title":"插入数据 INSERT INTO","slug":"插入数据-insert-into","link":"#插入数据-insert-into","children":[]},{"level":4,"title":"修改数据 UPDATE","slug":"修改数据-update","link":"#修改数据-update","children":[]},{"level":4,"title":"删除数据","slug":"删除数据","link":"#删除数据","children":[]}]}]}],"git":{"createdTime":1751904133000,"updatedTime":1751904133000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":6.79,"words":2037},"filePathRelative":"code/javaweb/2-数据库/javaweb4.md","localizedDate":"2025年3月23日","excerpt":"<h2>数据库 2</h2>\\n<h2>SQL 语句</h2>\\n<p>结构化查询语言（Structured Query Language）简称SQL，这是一种特殊的语言，它专门用于数据库的操作。每一种数据库都支持SQL，但是他们之间会存在一些细微的差异，因此不同的数据库都存在自己的“方言”。</p>\\n<p>SQL语句<strong>不区分大小写</strong>（关键字推荐使用大写），它支持多行，并且需要使用<code>;</code>进行结尾！</p>\\n<p>SQL也支持注释，通过使用<code>--</code>或是<code>#</code>来编写注释内容，也可以使用<code>/*</code>来进行多行注释。</p>","autoDesc":true}')}}]);