"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[8766],{3671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},5865:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>T,data:()=>E});var t=a(7847);const e=a.p+"assets/img/17.cd240208.png",p=a.p+"assets/img/18.2fbac08a.png",o=a.p+"assets/img/25.4306236c.png",l=a.p+"assets/img/19.2f446bb6.png",c=a.p+"assets/img/20.c8777e58.png",i=a.p+"assets/img/21.03a016b6.png",u=a.p+"assets/img/22.df8b4eb5.png",r=a.p+"assets/img/23.86d76a21.png",d=a.p+"assets/img/24.db672ee3.png",k=(0,t.Fv)('<h2 id="常用框架介绍" tabindex="-1"><a class="header-anchor" href="#常用框架介绍"><span>常用框架介绍</span></a></h2><p>前面我们介绍了SpringBoot项目的基本搭建，相信各位小伙伴已经体验到SpringBoot 3带来的超强便捷性了，不过光靠这些还不够，我们还需要了解更多框架来丰富我们的网站，通过了解其他的SpringBoot整合框架，我们就可以在我们自己的Web服务器上实现更多更高级的功能，同时也是为了给我们后续学习前后端分离项目做准备。</p><h3 id="邮件发送模块" tabindex="-1"><a class="header-anchor" href="#邮件发送模块"><span>邮件发送模块</span></a></h3><p>我们在注册很多的网站时，都会遇到邮件或是手机号验证，也就是通过你的邮箱或是手机短信去接受网站发给你的注册验证信息，填写验证码之后，就可以完成注册了，同时，网站也会绑定你的手机号或是邮箱。</p><p>那么，像这样的功能，我们如何实现呢？SpringBoot已经给我们提供了封装好的邮件模块使用：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在学习邮件发送之前，我们需要先了解一下什么是电子邮件。</p><blockquote><p>电子邮件也是一种通信方式，是互联网应用最广的服务。通过网络的电子邮件系统，用户可以以非常低廉的价格（不管发送到哪里，都只需负担网费，实际上就是把信息发送到对方服务器而已）、非常快速的方式，与世界上任何一个地方的电子邮箱用户联系。</p></blockquote><p>要在Internet上提供电子邮件功能，必须有专门的电子邮件服务器。例如现在Internet很多提供邮件服务的厂商：新浪、搜狐、163、QQ邮箱等，他们都有自己的邮件服务器。这些服务器类似于现实生活中的邮局，它主要负责接收用户投递过来的邮件，并把邮件投递到邮件接收者的电子邮箱中。</p><p>实际上和Http一样，邮件发送也有自己的协议，也就是约定邮件数据长啥样以及如何通信。</p><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>比较常用的协议有两种：</p><ol><li>SMTP协议（主要用于发送邮件 Simple Mail Transfer Protocol）</li><li>POP3协议（主要用于接收邮件 Post Office Protocol 3）</li></ol><h4 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理"><span>基本原理</span></a></h4><p>整个发送/接收流程大致如下：</p><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>实际上每个邮箱服务器都有一个smtp发送服务器和pop3接收服务器</p><p>比如要从QQ邮箱发送邮件到163邮箱，那么我们只需要通过QQ邮箱客户端告知QQ邮箱的smtp服务器我们需要发送邮件，以及邮件的相关信息，然后QQ邮箱的smtp服务器就会帮助我们发送到163邮箱的pop3服务器上，163邮箱会通过163邮箱客户端告知对应用户收到一封新邮件。</p><p>而我们如果想要实现给别人发送邮件，那么就需要连接到对应电子邮箱的smtp服务器上，并告知其我们要发送邮件。</p><p>而SpringBoot已经帮助我们将最基本的底层通信全部实现了，我们只需要关心smtp服务器的地址以及我们要发送的邮件长啥样即可。</p><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h4>',21),m={href:"https://mail.163.com/",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Fv)('<p>我们需要在配置文件中告诉SpringBootMail我们的smtp服务器的地址以及你的邮箱账号和密码</p><p>首先我们要去设置中开启smtp/pop3服务才可以，开启后会得到一个随机生成的密钥，这个就是我们的密码。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">mail</span><span class="token punctuation">:</span>\n    <span class="token comment"># 163邮箱的地址为smtp.163.com，直接填写即可</span>\n    <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.163.com\n    <span class="token comment"># 你申请的163邮箱</span>\n    <span class="token key atrule">username</span><span class="token punctuation">:</span> javastudy111@163.com\n    <span class="token comment"># 注意密码是在开启smtp/pop3时自动生成的，记得保存一下，不然就找不到了</span>\n    <span class="token key atrule">password</span><span class="token punctuation">:</span> AZJTOAWZESLMHTNI\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，接着我们来进行一下测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>\n<span class="token keyword">class</span> <span class="token class-name">SpringBootTestApplicationTests</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// JavaMailSender是专门用于发送邮件的对象，自动配置类已经提供了Bean</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token class-name">JavaMailSender</span> sender<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// SimpleMailMessage是一个比较简易的邮件封装，支持设置一些比较简单内容</span>\n        <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//设置邮件标题</span>\n        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;PENGUIN!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//设置邮件内容</span>\n        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;penguin!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">//设置邮件发送给谁，可以多个，这里就发给你的QQ邮箱</span>\n        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">&quot;XXXX@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">//邮件发送者，这里要与配置文件中的保持一致</span>\n        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">&quot;javastudy111@163.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">//OK，万事俱备只欠发送</span>\n        sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要添加附件等更多功能，可以使用<code>MimeMessageHelper</code>来帮助我们完成：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">{</span>\n      <span class="token comment">//创建一个MimeMessage</span>\n    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> sender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//使用MimeMessageHelper来帮我们修改MimeMessage中的信息</span>\n    <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;lbwnb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">&quot;你的QQ号@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">&quot;javastudy111@163.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//发送修改好的MimeMessage</span>\n    sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现邮件注册功能" tabindex="-1"><a class="header-anchor" href="#实现邮件注册功能"><span>实现邮件注册功能</span></a></h4><p>最后，我们来尝试为我们的网站实现一个邮件注册功能</p><p>首先明确验证流程：请求验证码 -&gt; 生成验证码（临时有效，注意设定过期时间） -&gt; 用户输入验证码并填写注册信息 -&gt; 验证通过注册成功！</p><p>接着我们就来着手写一下。</p><h3 id="接口规则校验" tabindex="-1"><a class="header-anchor" href="#接口规则校验"><span>接口规则校验</span></a></h3><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常我们在使用SpringMvc框架编写接口时，很有可能用户发送的数据存在一些问题，比如下面这个接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>\n<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/submit&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span>\n                     <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;请求成功!&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口中，我们需要将用户名和密码分割然后打印，在正常情况下，因为用户名长度规定不小于5，如果用户发送的数据是没有问题的，那么就可以正常运行，这也是我们所希望的情况，但是如果用户发送的数据并不是按照规定的，那么就会直接报错</p><p>这个时候，我们就需要在请求进来之前进行校验了，最简单的办法就是判断一下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>\n<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/submit&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span>\n                     <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;请求成功!&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;请求失败&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这样就能直接解决问题，但是如果我们的每一个接口都需要这样去进行配置，那么是不是太麻烦了一点？</p><p>SpringBoot为我们提供了很方便的接口校验框架：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注解校验-validated" tabindex="-1"><a class="header-anchor" href="#注解校验-validated"><span>注解校验 <code>@Validated</code></span></a></h4><p>现在，我们可以直接使用注解完成全部接口的校验：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Validated</span>   <span class="token comment">//首先在Controller上开启接口校验</span>\n<span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token annotation punctuation">@ResponseBody</span>\n    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/submit&quot;</span><span class="token punctuation">)</span>\n    <span class="token comment">//使用@Length注解一步到位</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>  \n                         <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;请求成功!&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们的接口校验就可以快速进行配置了，一个接口就能搞定，不过这样依然会抛出一个异常，对用户不太友好，我们可以稍微处理一下</p><p>这里我们可以直接使用之前在SSM阶段中学习的异常处理Controller来自行处理这类异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidationController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@ResponseBody</span>\n    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ValidationException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//出现异常直接返回消息</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://s2.loli.net/2023/07/16/7JH6BzOhlUe9gkG.png" alt="image-20230716221420324" tabindex="0" loading="lazy"><figcaption>image-20230716221420324</figcaption></figure><p>除了@Length之外，我们也可以使用其他的接口来实现各种数据校验：</p><table><thead><tr><th style="text-align:center;">验证注解</th><th style="text-align:center;">验证的数据类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">@AssertFalse</td><td style="text-align:center;">Boolean,boolean</td><td style="text-align:center;">值必须是false</td></tr><tr><td style="text-align:center;">@AssertTrue</td><td style="text-align:center;">Boolean,boolean</td><td style="text-align:center;">值必须是true</td></tr><tr><td style="text-align:center;">@NotNull</td><td style="text-align:center;">任意类型</td><td style="text-align:center;">值不能是null</td></tr><tr><td style="text-align:center;">@Null</td><td style="text-align:center;">任意类型</td><td style="text-align:center;">值必须是null</td></tr><tr><td style="text-align:center;">@Min</td><td style="text-align:center;">BigDecimal、BigInteger、byte、short、int、long、double 以及任何Number或CharSequence子类型</td><td style="text-align:center;">大于等于@Min指定的值</td></tr><tr><td style="text-align:center;">@Max</td><td style="text-align:center;">同上</td><td style="text-align:center;">小于等于@Max指定的值</td></tr><tr><td style="text-align:center;">@DecimalMin</td><td style="text-align:center;">同上</td><td style="text-align:center;">大于等于@DecimalMin指定的值（超高精度）</td></tr><tr><td style="text-align:center;">@DecimalMax</td><td style="text-align:center;">同上</td><td style="text-align:center;">小于等于@DecimalMax指定的值（超高精度）</td></tr><tr><td style="text-align:center;">@Digits</td><td style="text-align:center;">同上</td><td style="text-align:center;">限制整数位数和小数位数上限</td></tr><tr><td style="text-align:center;">@Size</td><td style="text-align:center;">字符串、Collection、Map、数组等</td><td style="text-align:center;">长度在指定区间之内，如字符串长度、集合大小等</td></tr><tr><td style="text-align:center;">@Past</td><td style="text-align:center;">如 java.util.Date, java.util.Calendar 等日期类型</td><td style="text-align:center;">值必须比当前时间早</td></tr><tr><td style="text-align:center;">@Future</td><td style="text-align:center;">同上</td><td style="text-align:center;">值必须比当前时间晚</td></tr><tr><td style="text-align:center;">@NotBlank</td><td style="text-align:center;">CharSequence及其子类</td><td style="text-align:center;">值不为空，在比较时会去除字符串的首位空格</td></tr><tr><td style="text-align:center;">@Length</td><td style="text-align:center;">CharSequence及其子类</td><td style="text-align:center;">字符串长度在指定区间内</td></tr><tr><td style="text-align:center;">@NotEmpty</td><td style="text-align:center;">CharSequence及其子类、Collection、Map、数组</td><td style="text-align:center;">值不为null且长度不为空（字符串长度不为0，集合大小不为0）</td></tr><tr><td style="text-align:center;">@Range</td><td style="text-align:center;">BigDecimal、BigInteger、CharSequence、byte、short、int、long 以及原子类型和包装类型</td><td style="text-align:center;">值在指定区间内</td></tr><tr><td style="text-align:center;">@Email</td><td style="text-align:center;">CharSequence及其子类</td><td style="text-align:center;">值必须是邮件格式</td></tr><tr><td style="text-align:center;">@Pattern</td><td style="text-align:center;">CharSequence及其子类</td><td style="text-align:center;">值需要与指定的正则表达式匹配</td></tr><tr><td style="text-align:center;">@Valid</td><td style="text-align:center;">任何非原子类型</td><td style="text-align:center;">用于验证对象属性</td></tr></tbody></table><h4 id="对象处理" tabindex="-1"><a class="header-anchor" href="#对象处理"><span>对象处理</span></a></h4><p>虽然这样已经很方便了，但是在遇到对象的时候，依然不太方便，比如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>\n<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/submit&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//直接使用对象接收</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;请求成功!&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时接口是以对象形式接收前端发送的表单数据的，这个时候就没办法向上面一样编写对应的校验规则了，那么现在又该怎么做呢？</p><p>对应对象类型，我们也可以进行验证，方法如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>\n<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/submit&quot;</span><span class="token punctuation">)</span>  \n<span class="token comment">// 在参数上添加@Valid注解表示需要验证</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;请求成功!&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">//只需要在对应的字段上添加校验的注解即可</span>\n    <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样当受到请求时，就会对对象中的字段进行校验了，这里我们稍微修改一下ValidationController的错误处理</p><p>对于实体类接收参数的验证，会抛出<code>MethodArgumentNotValidException</code>异常，这里也进行一下处理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseBody</span>\n<span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ConstraintViolationException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">MethodArgumentNotValidException</span> exception<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;未知错误&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> exception<span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;未知错误&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以正确返回对应的错误信息了。</p><h3 id="接口文档生成-swagger" tabindex="-1"><a class="header-anchor" href="#接口文档生成-swagger"><span>接口文档生成 <code>Swagger</code></span></a></h3><p>在前后端分离开发中，前端现在由专业的人来做，而我们往往只需要关心后端提供什么接口给前端人员调用，我们的工作被进一步细分了，这个时候为前端开发人员提供一个可以参考的文档是很有必要的。</p><p>但是这样的一个文档，我们也不可能单独写一个项目去进行维护，并且随着我们的后端项目不断更新，文档也需要跟随更新，这显然是很麻烦的一件事情，那么有没有一种比较好的解决方案呢？</p><p>当然有，那就是丝袜哥：Swagger</p><p>Swagger的主要功能如下：</p><ul><li>支持 API 自动生成同步的在线文档：使用 Swagger 后可以直接通过代码生成文档，不再需要自己手动编写接口文档了，对程序员来说非常方便，可以节约写文档的时间去学习新技术。</li><li>提供 Web 页面在线测试 API：光有文档还不够，Swagger 生成的文档还支持在线测试。参数和格式都定好了，直接在界面上输入参数对应的值即可在线测试接口。</li></ul>',48),g={href:"https://springdoc.org/",target:"_blank",rel:"noopener noreferrer"},b=(0,t.Fv)('<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springdoc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springdoc-openapi-starter-webmvc-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),h={href:"http://localhost:8080/swagger-ui/index.html",target:"_blank",rel:"noopener noreferrer"},y=(0,t.Fv)('<figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>可以看到这个开发文档中自动包含了我们定义的接口，并且还有对应的实体类也放在了下面。这个页面不仅仅是展示接口，也可以直接在上面进行调试</p><p>这就非常方便了，不仅前端人员可以快速查询接口定义，我们自己也可以在线进行接口测试，直接抛弃PostMan之类的软件了。</p><h4 id="自定义界面" tabindex="-1"><a class="header-anchor" href="#自定义界面"><span>自定义界面</span></a></h4><p>虽然Swagger的UI界面已经可以很好地展示后端提供的接口信息了，但是非常的混乱</p><p>我们来看看如何配置接口的一些描述信息。首先我们的页面肯定要展示一下这个文档的一些信息，只需要一个Bean就能搞定：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfigutaion</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">OpenAPI</span> <span class="token function">springDocOpenAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OpenAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;图书管理系统 - 在线API接口文档&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//设置API文档网站标题</span>\n                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;这是一个图书管理系统的后端API文档，欢迎前端人员查阅！&quot;</span><span class="token punctuation">)</span> <span class="token comment">//网站介绍</span>\n                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;2.0&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//当前API版本</span>\n                <span class="token punctuation">.</span><span class="token function">license</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">License</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;我的B站个人主页&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//遵循的协议，这里拿来写其他的也行</span>\n                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">&quot;https://space.bilibili.com/37737161&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们的页面中就会展示自定义的文本信息了</p><h4 id="对应controller编写api描述信息" tabindex="-1"><a class="header-anchor" href="#对应controller编写api描述信息"><span>对应<code>Controller</code>编写API描述信息</span></a></h4><p>接着我们来看看如何为一个Controller编写API描述信息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//使用@Tag注解来添加Controller描述信息</span>\n<span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;账户验证相关&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;包括用户登录、注册、验证码请求等操作。&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以直接在类名称上面添加<code>@Tag</code>注解，并填写相关信息，来为当前的Controller设置描述信息。</p><p>接着我们可以为所有的请求映射配置描述信息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApiResponses</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n       <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>responseCode <span class="token operator">=</span> <span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;测试成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>responseCode <span class="token operator">=</span> <span class="token string">&quot;500&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;测试失败&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//不同返回状态码描述</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">&quot;请求用户数据测试接口&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//接口功能描述</span>\n<span class="token annotation punctuation">@ResponseBody</span>\n<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>\n<span class="token comment">//请求参数描述和样例</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;测试文本数据&quot;</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">&quot;KFCvivo50&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于那些不需要展示在文档中的接口，我们也可以将其忽略掉：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Hidden</span>\n<span class="token annotation punctuation">@ResponseBody</span>\n<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于实体类，我们也可以编写对应的API接口文档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;用户信息实体类&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;用户编号&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;用户名称&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;用户邮箱&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;用户密码&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就可以在文档中查看实体类简介以及各个属性的介绍了。</p><h4 id="生产环境关闭文档" tabindex="-1"><a class="header-anchor" href="#生产环境关闭文档"><span>生产环境关闭文档</span></a></h4><p>不过，这种文档只适合在开发环境下生成，如果是生产环境，我们需要关闭文档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>springdoc<span class="token operator">:</span>\n  api<span class="token operator">-</span>docs<span class="token operator">:</span>\n    enabled<span class="token operator">:</span> <span class="token boolean">false</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以关闭了。</p><h3 id="项目运行监控" tabindex="-1"><a class="header-anchor" href="#项目运行监控"><span>项目运行监控</span></a></h3><p>我们的项目开发完成之后，肯定是需要上线运行的，不过在项目的运行过程中，我们可能需要对其进行监控，从而实时观察其运行状态，并在发生问题时做出对应调整，因此，集成项目运行监控就很有必要了。</p><p>SpringBoot框架提供了<code>spring-boot-starter-actuator</code>模块来实现监控效果：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',27),q={href:"https://docs.spring.io/spring-boot/docs/3.1.1/actuator-api/htmlsingle/#overview",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Lk)("p",null,[(0,t.eW)("默认情况下，所有Actuator自动注册的接口路径都是"),(0,t.Lk)("code",null,"/actuator/{id}"),(0,t.eW)("格式的（可在配置文件中修改）")],-1),x={href:"http://localhost:8080/actuator/health",target:"_blank",rel:"noopener noreferrer"},w={href:"http://localhost:8080/actuator",target:"_blank",rel:"noopener noreferrer"},S=(0,t.Fv)('<div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;_links&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;self&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//actuator自己的信息</span>\n    <span class="token property">&quot;health-path&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/health/{*path}&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;health&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/health&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span>  <span class="token comment">//应用程序健康情况监控</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以来修改一下配置文件，让其暴露全部接口：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">management</span><span class="token punctuation">:</span>\n  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>\n    <span class="token key atrule">web</span><span class="token punctuation">:</span>\n      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>\n        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>   <span class="token comment">#使用*表示暴露全部接口</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启服务器，再次获取可用接口就可以看到全部的信息了，这里就不全部搬出来了，只列举一些常用的：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;_links&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//包含Actuator自己的信息</span>\n    <span class="token property">&quot;self&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//已注册的Bean信息</span>\n    <span class="token property">&quot;beans&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/beans&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//应用程序健康情况监控</span>\n    <span class="token property">&quot;health&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/health&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;health-path&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/health/{*path}&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//应用程序运行信息</span>\n    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/info&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//系统环境相关信息</span>\n    <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/env&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;env-toMatch&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/env/{toMatch}&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//日志相关信息</span>\n    <span class="token property">&quot;loggers&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/loggers&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;loggers-name&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/loggers/{name}&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//快速获取JVM堆转储文件</span>\n    <span class="token property">&quot;heapdump&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/heapdump&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//快速获取JVM线程转储信息</span>\n    <span class="token property">&quot;threaddump&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/threaddump&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//计划任务相关信息</span>\n    <span class="token property">&quot;scheduledtasks&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/scheduledtasks&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//请求映射相关信息</span>\n    <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;href&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/actuator/mappings&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;templated&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    ...\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),j={href:"http://localhost:8080/actuator/info",target:"_blank",rel:"noopener noreferrer"},M=(0,t.Fv)('<p>我们发现，这里得到的数据是一个空的，这是因为我们还需要单独开启对应模块才可以：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">management</span><span class="token punctuation">:</span>\n  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>\n    <span class="token key atrule">web</span><span class="token punctuation">:</span>\n      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>\n        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>\n  <span class="token comment">#开启某些默认为false的信息</span>\n  <span class="token key atrule">info</span><span class="token punctuation">:</span>\n    <span class="token key atrule">env</span><span class="token punctuation">:</span>\n      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">os</span><span class="token punctuation">:</span>\n      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">java</span><span class="token punctuation">:</span>\n      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次请求，就能获得运行环境相关信息了，比如这里的Java版本、JVM信息、操作系统信息等：</p><figure><img src="'+l+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>我们也可以让health显示更加详细的系统状态信息，这里我们开启一下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">management</span><span class="token punctuation">:</span>\n    <span class="token punctuation">...</span>\n  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>\n    <span class="token key atrule">health</span><span class="token punctuation">:</span>\n      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always  <span class="token comment">#展示详细内容</span>\n    <span class="token key atrule">env</span><span class="token punctuation">:</span>\n      <span class="token key atrule">show-values</span><span class="token punctuation">:</span> always  <span class="token comment">#总是直接展示值</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在就能查看当前系统占用相关信息了，比如下面的磁盘占用、数据库等信息：</p><figure><img src="'+c+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>包括完整的系统环境信息，比如我们配置的服务器8080端口：</p><figure><img src="'+i+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>我们只需要通过这些接口就能快速获取到当前应用程序的运行信息了。</p><p>高级一点的还有线程转储和堆内存转储文件直接生成，便于我们对Java程序的运行情况进行分析</p>',12),B={href:"http://localhost:8080/actuator/heapdump",target:"_blank",rel:"noopener noreferrer"},I=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:u,alt:"alt text",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption",null,"alt text")],-1),L=(0,t.Lk)("p",null,"可以看到其中创建的byte数组对象计数达到了72020个，其中我们自己的TestController对象只有有一个：",-1),A=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:r,alt:"alt text",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption",null,"alt text")],-1),C={href:"http://localhost:8080/actuator/threaddump",target:"_blank",rel:"noopener noreferrer"},W=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:d,alt:"alt text",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption",null,"alt text")],-1),P={},T=(0,a(3671).A)(P,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[k,(0,t.Lk)("p",null,[(0,t.eW)("这里以163邮箱 "),(0,t.Lk)("a",m,[(0,t.eW)("https://mail.163.com"),(0,t.bF)(a)]),(0,t.eW)(" 为例")]),v,(0,t.Lk)("p",null,[(0,t.eW)("结合Spring框架（Spring-doc，官网："),(0,t.Lk)("a",g,[(0,t.eW)("https://springdoc.org/"),(0,t.bF)(a)]),(0,t.eW)("），Swagger可以很轻松地利用注解以及扫描机制，来快速生成在线文档，以实现当我们项目启动之后，前端开发人员就可以打开Swagger提供的前端页面，查看和测试接口。依赖如下：")]),b,(0,t.Lk)("p",null,[(0,t.eW)("项目启动之后，我们可以直接访问："),(0,t.Lk)("a",h,[(0,t.eW)("http://localhost:8080/swagger-ui/index.html"),(0,t.bF)(a)]),(0,t.eW)("，就能看到我们的开发文档了：")]),y,(0,t.Lk)("p",null,[(0,t.eW)("添加好之后，Actuator会自动注册一些接口用于查询当前SpringBoot应用程序的状态，官方文档如下："),(0,t.Lk)("a",q,[(0,t.eW)("https://docs.spring.io/spring-boot/docs/3.1.1/actuator-api/htmlsingle/#overview"),(0,t.bF)(a)])]),f,(0,t.Lk)("p",null,[(0,t.eW)("比如我们想要查询当前服务器的健康状态，就可以访问这个接口："),(0,t.Lk)("a",x,[(0,t.eW)("http://localhost:8080/actuator/health"),(0,t.bF)(a)]),(0,t.eW)("，结果会以JSON格式返回给我们：")]),(0,t.Lk)("p",null,[(0,t.eW)("直接访问："),(0,t.Lk)("a",w,[(0,t.eW)("http://localhost:8080/actuator"),(0,t.bF)(a)]),(0,t.eW)(" 根路径，可以查看当前已经开启的所有接口，默认情况下只开启以下接口：")]),S,(0,t.Lk)("p",null,[(0,t.eW)("比如我们可以通过 "),(0,t.Lk)("a",j,[(0,t.eW)("http://localhost:8080/actuator/info"),(0,t.bF)(a)]),(0,t.eW)(" 接口查看当前系统运行环境信息")]),M,(0,t.Lk)("p",null,[(0,t.eW)("这里我们获取一下堆内存转储文件："),(0,t.Lk)("a",B,[(0,t.eW)("http://localhost:8080/actuator/heapdump"),(0,t.bF)(a)]),(0,t.eW)("，文件下载之后直接使用IDEA就能打开：")]),I,L,A,(0,t.Lk)("p",null,[(0,t.eW)("以及对应的线程转储信息，也可以通过 "),(0,t.Lk)("a",C,[(0,t.eW)("http://localhost:8080/actuator/threaddump"),(0,t.bF)(a)]),(0,t.eW)(" 直接获取：")]),W])}]]),E=JSON.parse('{"path":"/code/java_ssm/4-SpringBoot/boot4.html","title":"Javassm - SpringBoot4","lang":"zh-CN","frontmatter":{"title":"Javassm - SpringBoot4","date":"2025-10-11T00:00:00.000Z","category":["code"],"tag":["javassm","Spring"],"order":-0.58,"description":"常用框架介绍 前面我们介绍了SpringBoot项目的基本搭建，相信各位小伙伴已经体验到SpringBoot 3带来的超强便捷性了，不过光靠这些还不够，我们还需要了解更多框架来丰富我们的网站，通过了解其他的SpringBoot整合框架，我们就可以在我们自己的Web服务器上实现更多更高级的功能，同时也是为了给我们后续学习前后端分离项目做准备。 邮件发送模...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_ssm/4-SpringBoot/boot4.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - SpringBoot4"}],["meta",{"property":"og:description","content":"常用框架介绍 前面我们介绍了SpringBoot项目的基本搭建，相信各位小伙伴已经体验到SpringBoot 3带来的超强便捷性了，不过光靠这些还不够，我们还需要了解更多框架来丰富我们的网站，通过了解其他的SpringBoot整合框架，我们就可以在我们自己的Web服务器上实现更多更高级的功能，同时也是为了给我们后续学习前后端分离项目做准备。 邮件发送模..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2023/07/16/7JH6BzOhlUe9gkG.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-12T11:52:54.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Javassm - SpringBoot4"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javassm"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2025-10-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-12T11:52:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - SpringBoot4\\",\\"image\\":[\\"https://s2.loli.net/2023/07/16/7JH6BzOhlUe9gkG.png\\"],\\"datePublished\\":\\"2025-10-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-12T11:52:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"常用框架介绍","slug":"常用框架介绍","link":"#常用框架介绍","children":[{"level":3,"title":"邮件发送模块","slug":"邮件发送模块","link":"#邮件发送模块","children":[{"level":4,"title":"基本原理","slug":"基本原理","link":"#基本原理","children":[]},{"level":4,"title":"例子","slug":"例子","link":"#例子","children":[]},{"level":4,"title":"实现邮件注册功能","slug":"实现邮件注册功能","link":"#实现邮件注册功能","children":[]}]},{"level":3,"title":"接口规则校验","slug":"接口规则校验","link":"#接口规则校验","children":[{"level":4,"title":"注解校验 @Validated","slug":"注解校验-validated","link":"#注解校验-validated","children":[]},{"level":4,"title":"对象处理","slug":"对象处理","link":"#对象处理","children":[]}]},{"level":3,"title":"接口文档生成 Swagger","slug":"接口文档生成-swagger","link":"#接口文档生成-swagger","children":[{"level":4,"title":"自定义界面","slug":"自定义界面","link":"#自定义界面","children":[]},{"level":4,"title":"对应Controller编写API描述信息","slug":"对应controller编写api描述信息","link":"#对应controller编写api描述信息","children":[]},{"level":4,"title":"生产环境关闭文档","slug":"生产环境关闭文档","link":"#生产环境关闭文档","children":[]}]},{"level":3,"title":"项目运行监控","slug":"项目运行监控","link":"#项目运行监控","children":[]}]}],"git":{"createdTime":1760269974000,"updatedTime":1760269974000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":15.9,"words":4769},"filePathRelative":"code/java_ssm/4-SpringBoot/boot4.md","localizedDate":"2025年10月11日","excerpt":"<h2>常用框架介绍</h2>\\n<p>前面我们介绍了SpringBoot项目的基本搭建，相信各位小伙伴已经体验到SpringBoot 3带来的超强便捷性了，不过光靠这些还不够，我们还需要了解更多框架来丰富我们的网站，通过了解其他的SpringBoot整合框架，我们就可以在我们自己的Web服务器上实现更多更高级的功能，同时也是为了给我们后续学习前后端分离项目做准备。</p>\\n<h3>邮件发送模块</h3>\\n<p>我们在注册很多的网站时，都会遇到邮件或是手机号验证，也就是通过你的邮箱或是手机短信去接受网站发给你的注册验证信息，填写验证码之后，就可以完成注册了，同时，网站也会绑定你的手机号或是邮箱。</p>","autoDesc":true}')}}]);