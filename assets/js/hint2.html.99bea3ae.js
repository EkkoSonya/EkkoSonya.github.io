"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[8671],{3671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},4934:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>o,data:()=>i});var t=s(7847);const e=s.p+"assets/img/1.8c87ea7f.png",p=[(0,t.Fv)('<ol><li><p>-128 到 +127 以内的int值都是自动包装好，所以对象都是一个 <img src="'+e+'" alt="alt text" loading="lazy"></p></li><li><p><code>Scanner</code> 的 <code>nextInt</code><code>Scanner scanner = new Scanner(System.in);</code><code>scanner.nextInt()</code> 只读整数，不读换行符（\\n） 换行符仍然留在输入缓冲区中，需要清理对应的换行符</p></li><li><p>Java 中 finally 的行为</p><p>不论 try 里是正常结束、遇到 return、遇到异常，finally 块里的内容都会被执行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InputMismatchException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的不是数字，重新输入&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关键：清除输入缓冲区的换行符</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使这样，也会执行 <code>finally</code>，这样解决了缓冲区存在 <code>\\n</code> 的问题</p></li><li><p>consume</p></li></ol>',1)],c={},o=(0,s(3671).A)(c,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,p)}]]),i=JSON.parse('{"path":"/code/java_hint/hint2.html","title":"hint2","lang":"zh-CN","frontmatter":{"title":"hint2","date":"2025-06-16T00:00:00.000Z","category":["code"],"tag":["java hint"],"order":-0.7482,"description":" -128 到 +127 以内的int值都是自动包装好，所以对象都是一个 alt text Scanner 的 nextInt Scanner scanner = new Scanner(System.in); scanner.nextInt() 只读整数，不读换行符（\\\\n） 换行符仍然留在输入缓冲区中，需要清理对应的换行符 Java 中 finall...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_hint/hint2.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"hint2"}],["meta",{"property":"og:description","content":" -128 到 +127 以内的int值都是自动包装好，所以对象都是一个 alt text Scanner 的 nextInt Scanner scanner = new Scanner(System.in); scanner.nextInt() 只读整数，不读换行符（\\\\n） 换行符仍然留在输入缓冲区中，需要清理对应的换行符 Java 中 finall..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-20T17:43:25.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"java hint"}],["meta",{"property":"article:published_time","content":"2025-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-20T17:43:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"hint2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-20T17:43:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1752079379000,"updatedTime":1753033405000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":2}]},"readingTime":{"minutes":0.61,"words":183},"filePathRelative":"code/java_hint/hint2.md","localizedDate":"2025年6月16日","excerpt":"<ol>\\n<li>\\n<p>-128 到 +127 以内的int值都是自动包装好，所以对象都是一个\\n</p>\\n</li>\\n<li>\\n<p><code>Scanner</code> 的 <code>nextInt</code>\\n<code>Scanner scanner = new Scanner(System.in);</code>\\n<code>scanner.nextInt()</code> 只读整数，不读换行符（\\\\n）\\n换行符仍然留在输入缓冲区中，需要清理对应的换行符</p>\\n</li>\\n<li>\\n<p>Java 中 finally 的行为</p>\\n<p>不论 try 里是正常结束、遇到 return、遇到异常，finally 块里的内容都会被执行。</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code>  <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>prompt<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">return</span> scanner<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">nextInt</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InputMismatchException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>err<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"输入的不是数字，重新输入\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span>\\n      scanner<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">nextLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 关键：清除输入缓冲区的换行符</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</code></pre></div><p>即使这样，也会执行 <code>finally</code>，这样解决了缓冲区存在 <code>\\\\n</code> 的问题</p>\\n</li>\\n<li>\\n<p>consume</p>\\n</li>\\n</ol>","autoDesc":true}')}}]);