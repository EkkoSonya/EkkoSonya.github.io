"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[773],{3671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},5459:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>m,data:()=>v});var e=a(7847);const t=a.p+"assets/img/8.1ba0d1e3.png",o=a.p+"assets/img/9.225fb7f9.png",p=(0,e.Fv)('<h2 id="lombok1" tabindex="-1"><a class="header-anchor" href="#lombok1"><span>Lombok1</span></a></h2><p>我们发现，在以往编写项目时，尤其是在类进行类内部成员字段封装时，需要编写大量的<code>get/set</code>方法，这不仅使得我们类定义中充满了get和set方法，同时如果字段名称发生改变，又要挨个进行修改，甚至当字段变得很多时，构造方法的编写会非常麻烦！</p><p>通过使用 Lombok（小辣椒）就可以解决这样的问题！</p><figure><img src="'+t+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>使用原生方式和小辣椒方式编写类的区别，首先是传统方式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sid<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sid<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">//长！</span>\n        <span class="token keyword">return</span> sid<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sid<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//到！</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">//爆！</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//炸！</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而使用Lombok之后：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>\n<span class="token annotation punctuation">@Setter</span>\n<span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sid<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，使用Lombok之后，<strong>只需要添加几个注解</strong>，就能够解决掉我们之前长长的一串代码！</p><h3 id="配置lombok" tabindex="-1"><a class="header-anchor" href="#配置lombok"><span>配置Lombok</span></a></h3>',10),c={href:"https://projectlombok.org/download",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Lk)("li",null,"然后我们要安装一下Lombok插件，由于IDEA默认都安装了Lombok的插件，因此直接导入依赖后就可以使用了。",-1),i=(0,e.Lk)("li",null,"重启IDEA",-1),u=(0,e.Fv)('<p>Lombok 是一种插件化注解API，是通过<strong>添加注解</strong>来实现的，然后在<code>javac</code>进行编译的时候，进行处理(<strong>编译阶段处理</strong>)。</p><p>Java的编译过程可以分成三个阶段： <img src="'+o+'" alt="img" loading="lazy"></p><ol><li>所有源文件会被解析成语法树。</li><li>调用注解处理器。如果注解处理器产生了新的源文件，新文件也要进行编译。</li><li>最后，语法树会被分析并转化成类文件。</li></ol>',3),k={href:"https://github.com/rzwitserloot/lombok/blob/master/src/core/lombok/core/AnnotationProcessor.java",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Fv)('<h3 id="使用lombok" tabindex="-1"><a class="header-anchor" href="#使用lombok"><span>使用Lombok</span></a></h3><p>我们通过实战来演示一下Lombok的实用注解：</p><ul><li><p>我们通过添加<code>@Getter</code>和<code>@Setter</code>来为当前类的所有字段生成<code>get/set</code>方法，他们可以添加到类或是字段上，注意静态字段不会生成，final字段无法生成set方法。</p><ul><li>我们还可以使用<code>@Accessors</code>来控制生成<code>Getter</code>和<code>Setter</code>的样式。</li></ul></li><li><p>我们通过添加<code>@ToString</code>来为当前类生成预设的toString方法。</p></li><li><p>我们可以通过添加<code>@EqualsAndHashCode</code>来快速生成比较和哈希值方法。</p></li><li><p>我们可以通过添加<code>@AllArgsConstructor</code>和<code>@NoArgsConstructor</code>来快速生成全参构造和无参构造。</p></li><li><p>我们可以添加<code>@RequiredArgsConstructor</code>来快速生成参数只包含<code>final</code>或被标记为<code>@NonNull</code>的成员字段。</p></li><li><p>使用<code>@Data</code>能代表<code>@Setter</code>、<code>@Getter</code>、<code>@RequiredArgsConstructor</code>、<code>@ToString</code>、<code>@EqualsAndHashCode</code>全部注解。</p><ul><li>一旦使用<code>@Data</code>就不建议此类有继承关系，因为<code>equal</code>方法可能不符合预期结果（尤其是仅比较子类属性）。</li></ul></li><li><p>使用<code>@Value</code>与<code>@Data</code>类似，但是并不会生成setter并且成员属性都是final的。</p></li><li><p>使用<code>@SneakyThrows</code>来自动生成try-catch代码块。</p></li><li><p>使用<code>@Cleanup</code>作用与局部变量，在最后自动调用其<code>close()</code>方法（可以自由更换）</p></li><li><p>使用<code>@Builder</code>来快速生成<strong>建造者模式</strong>。</p><ul><li>通过使用<code>@Builder.Default</code>来指定默认值。</li><li>通过使用<code>@Builder.ObtainVia</code>来指定默认值的获取方式。</li></ul></li></ul>',3),d={},m=(0,a(3671).A)(d,[["render",function(n,s){const a=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[p,(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.eW)("首先我们需要导入Lombok的jar依赖，和jdbc依赖是一样的，放在项目目录下直接导入就行了。可以在这里进行下载："),(0,e.Lk)("a",c,[(0,e.eW)("https://projectlombok.org/download"),(0,e.bF)(a)])]),l,i]),u,(0,e.Lk)("p",null,[(0,e.eW)("实际上在上述的第二阶段，会执行*"),(0,e.Lk)("a",k,[(0,e.eW)("lombok.core.AnnotationProcessor"),(0,e.bF)(a)]),(0,e.eW)("*，它所做的工作就是我们上面所说的，修改语法树。")]),r])}]]),v=JSON.parse('{"path":"/code/javaweb/javaweb10.html","title":"javaweb - Lombok1","lang":"zh-CN","frontmatter":{"title":"javaweb - Lombok1","date":"2024-05-26T00:00:00.000Z","category":["code"],"tag":["javaweb","Lombok"],"order":-0.7491,"description":"Lombok1 我们发现，在以往编写项目时，尤其是在类进行类内部成员字段封装时，需要编写大量的get/set方法，这不仅使得我们类定义中充满了get和set方法，同时如果字段名称发生改变，又要挨个进行修改，甚至当字段变得很多时，构造方法的编写会非常麻烦！ 通过使用 Lombok（小辣椒）就可以解决这样的问题！ imgimg 使用原生方式和小辣椒方式编写...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/javaweb10.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - Lombok1"}],["meta",{"property":"og:description","content":"Lombok1 我们发现，在以往编写项目时，尤其是在类进行类内部成员字段封装时，需要编写大量的get/set方法，这不仅使得我们类定义中充满了get和set方法，同时如果字段名称发生改变，又要挨个进行修改，甚至当字段变得很多时，构造方法的编写会非常麻烦！ 通过使用 Lombok（小辣椒）就可以解决这样的问题！ imgimg 使用原生方式和小辣椒方式编写..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T16:10:41.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"Lombok"}],["meta",{"property":"article:published_time","content":"2024-05-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T16:10:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - Lombok1\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-10T16:10:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"Lombok1","slug":"lombok1","link":"#lombok1","children":[{"level":3,"title":"配置Lombok","slug":"配置lombok","link":"#配置lombok","children":[]},{"level":3,"title":"使用Lombok","slug":"使用lombok","link":"#使用lombok","children":[]}]}],"git":{"createdTime":1749315677000,"updatedTime":1749571841000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":4}]},"readingTime":{"minutes":2.98,"words":894},"filePathRelative":"code/javaweb/javaweb10.md","localizedDate":"2024年5月26日","excerpt":"<h2>Lombok1</h2>\\n<p>我们发现，在以往编写项目时，尤其是在类进行类内部成员字段封装时，需要编写大量的<code>get/set</code>方法，这不仅使得我们类定义中充满了get和set方法，同时如果字段名称发生改变，又要挨个进行修改，甚至当字段变得很多时，构造方法的编写会非常麻烦！</p>\\n<p>通过使用 Lombok（小辣椒）就可以解决这样的问题！</p>\\n<figure><figcaption>img</figcaption></figure>\\n<p>使用原生方式和小辣椒方式编写类的区别，首先是传统方式：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Student</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Integer</span> sid<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> sex<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Integer</span> sid<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> sex<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>sid <span class=\\"token operator\\">=</span> sid<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>sex <span class=\\"token operator\\">=</span> sex<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Integer</span> <span class=\\"token function\\">getSid</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>             <span class=\\"token comment\\">//长！</span>\\n        <span class=\\"token keyword\\">return</span> sid<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setSid</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Integer</span> sid<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>     <span class=\\"token comment\\">//到！</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>sid <span class=\\"token operator\\">=</span> sid<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>             <span class=\\"token comment\\">//爆！</span>\\n        <span class=\\"token keyword\\">return</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setName</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>    <span class=\\"token comment\\">//炸！</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getSex</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sex<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setSex</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> sex<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>sex <span class=\\"token operator\\">=</span> sex<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);