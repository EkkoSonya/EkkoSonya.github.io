"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[6479],{3671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},3888:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var t=a(7847);const p=[(0,t.Fv)('<h2 id="面向对象高级篇-2" tabindex="-1"><a class="header-anchor" href="#面向对象高级篇-2"><span>面向对象高级篇 2</span></a></h2><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h3><p>数组是相同类型数据的有序集合，数组可以代表任何相同类型的一组内容（包括引用类型和基本类型）其中存放的每一个数据称为数组的一个元素。</p><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><p>数组类型比较特殊，<strong>它本身也是类，但是编程不可见</strong>（底层C++写的，在运行时动态创建）<br> 即使是基本类型的数组，也是以对象的形式存在的，并不是基本数据类型。所以，我们要创建一个数组，同样需要使用 <code>new</code> 关键字</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//类型[]就表示这个是一个数组类型</span>\n    <span class="token class-name">Object</span> obj <span class="token operator">=</span> array<span class="token punctuation">;</span>   <span class="token comment">//因为同样是类，肯定是继承自Object的，所以说可以直接向上转型</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建出来的数组每个位置上<strong>都有默认值</strong>，如果是<strong>引用类型，就是null</strong>，如果是<strong>基本数据类型，就是0，或者是false</strong>，跟对象成员变量的默认值是一样的<br> 其他定义方法:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 变量名称 <span class="token operator">=</span> <span class="token keyword">new</span> 类型<span class="token punctuation">[</span>数组大小<span class="token punctuation">]</span><span class="token punctuation">;</span>\n类型 变量名称<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> 类型<span class="token punctuation">[</span>数组大小<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//支持C语言样式，但不推荐！</span>\n\n类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 变量名称 <span class="token operator">=</span> <span class="token keyword">new</span> 类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//静态初始化（直接指定值和大小）</span>\n类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 变量名称 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">//同上，但是只能在定义时赋值</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h4><p>数组的 length 是在一开始就确定的，而且是 <strong>final类型</strong> 的，不允许进行修改，也就是说数组的长度一旦确定，不能随便进行修改，如果需要使用更大的数组，只能重新创建。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前数组长度为：&quot;</span><span class="token operator">+</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//length属性是int类型的值，表示当前数组长度，长度是在一开始创建数组的时候就确定好的</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>array 虽然是继承于 Object，但是，很遗憾，除了clone()之外，这些方法并没有被重写，也就是说依然是采用的Object中的默认实现，所以可能不满足真实需求。</p><h4 id="访问元素" tabindex="-1"><a class="header-anchor" href="#访问元素"><span>访问元素</span></a></h4><p><code>for</code> 或者 <code>foreach</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//int i就是每一个数组中的元素，array就是我们要遍历的数组</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//每一轮循环，i都会更新成数组中下一个元素</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h4><p>这里需要特别说一下，对于基本类型的数组来说，是不支持自动装箱和拆箱的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test <span class="token operator">=</span> arr<span class="token punctuation">;</span>  <span class="token comment">// 这样是不能赋值的 会报错</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于基本数据类型和引用类型不同，所以说int类型的数组时不能被Object类型的数组变量接收的, 即 <code>int[] arr = new int[10]</code> 是不能 <code>Object[] arrav = arr</code> 这样的</p><p>但是如果是引用类型的话，是可以的,因为父类都是 <code>Object</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token comment">//数组同样支持向上转型</span>\n\n      <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> arr<span class="token punctuation">;</span>   <span class="token comment">//也支持向下转型</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="final性质" tabindex="-1"><a class="header-anchor" href="#final性质"><span><code>final</code>性质</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token comment">// 值还是可以修改，只是数组的地址不准修改</span>\n      a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">// 允许</span>\n      a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//不允许</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多维数组" tabindex="-1"><a class="header-anchor" href="#多维数组"><span>多维数组</span></a></h4><p>既然数组可以是任何类型的，那么我们能否创建数组类型的数组呢？答案是可以的</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">//一个三行两列的数组</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//访问第三行第二列的元素</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可变长参数" tabindex="-1"><a class="header-anchor" href="#可变长参数"><span>可变长参数</span></a></h4><p><code>public void function(参数类型...参数名称)</code><br> 这样参数名称所表示的就是一个数组</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n\n    <span class="token comment">// 可以传入 0 - N 个类型的实参</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strings<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token comment">//strings这个变量就是一个String[]类型的</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//遍历打印数组中每一个元素</span>\n      <span class="token punctuation">}</span> \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    person<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;1！&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5！&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;哥们在这跟你说唱&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里我们可以自由传入任意数量的字符串</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果同时存在其他参数，那么可变长参数只能放在最后：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strings<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="main函数的-string-args" tabindex="-1"><a class="header-anchor" href="#main函数的-string-args"><span><code>main</code>函数的 <code>String[] args</code></span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，默认情况下直接运行什么都没有，但是如果我们在运行时，添加点内容的话：<br><code>java com/test/Main lbwnb aaaa xxxxx</code><br> 因此会读取命令行中的指令参数进行存储到 <code>args</code> 中。</p><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><p>字符串类是一个比较特殊的类，它用于保存字符串。 我们知道，基本类型 char 可以保存一个2字节的Unicode字符，而字符串则是一系列字符的序列（在C中就是一个字符数组）<br> Java中没有字符串这种基本类型，因此只能使用类来进行定义。 注意，字符串中的字符一旦确定，无法进行修改，只能重新创建。</p><h4 id="string-类" tabindex="-1"><a class="header-anchor" href="#string-类"><span>String 类</span></a></h4><p>String本身也是一个类，只不过它比较特殊，每个用双引号括起来的字符串，都是String类型的一个实例对象, 也可以象征性 <code>new</code> 不过没必要<br> 如果是直接使用双引号创建的字符串，如果内容相同，为了优化效率，那么始终都是同一个对象<br> 但是如果我们使用构造方法主动创建两个新的对象，那么就是不同的对象了</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 这样就不同</span>\n    <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//字符串的内容比较，一定要用equals</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，如果我们仅仅是想要判断两个字符串的内容是否相同，不要使用 <code>==</code>，<br> String类<strong>重载了equals方法</strong>用于<strong>判断和比较内容是否相同</strong></p><p><strong>获取长度 str.length()</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//length方法可以求字符串长度，这个长度是字符的数量</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串类中提供了很多方便我们操作的方法， 比如<strong>字符串的裁剪 (substring)、分割操作 (split)</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n      <span class="token class-name">String</span> sub <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//分割字符串，并返回一个新的子串对象</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//使用split方法进行字符串分割，比如这里就是通过空格分隔，得到一个字符串数组</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符数组和字符串之间是可以快速进行相互转换的<br><strong>字符串转字符数组</strong>: <code>char[] chars = str.toCharArray()</code><strong>字符数组转字符串</strong>: <code>String str = new String(chars)</code></p><h4 id="stringbuilder-类" tabindex="-1"><a class="header-anchor" href="#stringbuilder-类"><span>StringBuilder 类</span></a></h4><p>StringBuilder 就是专门用于构造字符串的，我们可以使用它来对字符串进行拼接、裁剪等操作，它就像一个字符串编辑器，弥补了字符串不能修改的不足</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//一开始创建时，内部什么都没有</span>\n    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;AAA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//我们可以使用append方法来讲字符串拼接到后面</span>\n    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;BBB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    builder<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//删除2到4这个范围内的字符</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//当我们字符串编辑完成之后，就可以使用toString转换为字符串了</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串支持使用 <code>+</code> 和 <code>+=</code> 进行拼接操作, 但是拼接字符串实际上底层需要进行很多操作，如果程序中大量进行字符串的拼接似乎不太好，编译器是很聪明的，String的拼接会在编译时进行各种优化：</p><p>对于变量来说</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;你看&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;这&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;汉堡&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">&quot;做滴&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str5 <span class="token operator">=</span> <span class="token string">&quot;行不行&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> result <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token operator">+</span> str3 <span class="token operator">+</span> str4 <span class="token operator">+</span> str5<span class="token punctuation">;</span>   <span class="token comment">//5个变量连续加</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果直接使用加的话，每次运算都会生成一个新的对象，这里进行4次加法运算，那么中间就需要产生4个字符串对象出来，是不是有点太浪费了？ 这种情况实际上会被优化为下面的写法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;你看&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;这&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;汉堡&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">&quot;做滴&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str5 <span class="token operator">=</span> <span class="token string">&quot;行不行&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h4><p><code>str.match(正则表达式)</code></p><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;oooo&quot;</span><span class="token punctuation">;</span>\n  \t<span class="token comment">//matches方法用于对给定正则表达式进行匹配，匹配成功返回true，否则返回false</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;o+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//+表示对前面这个字符匹配一次或多次，这里字符串是oooo，正好可以匹配</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于规定给定组件必须要出现多少次才能满足匹配的，我们一般称为限定符，限定符表如下：</p>',58),(0,t.Lk)("table",null,[(0,t.Lk)("thead",null,[(0,t.Lk)("tr",null,[(0,t.Lk)("th",{style:{"text-align":"center"}},"字符"),(0,t.Lk)("th",{style:{"text-align":"center"}},"描述")])]),(0,t.Lk)("tbody",null,[(0,t.Lk)("tr",null,[(0,t.Lk)("td",{style:{"text-align":"center"}},"*"),(0,t.Lk)("td",{style:{"text-align":"center"}},[(0,t.eW)("匹配前面的子表达式零次或多次。例如，"),(0,t.Lk)("strong",null,"zo*"),(0,t.eW)(" 能匹配 "),(0,t.Lk)("strong",null,'"z"'),(0,t.eW)(" 以及 "),(0,t.Lk)("strong",null,'"zoo"'),(0,t.eW)("。***** 等价于 "),(0,t.Lk)("strong",null,"{0,}"),(0,t.eW)("。")])]),(0,t.Lk)("tr",null,[(0,t.Lk)("td",{style:{"text-align":"center"}},"+"),(0,t.Lk)("td",{style:{"text-align":"center"}},[(0,t.eW)("匹配前面的子表达式一次或多次。例如，"),(0,t.Lk)("strong",null,"zo+"),(0,t.eW)(" 能匹配 "),(0,t.Lk)("strong",null,'"zo"'),(0,t.eW)(' 以及 "'),(0,t.Lk)("strong",null,'zoo"'),(0,t.eW)("，但不能匹配 "),(0,t.Lk)("strong",null,'"z"'),(0,t.eW)("。"),(0,t.Lk)("strong",null,"+"),(0,t.eW)(" 等价于 "),(0,t.Lk)("strong",null,"{1,}"),(0,t.eW)("。")])]),(0,t.Lk)("tr",null,[(0,t.Lk)("td",{style:{"text-align":"center"}},"?"),(0,t.Lk)("td",{style:{"text-align":"center"}},[(0,t.eW)("匹配前面的子表达式零次或一次。例如，"),(0,t.Lk)("strong",null,"do(es)?"),(0,t.eW)(" 可以匹配 "),(0,t.Lk)("strong",null,'"do"'),(0,t.eW)(" 、 "),(0,t.Lk)("strong",null,'"does"'),(0,t.eW)("、 "),(0,t.Lk)("strong",null,'"doxy"'),(0,t.eW)(" 中的 "),(0,t.Lk)("strong",null,'"do"'),(0,t.eW)(" 。"),(0,t.Lk)("strong",null,"?"),(0,t.eW)(" 等价于 "),(0,t.Lk)("strong",null,"{0,1}"),(0,t.eW)("。")])]),(0,t.Lk)("tr",null,[(0,t.Lk)("td",{style:{"text-align":"center"},n:""}),(0,t.Lk)("td",{style:{"text-align":"center"}},[(0,t.eW)("n 是一个非负整数。匹配确定的 "),(0,t.Lk)("strong",null,"n"),(0,t.eW)(" 次。例如，"),(0,t.Lk)("strong",null,"o{2}"),(0,t.eW)(" 不能匹配 "),(0,t.Lk)("strong",null,'"Bob"'),(0,t.eW)(" 中的 "),(0,t.Lk)("strong",null,"o"),(0,t.eW)("，但是能匹配 "),(0,t.Lk)("strong",null,'"food"'),(0,t.eW)(" 中的两个 "),(0,t.Lk)("strong",null,"o"),(0,t.eW)("。")])]),(0,t.Lk)("tr",null,[(0,t.Lk)("td",{style:{"text-align":"center"},"n,":""}),(0,t.Lk)("td",{style:{"text-align":"center"}},[(0,t.eW)("n 是一个非负整数。至少匹配n 次。例如，"),(0,t.Lk)("strong",null,"o{2,}"),(0,t.eW)(" 不能匹配 "),(0,t.Lk)("strong",null,'"Bob"'),(0,t.eW)(" 中的 "),(0,t.Lk)("strong",null,"o"),(0,t.eW)("，但能匹配 "),(0,t.Lk)("strong",null,'"foooood"'),(0,t.eW)(" 中的所有 "),(0,t.Lk)("strong",null,"o"),(0,t.eW)("。"),(0,t.Lk)("strong",null,"o{1,}"),(0,t.eW)(" 等价于 "),(0,t.Lk)("strong",null,"o+"),(0,t.eW)("。"),(0,t.Lk)("strong",null,"o{0,}"),(0,t.eW)(" 则等价于 "),(0,t.Lk)("strong",null,"o*"),(0,t.eW)("。")])]),(0,t.Lk)("tr",null,[(0,t.Lk)("td",{style:{"text-align":"center"},"n,m":""}),(0,t.Lk)("td",{style:{"text-align":"center"}},[(0,t.eW)("m 和 n 均为非负整数，其中 n <= m。最少匹配 n 次且最多匹配 m 次。例如，"),(0,t.Lk)("strong",null,"o{1,3}"),(0,t.eW)(" 将匹配 "),(0,t.Lk)("strong",null,'"fooooood"'),(0,t.eW)(" 中的前三个 "),(0,t.Lk)("strong",null,"o"),(0,t.eW)("。"),(0,t.Lk)("strong",null,"o{0,1}"),(0,t.eW)(" 等价于 "),(0,t.Lk)("strong",null,"o?"),(0,t.eW)("。请注意在逗号和两个数之间不能有空格。")])])])],-1),(0,t.Fv)('<p>如果我们想要表示一个范围内的字符，可以使用方括号：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;abcabccaa&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;[abc]*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//表示abc这几个字符可以出现 0 - N 次</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于普通字符来说，我们可以下面的方式实现多种字符匹配：</p><table><thead><tr><th style="text-align:center;">字符</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>[ABC]</strong></td><td style="text-align:center;">匹配 <strong>[...]</strong> 中的所有字符，例如 <strong>[aeiou]</strong> 匹配字符串 &quot;google runoob taobao&quot; 中所有的 e o u a 字母。</td></tr><tr><td style="text-align:center;"><strong>[^ABC]</strong></td><td style="text-align:center;">匹配除了 <strong>[...]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 &quot;google runoob taobao&quot; 中除了 e o u a 字母的所有字母。</td></tr><tr><td style="text-align:center;"><strong>[A-Z]</strong></td><td style="text-align:center;">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</td></tr><tr><td style="text-align:center;"><strong>.</strong></td><td style="text-align:center;">匹配除换行符（\\n、\\r）之外的任何单个字符，相等于 [^\\n\\r]</td></tr><tr><td style="text-align:center;"><strong>[\\s\\S]</strong></td><td style="text-align:center;">匹配所有。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行。</td></tr><tr><td style="text-align:center;"><strong>\\w</strong></td><td style="text-align:center;">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</td></tr></tbody></table><p>当然，这里仅仅是对正则表达式的简单使用，实际上正则表达式内容非常多，如果需要完整学习正则表达式，可以到：https://www.runoob.com/regexp/regexp-syntax.html</p><p>正则表达式并不是只有Java才支持，其他很多语言比如JavaScript、Python等等都是支持正则表达式的。</p>',6)],e={},o=(0,a(3671).A)(e,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,p)}]]),c=JSON.parse('{"path":"/code/java/java%205.html","title":"Java - 数组 | 字符串 | 正则表达式","lang":"zh-CN","frontmatter":{"title":"Java - 数组 | 字符串 | 正则表达式","date":"2024-10-24T00:00:00.000Z","category":["code"],"tag":["java"],"order":-0.96,"description":"面向对象高级篇 2 数组 数组是相同类型数据的有序集合，数组可以代表任何相同类型的一组内容（包括引用类型和基本类型）其中存放的每一个数据称为数组的一个元素。 定义 数组类型比较特殊，它本身也是类，但是编程不可见（底层C++写的，在运行时动态创建） 即使是基本类型的数组，也是以对象的形式存在的，并不是基本数据类型。所以，我们要创建一个数组，同样需要使用 ...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java/java%205.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Java - 数组 | 字符串 | 正则表达式"}],["meta",{"property":"og:description","content":"面向对象高级篇 2 数组 数组是相同类型数据的有序集合，数组可以代表任何相同类型的一组内容（包括引用类型和基本类型）其中存放的每一个数据称为数组的一个元素。 定义 数组类型比较特殊，它本身也是类，但是编程不可见（底层C++写的，在运行时动态创建） 即使是基本类型的数组，也是以对象的形式存在的，并不是基本数据类型。所以，我们要创建一个数组，同样需要使用 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T02:44:35.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-10-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T02:44:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java - 数组 | 字符串 | 正则表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T02:44:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"面向对象高级篇 2","slug":"面向对象高级篇-2","link":"#面向对象高级篇-2","children":[{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]}]}],"git":{"createdTime":1729697545000,"updatedTime":1730861075000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":4}]},"readingTime":{"minutes":9.76,"words":2929},"filePathRelative":"code/java/java 5.md","localizedDate":"2024年10月24日","excerpt":"<h2>面向对象高级篇 2</h2>\\n<h3>数组</h3>\\n<p>数组是相同类型数据的有序集合，数组可以代表任何相同类型的一组内容（包括引用类型和基本类型）其中存放的每一个数据称为数组的一个元素。</p>\\n<h4>定义</h4>\\n<p>数组类型比较特殊，<strong>它本身也是类，但是编程不可见</strong>（底层C++写的，在运行时动态创建）<br>\\n即使是基本类型的数组，也是以对象的形式存在的，并不是基本数据类型。所以，我们要创建一个数组，同样需要使用 <code>new</code> 关键字</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> array <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">//类型[]就表示这个是一个数组类型</span>\\n    <span class=\\"token class-name\\">Object</span> obj <span class=\\"token operator\\">=</span> array<span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">//因为同样是类，肯定是继承自Object的，所以说可以直接向上转型</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);