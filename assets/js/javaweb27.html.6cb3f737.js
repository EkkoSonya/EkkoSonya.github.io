"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[9339],{3671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},3013:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>m,data:()=>b});var t=a(7847);const e=a.p+"assets/img/12.9f53d316.png",p=a.p+"assets/img/13.33a1007b.png",o=a.p+"assets/img/14.c6f52112.png",c=(0,t.Fv)('<h2 id="junit单元测试3" tabindex="-1"><a class="header-anchor" href="#junit单元测试3"><span>JUnit单元测试3</span></a></h2><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h3><p><code>@BeforeAll</code> <code>@AferAll</code> <code>@BeforeEach</code> <code>@AfterEach</code></p><p>其中 <code>@BeforeAll</code> 必须是<code>static</code>方法</p><p>我们可以自由设定某些操作在测试开始之前或之后执行，比如测试前的准备工作或是测试后的收尾工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是测试方法1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@BeforeAll</span>  <span class="token comment">//使用BeforeAll必须为static方法</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是测试前必须要执行的准备工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>@BeforeAll</code>表示此准备工作在所有测试用例执行之前执行，这样，当测试开始前，会优先进行指定的准备工作，防止准备不足导致的测试失败。</p><p>相反的，<code>@AfterAll</code>则会在所有测试用例完成之后执行。</p><p>除了在所有方法执行前后插入准备工作，我们也可以为所有的方法单个插入准备工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BeforeEach</span>  <span class="token comment">//使用BeforeEach不能为static方法</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是测试前必须要执行的准备工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，在每个测试用例执行之前，都会执行一次这里的准备工作</p><h4 id="测试类的生命周期" tabindex="-1"><a class="header-anchor" href="#测试类的生命周期"><span>测试类的生命周期</span></a></h4><p>我们接着来了解一下测试类的生命周期。</p><p>默认情况下，执行测试实际上也会对类进行实例化，并通过<strong>实例化对象来调用其中的测试方法</strong>，并且，<strong>每一个测试用例执行之前，都会创建一个新的对象</strong>，而不是直接执行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">TestMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;构造函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Test2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像这样，我们可以得到这样的输出结果：</p><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>每次执行测试用例都会创建一个新的对象来执行，这在某些场景下可能会显得不太方便，比如初始化类需要花费大量时间或是执行非常费时的IO操作时，这会导致我们要花费大量时间来等待每次测试用例的初始化操作。</p><p>我们也可以手动修改测试类的初始化行为，默认情况下为<code>PER_METHOD</code>模式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@TestInstance</span><span class="token punctuation">(</span><span class="token class-name">TestInstance<span class="token punctuation">.</span>Lifecycle</span><span class="token punctuation">.</span><span class="token constant">PER_CLASS</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将其修改为<code>PER_CLASS</code>模式后，初始化操作只会执行一次，因为现在是以类为单位：</p><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>当然，如果依然对测试用例执行前后有其他准备工作需求，也可以使用之前的<code>@BeforeEach</code>和<code>@AfterEach</code>来实现灵活控制。</p><h3 id="测试顺序控制-testmethodorder-xxx-class" tabindex="-1"><a class="header-anchor" href="#测试顺序控制-testmethodorder-xxx-class"><span>测试顺序控制 <code>@TestMethodOrder(xxx.class)</code></span></a></h3><p>有些时候我们可能需要控制某些测试案例的顺序</p><p>默认情况下，所有的测试案例都是按照<strong>方法的名称顺序</strong>来进行的，比如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token comment">//按照名称顺序，虽然这里是第一个定义的，但是它是第三个</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是测试用例3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是测试用例1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是测试用例2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了默认的名称顺序之外，JUnit提供了以下顺序：</p>',28),l=(0,t.Lk)("code",null,"MethodOrderer.DisplayName",-1),i=(0,t.Lk)("em",null,"字母数字",-1),u={href:"https://junit.org/junit5/docs/current/user-guide/#writing-tests-display-name-generator-precedence-rules",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Fv)("<li><p><code>MethodOrderer.MethodName</code>：根据测试方法的名称和形式参数列表，<em>以字母数字</em>排序</p></li><li><p><code>MethodOrderer.OrderAnnotation</code>：根据通过<code>@Order</code>注释指定的值对测试方法<em>进行数值</em>排序</p></li><li><p><code>MethodOrderer.Random</code>：<em>伪随机</em>排序测试方法，并支持自定义<em>种子</em>的配置</p></li>",3),r=(0,t.Fv)('<p>其中，注解顺序可以由我们自己通过注解来手动定义执行顺序：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">nullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// perform assertions against null values</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套测试-nested" tabindex="-1"><a class="header-anchor" href="#嵌套测试-nested"><span>嵌套测试 - <code>@Nested</code></span></a></h3><p>有些时候我们可能需要对测试用例进行进一步的分层，比如用户相关的测试全部归为一个组，而管理相关的测试全部归为一个组</p><p>此时我们可以使用嵌套测试，通过<strong>在类中定义多个内部类</strong>来完成：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是外部测试类型&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Nested</span>\n    <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>\n\n        <span class="token annotation punctuation">@Test</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是内部测试类型1-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token annotation punctuation">@Test</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是内部测试类型1-2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Nested</span>\n    <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Test</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是内部测试类型2-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token annotation punctuation">@Test</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是内部测试类型2-2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时测试的结果展示也是嵌套的样式：</p><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>注意，当我们在嵌套测试中使用诸如<code>@BeforeEach</code>、<code>@BeforeAll</code>这种注解时(就是写到里面)，它仅会<strong>作用于所属内部类中的所有测试用例</strong>，而不是包含外部类中和其他内部类中的全部测试用例，写到外面还是全部</p><p>嵌套类的执行同样可以通过<code>@TestClassOrder</code>来控制嵌套类的执行顺序。</p><h3 id="重复和参数化测试" tabindex="-1"><a class="header-anchor" href="#重复和参数化测试"><span>重复和参数化测试</span></a></h3><p>对于某些存在随机性的测试案例，我们可能需要多次执行才能确定其是否存在某些问题</p><h4 id="重复测试-repeatedtest-x" tabindex="-1"><a class="header-anchor" href="#重复测试-repeatedtest-x"><span>重复测试 <code>@RepeatedTest(x)</code></span></a></h4><p>比如某个案例存在一个BUG，导致其10次里面会有1次出现错误，现在我们想要保证其<strong>10次都不会出现问题才算通过</strong>，此时我们就可以使用重复测试案例来使其多次执行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RepeatedTest</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时会重复执行10次此案例，并且当每一次执行都没有出现问题时，才会正常通过.</p><h4 id="参数化测试-parameterizedtest-valuesource" tabindex="-1"><a class="header-anchor" href="#参数化测试-parameterizedtest-valuesource"><span>参数化测试 <code>@ParameterizedTest</code> + <code>@ValueSource()</code></span></a></h4><p>某些测试可能并不是固定单个输入参数，有时我们可能也需要对多个输入参数进行测试，来做到全方面的问题排查。</p><p>它<strong>与重复测试比较类似</strong>，但是参数可以由我们自己决定，并且每个参数都会进行一次测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>\n<span class="token comment">//使用此注解来表示此测试是一个参数化测试</span>\n<span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ccc&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//指定参数列表</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//需要添加一个参数</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用<code>@ValueSource</code>来进行参数来源设定，也就是需要进行测试的参数列表</p><p>接着下面会根据参数挨个执行此测试用例，保证每一种情况都正常执行</p><p>这里的<code>@ValueSource</code>是最简单的一种参数设定，我们可以直接设置一系列值，支持以下类型：</p><p><code>short</code>、<code>byte</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>char</code>、<code>boolean</code>、<code>java.lang.String</code>、<code>java.lang.Class</code></p><h5 id="空值-nullsource" tabindex="-1"><a class="header-anchor" href="#空值-nullsource"><span>空值 <code>@NullSource</code></span></a></h5><p>除了直接设置指定类型常量值，我们也可以传入空值或是一些为空的字符串、数组等：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>\n<span class="token annotation punctuation">@NullSource</span>  <span class="token comment">//将值设置为null进行测试</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>\n<span class="token annotation punctuation">@EmptySource</span>  <span class="token comment">//将值设置为空进行测试，如空字符串、空数组、空集合等</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>@NullAndEmptySource</code>：结合了<code>@NullSource</code>和<code>@EmptySource</code>两个注解的功能。</p></blockquote><h5 id="枚举值-enumsource-xx-class" tabindex="-1"><a class="header-anchor" href="#枚举值-enumsource-xx-class"><span>枚举值 <code>@EnumSource(xx.class)</code></span></a></h5><p>我们也可以使用枚举值来进行测试，比如我们希望测试某个枚举类型下所有的枚举作为参数进行测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>\n    <span class="token constant">SMALL</span><span class="token punctuation">,</span> <span class="token constant">MEDIUM</span><span class="token punctuation">,</span> <span class="token constant">LARGE</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@ParameterizedTest</span>\n<span class="token annotation punctuation">@EnumSource</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//这将依次测试枚举类中的所有枚举</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或是指定某些枚举常量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>\n<span class="token comment">//模式默认为INCLUDE，即使用指定的枚举常量进行测试</span>\n<span class="token annotation punctuation">@EnumSource</span><span class="token punctuation">(</span>mode <span class="token operator">=</span> <span class="token class-name">EnumSource<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">INCLUDE</span><span class="token punctuation">,</span> names <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;SMALL&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;LARGE&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="特定的方法来生成参数" tabindex="-1"><a class="header-anchor" href="#特定的方法来生成参数"><span>特定的方法来生成参数</span></a></h5><p>除了以上方式获取参数，我们也可以使用特定的方法来生成我们需要的测试参数，只需要添加<code>@MethodSource</code>注解即可指定方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>\n<span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">&quot;stringProvider&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">stringProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法的返回值可以是<strong>任何可迭代（Iterable）内容</strong>，如数组、集合类、Stream等。同样的，对于其他类中的方法，需要和之前一样使用<em>完全限定的方法名称</em>来引用。</p><h5 id="字段" tabindex="-1"><a class="header-anchor" href="#字段"><span>字段</span></a></h5><p>和方法一样，字段同样可以作为参数的来源，但它必须是静态的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;AAA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BBB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@ParameterizedTest</span>\n<span class="token annotation punctuation">@FieldSource</span><span class="token punctuation">(</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅仅是一个普通的集合或是数组可以作为字段参数来源，如Supplier这种懒加载的数据，也可以作为参数来源：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;AAA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BBB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@ParameterizedTest</span>\n<span class="token annotation punctuation">@FieldSource</span><span class="token punctuation">(</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，JUnit还支持从CSV表格中导入或自定义参数提供器等，这里就不做详细介绍了</p>',44),k={href:"https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-sources-ArgumentsSource",target:"_blank",rel:"noopener noreferrer"},v={},m=(0,a(3671).A)(v,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[c,(0,t.Lk)("ul",null,[(0,t.Lk)("li",null,[(0,t.Lk)("p",null,[l,(0,t.eW)("：根据显示名称对测试方法进行"),i,(0,t.eW)("排序（请参阅"),(0,t.Lk)("a",u,[(0,t.eW)("显示名称生成优先级规则"),(0,t.bF)(a)]),(0,t.eW)("）")])]),d]),r,(0,t.Lk)("p",null,[(0,t.eW)("官方文档："),(0,t.Lk)("a",k,[(0,t.eW)("https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-sources-ArgumentsSource"),(0,t.bF)(a)])])])}]]),b=JSON.parse('{"path":"/code/javaweb/6-JUnit/javaweb27.html","title":"javaweb - JUnit2","lang":"zh-CN","frontmatter":{"title":"javaweb - JUnit2","date":"2025-07-08T00:00:00.000Z","category":["code"],"tag":["javaweb","JUL"],"order":-0.7472,"description":"JUnit单元测试3 生命周期 @BeforeAll @AferAll @BeforeEach @AfterEach 其中 @BeforeAll 必须是static方法 我们可以自由设定某些操作在测试开始之前或之后执行，比如测试前的准备工作或是测试后的收尾工作： 其中，@BeforeAll表示此准备工作在所有测试用例执行之前执行，这样，当测试开始前，会...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/6-JUnit/javaweb27.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - JUnit2"}],["meta",{"property":"og:description","content":"JUnit单元测试3 生命周期 @BeforeAll @AferAll @BeforeEach @AfterEach 其中 @BeforeAll 必须是static方法 我们可以自由设定某些操作在测试开始之前或之后执行，比如测试前的准备工作或是测试后的收尾工作： 其中，@BeforeAll表示此准备工作在所有测试用例执行之前执行，这样，当测试开始前，会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-09T16:42:59.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"JUL"}],["meta",{"property":"article:published_time","content":"2025-07-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-09T16:42:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - JUnit2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-09T16:42:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"JUnit单元测试3","slug":"junit单元测试3","link":"#junit单元测试3","children":[{"level":3,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[{"level":4,"title":"测试类的生命周期","slug":"测试类的生命周期","link":"#测试类的生命周期","children":[]}]},{"level":3,"title":"测试顺序控制 @TestMethodOrder(xxx.class)","slug":"测试顺序控制-testmethodorder-xxx-class","link":"#测试顺序控制-testmethodorder-xxx-class","children":[]},{"level":3,"title":"嵌套测试 - @Nested","slug":"嵌套测试-nested","link":"#嵌套测试-nested","children":[]},{"level":3,"title":"重复和参数化测试","slug":"重复和参数化测试","link":"#重复和参数化测试","children":[{"level":4,"title":"重复测试 @RepeatedTest(x)","slug":"重复测试-repeatedtest-x","link":"#重复测试-repeatedtest-x","children":[]},{"level":4,"title":"参数化测试 @ParameterizedTest + @ValueSource()","slug":"参数化测试-parameterizedtest-valuesource","link":"#参数化测试-parameterizedtest-valuesource","children":[{"level":5,"title":"空值 @NullSource","slug":"空值-nullsource","link":"#空值-nullsource","children":[]},{"level":5,"title":"枚举值 @EnumSource(xx.class)","slug":"枚举值-enumsource-xx-class","link":"#枚举值-enumsource-xx-class","children":[]},{"level":5,"title":"特定的方法来生成参数","slug":"特定的方法来生成参数","link":"#特定的方法来生成参数","children":[]},{"level":5,"title":"字段","slug":"字段","link":"#字段","children":[]}]}]}]}],"git":{"createdTime":1752079379000,"updatedTime":1752079379000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":7.17,"words":2152},"filePathRelative":"code/javaweb/6-JUnit/javaweb27.md","localizedDate":"2025年7月8日","excerpt":"<h2>JUnit单元测试3</h2>\\n<h3>生命周期</h3>\\n<p><code>@BeforeAll</code> <code>@AferAll</code> <code>@BeforeEach</code> <code>@AfterEach</code></p>\\n<p>其中 <code>@BeforeAll</code> 必须是<code>static</code>方法</p>\\n<p>我们可以自由设定某些操作在测试开始之前或之后执行，比如测试前的准备工作或是测试后的收尾工作：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Test</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">test1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"我是测试方法1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token annotation punctuation\\">@BeforeAll</span>  <span class=\\"token comment\\">//使用BeforeAll必须为static方法</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"我是测试前必须要执行的准备工作\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);