"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[6070],{83671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},39779:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>u});var t=s(7847);const e=s.p+"assets/img/29.97a7ebf1.png",p=(0,t.Fv)('<h2 id="mybatis详解7" tabindex="-1"><a class="header-anchor" href="#mybatis详解7"><span>Mybatis详解7</span></a></h2><h3 id="使用注解开发" tabindex="-1"><a class="header-anchor" href="#使用注解开发"><span>使用注解开发</span></a></h3><p>在之前的学习中，我们已经体验到<code>Mybatis</code>为我们带来的便捷了</p><p>我们只需要编写对应的映射器，并将其绑定到一个接口上，即可直接通过该接口执行我们的SQL语句，极大的简化了我们之前JDBC那样的代码编写模式。</p><p>那么，能否<strong>实现无需XML映射器配置</strong>，而是直接使用注解在接口上进行配置呢？</p><p>我们可以直接删除掉所有的<code>Mapper.xml</code>文件了，只保留<code>Mapper</code>相关的接口。</p><p>现在，我们来尝试以全注解的形式重现编写咱们的SQL语句映射</p><h4 id="调整-mybatis-config-xml" tabindex="-1"><a class="header-anchor" href="#调整-mybatis-config-xml"><span>调整 <code>mybatis-config.xml</code></span></a></h4><p>还是以查询所有的用户为例，既然现在不需要配置<code>Mapper.xml</code>文件了，那么我们现在需要重写在Mybatis的配置文件中进行mapper的配置</p><p>因为现在只需要使用接口来进行配置</p><p>所以使用<code>package</code>标签来指定一个包，包下所有的接口都将直接作为<code>Mapper</code>配置接口：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.test.mapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者还是<code>mapper</code>标签通过<code>class</code>属性来指定具体的接口：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.test.mapper.TestMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改对应接口-注解" tabindex="-1"><a class="header-anchor" href="#修改对应接口-注解"><span>修改对应接口+注解</span></a></h4><p>现在我们还是在<code>Mapper</code>中添加一个对应的方法用于执行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前我们需要像这样编写：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectAllUser<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.test.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from user\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="举例" tabindex="-1"><a class="header-anchor" href="#举例"><span>举例</span></a></h5><p>现在只需要一个注解即可，<code>Mybatis</code>为我们提供了丰富的注解用于表示不同SQL语句类型</p><p>这里的<code>@Select</code>代表的就是select标签，我们只需要直接在其中编写SQL语句即可，而返回类型<code>Mybatis</code>会自动根据方法的返回值进行判断：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://oss.itbaima.cn/internal/markdown/2024/08/20/ALdMlG5evncp4kH.png" alt="QQ_1724143033753" tabindex="0" loading="lazy"><figcaption>QQ_1724143033753</figcaption></figure><p>包括一些SQL语句参数的使用也是和之前完全一样，比如插入一个用户：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into user (name, age) values (#{name}, #{age})&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="配置这些额外的参数-options" tabindex="-1"><a class="header-anchor" href="#配置这些额外的参数-options"><span>配置这些额外的参数 <code>@Options</code></span></a></h5><p>虽然Mybatis为我们提供了之前XML配置中各种操作的对应注解，但是我们发现，这些注解并不能像之前XML那样直接修改一些属性</p><p>比如我们希望配置<code>useGeneratedKeys</code>来得到自动生成的主键，从而修改我们对应的实体类</p><p>需要配置这些额外的参数，我们可以使用<code>@Options</code>注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> keyColumn <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> keyProperty <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into user (name, age) values (#{name}, #{age})&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertUser<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.test.entity.User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    insert into user (name, age) values (#{name}, #{age})\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种写法效果是完全一样的，<code>Mybatis</code>在插入后，会将我们当前的实体类对象的<code>id</code>修改为得到的<code>id</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmapper<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>所以我们通过<code>Mybatis</code>为我们设计的这一系列注解就可以很轻松地取代掉之前的配置。</p><h5 id="实体类字段名称与数据库不同-results" tabindex="-1"><a class="header-anchor" href="#实体类字段名称与数据库不同-results"><span>实体类字段名称与数据库不同 <code>@Results</code></span></a></h5><p>假如现在我们的实体类字段名称与数据库不同，此时该如何像之前一样配置<code>resultMap</code>呢？</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> uid<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uid<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用<code>@Results</code>注解来实现这种操作，它的使用方式与resultMap几乎没什么区别：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="结合xml配置" tabindex="-1"><a class="header-anchor" href="#结合xml配置"><span>结合<code>xml</code>配置</span></a></h5><p>当然，如果你还是觉得这种方式配置起来不如之前方便，那么你也可以单独在XML中配置一个<code>resultMap</code></p><p>然后直接通过注解的形式引用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="指定构造方法-constructorargs" tabindex="-1"><a class="header-anchor" href="#指定构造方法-constructorargs"><span>指定构造方法 <code>@ConstructorArgs</code></span></a></h5><p>那么现在如果我们需要指定使用的构造方法怎么办呢？就像我们之前在使用<code>constrator</code>标签一样</p><p>Mybatis为我们提供了<code>@ConstructorArgs</code>注解，配置方式和之前几乎一致：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConstructorArgs</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Arg</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token annotation punctuation">@Arg</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token annotation punctuation">@Arg</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这与我们之前的XML配置完全一致：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idArg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_int<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>String<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_int<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="关联查询-注解只支持嵌套查询" tabindex="-1"><a class="header-anchor" href="#关联查询-注解只支持嵌套查询"><span>关联查询 (注解只支持嵌套查询)</span></a></h5><p>我们再来看看之前在<code>resultMap</code>中配置的关联查询该如何编写，Mybatis也为我们提供了丰富的注解用于处理这类问题，我们首先来看看<strong>一对一查询</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">&quot;detail&quot;</span><span class="token punctuation">,</span> one <span class="token operator">=</span> <span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">&quot;selectDetailById&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user where id = #{id};&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">User</span> <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user_detail where id = #{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">UserDetail</span> <span class="token function">selectDetailById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在配置<code>@Result</code>注解时，只需要将<code>one</code>或是<code>many</code>参数进行填写即可，它们分别代表一对一关联和一对多关联</p><p>使用<code>@One</code>和<code>@Many</code>注解来指定其他查询语句进行<strong>嵌套查询</strong>，就像是我们之前使用<code>association</code>和<code>collection</code>那样。</p><p>不过很遗憾的是，我们无法完全通过注解来实现<strong>之前的联合查询解析</strong>（这是因为 Java 注解不允许循环引用）</p><p>只能使用这种嵌套查询来完成复杂查询操作，因此，如果对这种复杂查询有着一定需求的话，<strong>建议使用之前的<code>XML</code>方式进行配置</strong>。</p><h5 id="动态sql配置-selectprovider注解" tabindex="-1"><a class="header-anchor" href="#动态sql配置-selectprovider注解"><span>动态<code>SQL</code>配置 (<code>SelectProvider</code>注解)</span></a></h5><p>我们还可以使用注解进行动态SQL的配置</p><p>比如现在我们想要实现之前的这个奇葩需求：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectUserById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from user where id = #{id}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id &gt; 3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        and age &gt; 18\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Mybatis</code>针对于所有的<code>SQL</code>操作都提供了对应的Provider注解，用于配置动态SQL</p><p>我们需要先创建一个类编写我们的动态SQL操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSqlBuilder</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">buildGetUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>   \n          <span class="token comment">//SQL类中提供了常见的SELECT、FORM、WHERE等操作</span>\n            <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;id = #{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;age &gt; 18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',67),o={href:"https://mybatis.org/mybatis-3/zh_CN/statement-builders.html",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Fv)('<p>构建完成后，接着我们就可以使用<code>@SelectProvider</code>来引用这边编写好的动态SQL操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SelectProvider</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">TestSqlBuilder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&quot;buildGetUserById&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">User</span> <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>效果和之前我们编写XML形式的动态SQL一致</p><p>当然，如果遇到了多个参数的情况，我们同样需要使用<code>@Param</code>来指定参数名称，包括<code>TestSqlBuilder</code>中编写的方法也需要添加，否则必须保证形参列表与这边接口一致。</p><p>虽然这样可以实现和之前差不多的效果，但是这实在是太过复杂了，我们还需要单独编写一个类来做这种事情</p><p>实际上我们也可以直接在<code>@Select</code>中编写一个XML配置动态SQL，<code>Mybatis</code>同样可以正常解析：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;\n         &lt;script&gt;\n            select * from user where id = #{id}\n            &lt;if test=&quot;id &gt; 3&quot;&gt;\n                 and age &gt; 18\n            &lt;/if&gt;\n         &lt;/script&gt;\n         &quot;&quot;&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">User</span> <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里只需要包括一个<code>script</code>标签我们就能像之前XML那样编写动态SQL了，只不过由于IDEA不支持这种语法的识别，可能会出现一些莫名其妙的红标，但是是可以正常运行的。</p><h5 id="二级缓存配置-cachenamespace" tabindex="-1"><a class="header-anchor" href="#二级缓存配置-cachenamespace"><span>二级缓存配置 <code>@CacheNamespace</code></span></a></h5><p>最后我们来看一下二级缓存相关的配置，使用<code>@CacheNamespace</code>注解直接定义在接口上即可，然后我们可以通过使用<code>@Options</code>来控制单个操作的缓存启用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheNamespace</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span> readWrite <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们如果需要控制单个方法的缓存，同样可以使用<code>@Option</code>来进行配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>flushCache <span class="token operator">=</span> <span class="token class-name">Options<span class="token punctuation">.</span>FlushCachePolicy</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">,</span> useCache <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user where id = #{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">User</span> <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span><code>Configuration</code></span></a></h3><p>这里我们不如再做的更加极致一点，咱们把配置文件也给变成代码配置，彻底抛弃XML配置</p><p>实际上我们的XML配置中所有配置项都可以以<code>Configuration</code>对象的形式进行配置，最后在构造<code>SqlSessionFactory</code>时也可以通过此对象进行创建：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token function">initConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Configuration</span> <span class="token function">initConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">PooledDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PooledDataSource</span><span class="token punctuation">(</span>\n            <span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;jdbc:mysql://localhost:3306/web_study&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Environment</span> environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Environment</span><span class="token punctuation">(</span><span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    configuration<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    configuration<span class="token punctuation">.</span><span class="token function">getTypeAliasRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerAliases</span><span class="token punctuation">(</span><span class="token string">&quot;com.test.entity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    configuration<span class="token punctuation">.</span><span class="token function">setLogImpl</span><span class="token punctuation">(</span><span class="token class-name">StdOutImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    configuration<span class="token punctuation">.</span><span class="token function">addMappers</span><span class="token punctuation">(</span><span class="token string">&quot;com.test.mapper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> configuration<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关Mybatis的基本使用，我们就暂时介绍到这里。</p>',18),l={},i=(0,s(83671).A)(l,[["render",function(n,a){const s=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[p,(0,t.Lk)("p",null,[(0,t.eW)("详细的SQL语句构建器语法文档："),(0,t.Lk)("a",o,[(0,t.eW)("https://mybatis.org/mybatis-3/zh_CN/statement-builders.html"),(0,t.bF)(s)])]),c])}]]),u=JSON.parse('{"path":"/code/javaweb/4-Mybatis/javaweb19.html","title":"javaweb - Mybatis9","lang":"zh-CN","frontmatter":{"title":"javaweb - Mybatis9","date":"2025-06-17T00:00:00.000Z","category":["code"],"tag":["javaweb","mybatis"],"order":-0.7479,"description":"Mybatis详解7 使用注解开发 在之前的学习中，我们已经体验到Mybatis为我们带来的便捷了 我们只需要编写对应的映射器，并将其绑定到一个接口上，即可直接通过该接口执行我们的SQL语句，极大的简化了我们之前JDBC那样的代码编写模式。 那么，能否实现无需XML映射器配置，而是直接使用注解在接口上进行配置呢？ 我们可以直接删除掉所有的Mapper....","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/4-Mybatis/javaweb19.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - Mybatis9"}],["meta",{"property":"og:description","content":"Mybatis详解7 使用注解开发 在之前的学习中，我们已经体验到Mybatis为我们带来的便捷了 我们只需要编写对应的映射器，并将其绑定到一个接口上，即可直接通过该接口执行我们的SQL语句，极大的简化了我们之前JDBC那样的代码编写模式。 那么，能否实现无需XML映射器配置，而是直接使用注解在接口上进行配置呢？ 我们可以直接删除掉所有的Mapper...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.itbaima.cn/internal/markdown/2024/08/20/ALdMlG5evncp4kH.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T16:02:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"javaweb - Mybatis9"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"mybatis"}],["meta",{"property":"article:published_time","content":"2025-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T16:02:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - Mybatis9\\",\\"image\\":[\\"https://oss.itbaima.cn/internal/markdown/2024/08/20/ALdMlG5evncp4kH.png\\"],\\"datePublished\\":\\"2025-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-07T16:02:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"Mybatis详解7","slug":"mybatis详解7","link":"#mybatis详解7","children":[{"level":3,"title":"使用注解开发","slug":"使用注解开发","link":"#使用注解开发","children":[{"level":4,"title":"调整 mybatis-config.xml","slug":"调整-mybatis-config-xml","link":"#调整-mybatis-config-xml","children":[]},{"level":4,"title":"修改对应接口+注解","slug":"修改对应接口-注解","link":"#修改对应接口-注解","children":[{"level":5,"title":"举例","slug":"举例","link":"#举例","children":[]},{"level":5,"title":"配置这些额外的参数 @Options","slug":"配置这些额外的参数-options","link":"#配置这些额外的参数-options","children":[]},{"level":5,"title":"实体类字段名称与数据库不同 @Results","slug":"实体类字段名称与数据库不同-results","link":"#实体类字段名称与数据库不同-results","children":[]},{"level":5,"title":"结合xml配置","slug":"结合xml配置","link":"#结合xml配置","children":[]},{"level":5,"title":"指定构造方法 @ConstructorArgs","slug":"指定构造方法-constructorargs","link":"#指定构造方法-constructorargs","children":[]},{"level":5,"title":"关联查询 (注解只支持嵌套查询)","slug":"关联查询-注解只支持嵌套查询","link":"#关联查询-注解只支持嵌套查询","children":[]},{"level":5,"title":"动态SQL配置 (SelectProvider注解)","slug":"动态sql配置-selectprovider注解","link":"#动态sql配置-selectprovider注解","children":[]},{"level":5,"title":"二级缓存配置 @CacheNamespace","slug":"二级缓存配置-cachenamespace","link":"#二级缓存配置-cachenamespace","children":[]}]}]},{"level":3,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]}]}],"git":{"createdTime":1751904133000,"updatedTime":1751904133000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":7.07,"words":2121},"filePathRelative":"code/javaweb/4-Mybatis/javaweb19.md","localizedDate":"2025年6月17日","excerpt":"<h2>Mybatis详解7</h2>\\n<h3>使用注解开发</h3>\\n<p>在之前的学习中，我们已经体验到<code>Mybatis</code>为我们带来的便捷了</p>\\n<p>我们只需要编写对应的映射器，并将其绑定到一个接口上，即可直接通过该接口执行我们的SQL语句，极大的简化了我们之前JDBC那样的代码编写模式。</p>\\n<p>那么，能否<strong>实现无需XML映射器配置</strong>，而是直接使用注解在接口上进行配置呢？</p>\\n<p>我们可以直接删除掉所有的<code>Mapper.xml</code>文件了，只保留<code>Mapper</code>相关的接口。</p>","autoDesc":true}')}}]);