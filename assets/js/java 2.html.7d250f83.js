"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[4370],{3671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},3257:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>c,data:()=>o});var t=s(7847);const e=[(0,t.Fv)('<h2 id="静态变量和静态方法" tabindex="-1"><a class="header-anchor" href="#静态变量和静态方法"><span>静态变量和静态方法</span></a></h2><p><strong>Static</strong><br> 静态的内容，我们可以理解为是属于这个类的，也可以理解为是所有对象共享的内容。<br> 我们通过使用 <strong>static 关键字</strong>来声明一个变量或一个方法为<strong>静态的</strong>，一旦被声明为静态，那么通过这个类创建的所有对象，<strong>操作的都是同一个目标</strong>，也就是说，对象再多，也只<strong>有这一个静态的变量或方法</strong>。<br> 一个对象改变了静态变量的值，那么其他的对象读取的就是被改变的值。</p><p>一般情况下，我们并不会通过一个具体的对象去修改和使用静态属性，而是通过这个类去使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n    <span class="token keyword">static</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>    <span class="token comment">//这里我们定义一个info静态变量</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Person</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token string">&quot;让我看看&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，我们可以将方法标记为静态：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是静态方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态方法同样是属于类的，而不是具体的某个对象，所以说，就像下面这样:<br><img src="http://myimg.ekkosonya.cn/20240815224110.png" alt="20240815224110" loading="lazy"></p><p>因为静态方法属于类的，所以说我们在静态方法中，<strong>无法获取成员变量的值</strong>, 同样的，在静态方法中，无法使用this关键字，因为this关键字代表的是<strong>当前的对象本身</strong>。<br> 但是静态方法是可以访问到静态变量的.</p><h3 id="静态变量初始化" tabindex="-1"><a class="header-anchor" href="#静态变量初始化"><span>静态变量初始化</span></a></h3><p>我们实际上是将 .class 文件丢给 JVM 去执行的，而每一个 .class 文件其实就是我们编写的一个类，我们在 Java 中使用一个类之前， JVM 并不会在一开始就去加载它，而是在需要时才会去加载（优化）一般遇到以下情况时才会会加载类：</p><ul><li>访问类的静态变量，或者为静态变量赋值</li><li>new 创建类的实例（隐式加载）</li><li>调用类的静态方法</li><li>子类初始化时</li><li>其他的情况会在讲到反射时介绍</li></ul><p>所有被标记为静态的内容，会在<strong>类刚加载的时候就分配</strong>，而不是在对象创建的时候分配，所以说<strong>静态内容一定会在第一个对象初始化之前完成加载。</strong></p><h2 id="包的访问与控制" tabindex="-1"><a class="header-anchor" href="#包的访问与控制"><span>包的访问与控制</span></a></h2><h3 id="包的声明和导入" tabindex="-1"><a class="header-anchor" href="#包的声明和导入"><span>包的声明和导入</span></a></h3><p>包其实就是用来区分类位置的东西，也可以用来将我们的类进行分类（类似于C++中的namespace）随着我们的程序不断变大，可能会创建各种各样的类，他们可能会做不同的事情，那么这些类如果都放在一起的话，有点混乱，我们可以通过包的形式将这些类进行分类存放。</p><p>包的命名规则同样是英文和数字的组合，<strong>最好是一个域名的格式</strong>，比如我们经常访问的 www.baidu.com ，后面的 baidu.com 就是域名，我们的包就可以命名为com.baidu，其中的.就是用于分割的，对应多个文件夹，比如com.test</p><figure><img src="http://myimg.ekkosonya.cn/20240815234719.png" alt="20240815234719" tabindex="0" loading="lazy"><figcaption>20240815234719</figcaption></figure><p>我们之前都是直接创建的类，所以说没有包这个概念，但是现在，我们将类放到包中，就需要注意了：<br> 需要通过关键字 <code>package</code>，用于指定当前类所处的包的，注意，所处的包和对应的目录是一一对应的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>\n<span class="token comment">//在放入包中，需要在类的最上面添加package关键字来指明当前类所处的包</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token comment">//将Main类放到com.test这个包中</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用同一个包中的类时，直接使用即可（之前就是直接使用的，因为都直接在一个缺省的包中）<br> 而当我们需要使用其他包中的类时，需要先进行导入才可以：<br> 需要通过关键字 <code>import</code> 导入我们需要使用的类，当然，只有在类不在同一个包下时才需要进行导入，如果一个包中有多个类，我们可以使用*表示导入这个包中全部的类:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Person</span></span><span class="token punctuation">;</span>\n<span class="token comment">//使用import关键字导入其他包中的类</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java会默认导入java.lang这个包下的所有类，因此我们不需要手动指定。</p><p><strong>不同类的重名问题</strong><br> 在不同包下的类，即使类名相同，也是不同的两个类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>   \n    <span class="token comment">//我们在自己的包中也建一个名为String的类</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于默认导入了系统自带的String类，并且也导入了我们自己定义的String类，那么此时就出现了歧义，编译器不知道到底我们想用的是哪一个String类，所以说我们需要明确指定：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//主方法的String参数是java.lang包下的，我们需要明确指定一下，只需要在类名前面添加包名就行了</span>\n        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span>String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要在类名前面把完整的包名也给写上，就可以表示这个是哪一个包里的类了，当然，如果没有出现歧义，默认情况下包名是可以省略的，可写可不写。</p><h3 id="访问权限控制" tabindex="-1"><a class="header-anchor" href="#访问权限控制"><span>访问权限控制</span></a></h3><p>Java中引入了访问权限控制（可见性），我们可以为成员变量、成员方法、静态变量、静态方法甚至是类指定访问权限，不同的访问权限，有着不同程度的访问限制：</p><ul><li><strong>private</strong> - 私有，标记为私有的内容无法被除当前类以外的任何位置访问。</li><li><strong>什么都不写</strong> - 默认，默认情况下，只能被类本身和同包中的其他类访问。</li><li><strong>protected</strong> - 受保护，标记为受保护的内容可以能被类本身和同包中的其他类访问，也可以被子类访问（子类我们会在下一章介绍）</li><li><strong>public</strong> - 公共，标记为公共的内容，允许在任何地方被访问。</li></ul><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">当前类</th><th style="text-align:center;">同一个包下的类</th><th style="text-align:center;">不同包下的子类</th><th style="text-align:center;">不同包下的类</th></tr></thead><tbody><tr><td style="text-align:center;">public</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:center;">protected</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">默认</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">private</td><td style="text-align:center;">✅</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td></tr></tbody></table><p>默认的情况下，在当前包以外的其他包中无法访问。</p><p>如果某个类中存在静态方法或是静态变量，那么我们可以通过静态导入的方式将其中的静态方法或是静态变量直接导入使用，但是同样<strong>需要有访问权限的情况下</strong>才可以：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n    \n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是静态方法！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态导入：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token static">test</span></span><span class="token punctuation">;</span>    <span class="token comment">//静态导入test方法</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//直接使用就可以，就像在这个类定义的方法一样</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',37)],p={},c=(0,s(3671).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),o=JSON.parse('{"path":"/code/java/java%202.html","title":"Java - 类与对象2","lang":"zh-CN","frontmatter":{"title":"Java - 类与对象2","date":"2024-08-15T00:00:00.000Z","category":["code"],"tag":["java"],"order":-0.99,"description":"静态变量和静态方法 Static 静态的内容，我们可以理解为是属于这个类的，也可以理解为是所有对象共享的内容。 我们通过使用 static 关键字来声明一个变量或一个方法为静态的，一旦被声明为静态，那么通过这个类创建的所有对象，操作的都是同一个目标，也就是说，对象再多，也只有这一个静态的变量或方法。 一个对象改变了静态变量的值，那么其他的对象读取的就是...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java/java%202.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Java - 类与对象2"}],["meta",{"property":"og:description","content":"静态变量和静态方法 Static 静态的内容，我们可以理解为是属于这个类的，也可以理解为是所有对象共享的内容。 我们通过使用 static 关键字来声明一个变量或一个方法为静态的，一旦被声明为静态，那么通过这个类创建的所有对象，操作的都是同一个目标，也就是说，对象再多，也只有这一个静态的变量或方法。 一个对象改变了静态变量的值，那么其他的对象读取的就是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://myimg.ekkosonya.cn/20240815224110.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T02:44:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Java - 类与对象2"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T02:44:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java - 类与对象2\\",\\"image\\":[\\"http://myimg.ekkosonya.cn/20240815224110.png\\",\\"http://myimg.ekkosonya.cn/20240815234719.png\\"],\\"datePublished\\":\\"2024-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T02:44:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"静态变量和静态方法","slug":"静态变量和静态方法","link":"#静态变量和静态方法","children":[{"level":3,"title":"静态变量初始化","slug":"静态变量初始化","link":"#静态变量初始化","children":[]}]},{"level":2,"title":"包的访问与控制","slug":"包的访问与控制","link":"#包的访问与控制","children":[{"level":3,"title":"包的声明和导入","slug":"包的声明和导入","link":"#包的声明和导入","children":[]},{"level":3,"title":"访问权限控制","slug":"访问权限控制","link":"#访问权限控制","children":[]}]}],"git":{"createdTime":1723737509000,"updatedTime":1730861075000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":3}]},"readingTime":{"minutes":5.81,"words":1742},"filePathRelative":"code/java/java 2.md","localizedDate":"2024年8月15日","excerpt":"<h2>静态变量和静态方法</h2>\\n<p><strong>Static</strong><br>\\n静态的内容，我们可以理解为是属于这个类的，也可以理解为是所有对象共享的内容。<br>\\n我们通过使用 <strong>static 关键字</strong>来声明一个变量或一个方法为<strong>静态的</strong>，一旦被声明为静态，那么通过这个类创建的所有对象，<strong>操作的都是同一个目标</strong>，也就是说，对象再多，也只<strong>有这一个静态的变量或方法</strong>。<br>\\n一个对象改变了静态变量的值，那么其他的对象读取的就是被改变的值。</p>\\n<p>一般情况下，我们并不会通过一个具体的对象去修改和使用静态属性，而是通过这个类去使用：</p>","autoDesc":true}')}}]);