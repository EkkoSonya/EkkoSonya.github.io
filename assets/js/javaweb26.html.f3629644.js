"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[7844],{83671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},73909:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>r});var t=a(7847);const e=a.p+"assets/img/8.1d01c482.png",p=a.p+"assets/img/9.ed1d3410.png",o=a.p+"assets/img/10.ebbb2874.png",c=a.p+"assets/img/11.8e69d85b.png",i=[(0,t.Fv)('<h2 id="junit单元测试2" tabindex="-1"><a class="header-anchor" href="#junit单元测试2"><span>JUnit单元测试2</span></a></h2><h3 id="断言工具-assertions" tabindex="-1"><a class="header-anchor" href="#断言工具-assertions"><span>断言工具 <code>Assertions</code></span></a></h3><p>JUnit提供了非常多的断言操作，相比JUnit 4，它们都被封装在一个新的<code>Assertions</code>类中</p><p>这些断言操作基本上都是用于判断某个测试结果是否符合我们的预期情况</p><h4 id="值判断-assertions-assertequals" tabindex="-1"><a class="header-anchor" href="#值判断-assertions-assertequals"><span>值判断 <code>Assertions.assertEquals</code></span></a></h4><p>其中最简单的就是判断结果是否等于某个值</p><p><code>Assertions.assertEquals(expected, actual, message)</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n    <span class="token comment">//判断结果是否相等，前面的是预期结果，后面的就是实际结果</span>\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当断言操作发现实际结果与预期不符时，会直接抛出异常告诉我们这个测试案例没有通过，并最终以失败状态结束。我们也可以为本次断言添加一个<code>message</code>来助于我们快速了解是什么类型的测试结果出现问题：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">&quot;计算结果验证&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时控制台就会得到：</p><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="真假判断-assertions-assertture-false" tabindex="-1"><a class="header-anchor" href="#真假判断-assertions-assertture-false"><span>真假判断 <code>Assertions.assertTure/False</code></span></a></h4><p><code>Assertions.assertTure(condition, message)</code></p><p>除了使用值进行比较外，我们也可以直接对某个<code>boolean</code>类型的结果快速进行判断，使用<code>assertTrue</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token number">14</span> <span class="token operator">==</span> c<span class="token punctuation">,</span> <span class="token string">&quot;计算结果验证&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="对象判断-assertions-assertsame" tabindex="-1"><a class="header-anchor" href="#对象判断-assertions-assertsame"><span>对象判断 <code>Assertions.assertSame()</code></span></a></h4><p>与其相似的还有两个相同对象的判断：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//判断两个值是否为同一个对象</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="复杂判断" tabindex="-1"><a class="header-anchor" href="#复杂判断"><span>复杂判断</span></a></h4><p>如果判断流程比较复杂，我们也可以使用Java8的Lambda来编写结果判断逻辑，提供一个BooleanSupplier对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> c <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;计算结果验证&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于更加复杂的组合结果判断，我们还可以使用<code>assertAll</code>来包含多个判断操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertAll</span><span class="token punctuation">(</span><span class="token string">&quot;整体测试&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行整体测试时，所有的测试结果将合并到一起输出。</p><h4 id="异常判断-assertions-assertthrows" tabindex="-1"><a class="header-anchor" href="#异常判断-assertions-assertthrows"><span>异常判断 <code>Assertions.assertThrows</code></span></a></h4><p>除了我们上面提到的真假判断外，还有很多不同类型的结果判断，比如异常判断，我们希望这个案例抛出指定的异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IOException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;此测试案例并未抛出指定异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于此时抛出的是一个<code>ArithmeticException</code>并不是我们需要的<code>IOException</code>或是<strong>其子类</strong>，所以说断言失败：</p><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>除了上述例子中出现的断言方法之外，JUnit还提供了上百种断言方法供大家使用，这里就不挨个介绍了。</p><h3 id="假设工具-assumptions" tabindex="-1"><a class="header-anchor" href="#假设工具-assumptions"><span>假设工具 <code>Assumptions</code></span></a></h3><p>除了断言工具外，对于一些不影响结果的测试</p><p>我们可以使用“假设”工具来实现对结果的判断但不作为测试结果的判断依据，它通常在执行给定测试没有意义时使用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Assumptions</span><span class="token punctuation">.</span><span class="token function">assumeTrue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果中会将其显示为已忽略，而不是失败：</p><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="条件测试和执行" tabindex="-1"><a class="header-anchor" href="#条件测试和执行"><span>条件测试和执行</span></a></h3><p>有些时候我们可能需要配置各种条件来执行某些测试案例</p><p>比如某些测试案例必须在指定JDK版本执行，或是某些案例只需要在某个特定操作系统执行</p><p>Junit支持我们就为测试案例设置条件来实现这些功能。</p><h4 id="指定操作系统-enabledonos" tabindex="-1"><a class="header-anchor" href="#指定操作系统-enabledonos"><span>指定操作系统 - <code>@EnabledOnOs</code></span></a></h4><p>比如，我们要限制某个测试案例只在指定操作系统下进行，那么就可以使用<code>@EnabledOnOs</code>来指定：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@EnabledOnOs</span><span class="token punctuation">(</span><span class="token constant">OS</span><span class="token punctuation">.</span><span class="token constant">MAC</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是只在Mac下执行的测试案例&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@EnabledOnOs</span><span class="token punctuation">(</span><span class="token constant">OS</span><span class="token punctuation">.</span><span class="token constant">WINDOWS</span><span class="token punctuation">)</span>\n<span class="token comment">//@DisabledOnOs(OS.MAC)  或是使用相反注解来为指定操作系统关闭此用例</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是只在Windows下执行的测试案例&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当我们在指定操作系统下执行时，此测试案例才会启动，否则会直接忽略：</p><figure><img src="'+c+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="指定jdk版本-enableonjre" tabindex="-1"><a class="header-anchor" href="#指定jdk版本-enableonjre"><span>指定JDK版本 <code>@EnableOnJre</code></span></a></h4><p>同样的，如果我们要指定在某个JDK版本执行测试案例，也可以使用<code>@EnabledOnJre</code>来进行指定：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@EnabledOnJre</span><span class="token punctuation">(</span><span class="token constant">JRE</span><span class="token punctuation">.</span><span class="token constant">JAVA_8</span><span class="token punctuation">)</span>\n<span class="token comment">//@DisabledOnJre(JRE.JAVA_8) 或是使用相反的注解来为指定JDK关闭</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是只在Java8下执行的测试案例&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@EnabledOnJre</span><span class="token punctuation">(</span><span class="token constant">JRE</span><span class="token punctuation">.</span><span class="token constant">JAVA_17</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是只在Java17下执行的测试案例&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指定jdk版本范围-enableonjrerange-min-xxx-max-xxx" tabindex="-1"><a class="header-anchor" href="#指定jdk版本范围-enableonjrerange-min-xxx-max-xxx"><span>指定JDK版本范围 <code>@EnableOnJreRange(min=xxx, max=xxx)</code></span></a></h4><p>或是一个指定的JDK版本范围：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@EnabledForJreRange</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token constant">JRE</span><span class="token punctuation">.</span><span class="token constant">JAVA_8</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token constant">JRE</span><span class="token punctuation">.</span><span class="token constant">JAVA_17</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是只在Java8-17下执行的测试案例&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了这种简单判断外，我们还可以直接从系统属性中获取我们需要的参数来进行判断。</p><blockquote><p>使用<code>System.getProperties()</code>来获取所有的系统属性，包括系统的架构、版本、名称等信息。下面注解主要就是利用这个函数来进行判断</p></blockquote><h4 id="系统属性判断-enabledifsystemproperty" tabindex="-1"><a class="header-anchor" href="#系统属性判断-enabledifsystemproperty"><span>系统属性判断 <code>@EnabledIfSystemProperty</code></span></a></h4><p>使用<code>@EnabledIfSystemProperty</code>来对系统属性进行判断：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@EnabledIfSystemProperty</span><span class="token punctuation">(</span>named <span class="token operator">=</span> <span class="token string">&quot;os.arch&quot;</span><span class="token punctuation">,</span> matches <span class="token operator">=</span> <span class="token string">&quot;aarch64&quot;</span><span class="token punctuation">)</span>\n<span class="token comment">//其中matches参数支持正则表达式</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是只在arm64架构下做的测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，有时候为了方便，我们也可以直接读取环境变量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@EnabledIfEnvironmentVariable</span><span class="token punctuation">(</span>named <span class="token operator">=</span> <span class="token string">&quot;TEST_STR&quot;</span><span class="token punctuation">,</span> matches <span class="token operator">=</span> <span class="token string">&quot;666&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是只在环境变量: TEST_STR = 666&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义方法-enabledif-xxx" tabindex="-1"><a class="header-anchor" href="#自定义方法-enabledif-xxx"><span>自定义方法 <code>@EnabledIf(xxx)</code></span></a></h4><p>如果你认为这还不够灵活，你还可以直接声明一个自定义方法来进行判断：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@EnabledIf</span><span class="token punctuation">(</span><span class="token string">&quot;testCondition&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是自定义的测试条件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">testCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>条件方法可以位于测试类之外。在这种情况下，它必须用其<em>完全限定的名称</em>来引用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnabledIf</span><span class="token punctuation">(</span><span class="token string">&quot;example.ExternalCondition#customCondition&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ExternalCondition</span> <span class="token punctuation">{</span>\n      <span class="token doc-comment comment">/**\n     * 在几种情况下，条件方法需要static：\n     * 当@EnabledIf或@DisabledIf在类上使用时\n     * 当@EnabledIf或@DisabledIf用于@ParameterizedTest或@TestTemplate方法时\n     * 当条件方法位于外部类中时\n     */</span>\n    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">customCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>',63)],l={},u=(0,a(83671).A)(l,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,i)}]]),r=JSON.parse('{"path":"/code/javaweb/6-JUnit/javaweb26.html","title":"javaweb - JUnit2","lang":"zh-CN","frontmatter":{"title":"javaweb - JUnit2","date":"2025-07-08T00:00:00.000Z","category":["code"],"tag":["javaweb","JUL"],"order":-0.7473,"description":"JUnit单元测试2 断言工具 Assertions JUnit提供了非常多的断言操作，相比JUnit 4，它们都被封装在一个新的Assertions类中 这些断言操作基本上都是用于判断某个测试结果是否符合我们的预期情况 值判断 Assertions.assertEquals 其中最简单的就是判断结果是否等于某个值 Assertions.assertE...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/6-JUnit/javaweb26.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - JUnit2"}],["meta",{"property":"og:description","content":"JUnit单元测试2 断言工具 Assertions JUnit提供了非常多的断言操作，相比JUnit 4，它们都被封装在一个新的Assertions类中 这些断言操作基本上都是用于判断某个测试结果是否符合我们的预期情况 值判断 Assertions.assertEquals 其中最简单的就是判断结果是否等于某个值 Assertions.assertE..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-09T16:42:59.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"JUL"}],["meta",{"property":"article:published_time","content":"2025-07-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-09T16:42:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - JUnit2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-09T16:42:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"JUnit单元测试2","slug":"junit单元测试2","link":"#junit单元测试2","children":[{"level":3,"title":"断言工具 Assertions","slug":"断言工具-assertions","link":"#断言工具-assertions","children":[{"level":4,"title":"值判断 Assertions.assertEquals","slug":"值判断-assertions-assertequals","link":"#值判断-assertions-assertequals","children":[]},{"level":4,"title":"真假判断 Assertions.assertTure/False","slug":"真假判断-assertions-assertture-false","link":"#真假判断-assertions-assertture-false","children":[]},{"level":4,"title":"对象判断 Assertions.assertSame()","slug":"对象判断-assertions-assertsame","link":"#对象判断-assertions-assertsame","children":[]},{"level":4,"title":"复杂判断","slug":"复杂判断","link":"#复杂判断","children":[]},{"level":4,"title":"异常判断 Assertions.assertThrows","slug":"异常判断-assertions-assertthrows","link":"#异常判断-assertions-assertthrows","children":[]}]},{"level":3,"title":"假设工具 Assumptions","slug":"假设工具-assumptions","link":"#假设工具-assumptions","children":[]},{"level":3,"title":"条件测试和执行","slug":"条件测试和执行","link":"#条件测试和执行","children":[{"level":4,"title":"指定操作系统 - @EnabledOnOs","slug":"指定操作系统-enabledonos","link":"#指定操作系统-enabledonos","children":[]},{"level":4,"title":"指定JDK版本 @EnableOnJre","slug":"指定jdk版本-enableonjre","link":"#指定jdk版本-enableonjre","children":[]},{"level":4,"title":"指定JDK版本范围 @EnableOnJreRange(min=xxx, max=xxx)","slug":"指定jdk版本范围-enableonjrerange-min-xxx-max-xxx","link":"#指定jdk版本范围-enableonjrerange-min-xxx-max-xxx","children":[]},{"level":4,"title":"系统属性判断 @EnabledIfSystemProperty","slug":"系统属性判断-enabledifsystemproperty","link":"#系统属性判断-enabledifsystemproperty","children":[]},{"level":4,"title":"自定义方法 @EnabledIf(xxx)","slug":"自定义方法-enabledif-xxx","link":"#自定义方法-enabledif-xxx","children":[]}]}]}],"git":{"createdTime":1752079379000,"updatedTime":1752079379000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":4.86,"words":1459},"filePathRelative":"code/javaweb/6-JUnit/javaweb26.md","localizedDate":"2025年7月8日","excerpt":"<h2>JUnit单元测试2</h2>\\n<h3>断言工具 <code>Assertions</code></h3>\\n<p>JUnit提供了非常多的断言操作，相比JUnit 4，它们都被封装在一个新的<code>Assertions</code>类中</p>\\n<p>这些断言操作基本上都是用于判断某个测试结果是否符合我们的预期情况</p>\\n<h4>值判断 <code>Assertions.assertEquals</code></h4>\\n<p>其中最简单的就是判断结果是否等于某个值</p>\\n<p><code>Assertions.assertEquals(expected, actual, message)</code></p>","autoDesc":true}')}}]);