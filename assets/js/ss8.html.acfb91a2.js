"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[2200],{3671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},2635:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>i,data:()=>l});var t=a(7847);const e=a.p+"assets/img/15.4e3d0901.png",p=a.p+"assets/img/16.ed8d61ba.png",o=[(0,t.Fv)('<h2 id="内部机制探究" tabindex="-1"><a class="header-anchor" href="#内部机制探究"><span>内部机制探究</span></a></h2><h3 id="安全上下文-securitycontext" tabindex="-1"><a class="header-anchor" href="#安全上下文-securitycontext"><span>安全上下文 <code>SecurityContext</code></span></a></h3><p>用户登录之后，怎么获取当前已经登录用户的信息呢？</p><h4 id="securitycontext-获取方式" tabindex="-1"><a class="header-anchor" href="#securitycontext-获取方式"><span><code>SecurityContext</code> 获取方式</span></a></h4><p>通过使用<code>SecurityContextHolder</code>就可以很方便地得到<code>SecurityContext</code>对象</p><p>我们可以直接使用<code>SecurityContext</code>对象来获取当前的认证信息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过SecurityContext我们就可以快速获取当前用户的名称和授权信息等</p><p>除了这种方式以外，我们还可以直接从Session中获取：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token annotation punctuation">@SessionAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;SPRING_SECURITY_CONTEXT&quot;</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContext</span> context<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="securitycontextholder-存储策略" tabindex="-1"><a class="header-anchor" href="#securitycontextholder-存储策略"><span><code>SecurityContextHolder</code> 存储策略</span></a></h4><p>注意<code>SecurityContextHolder</code>是有一定的存储策略的，<code>SecurityContextHolder</code>中的<code>SecurityContext</code>对象会在一开始请求到来时被设定，至于存储方式其实是由存储策略决定的，如果我们这样编写，那么在默认情况下是无法获取到认证信息的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>   <span class="token comment">//创建一个子线程去获取</span>\n        <span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//NPE</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为<code>SecurityContextHolder</code>的存储策略默认是<code>MODE_THREADLOCAL</code>，它是基于ThreadLocal实现的</p><p><code>getContext()</code>方法本质上调用的是对应的存储策略实现的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecurityContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SecurityContextHolderStrategy</code>有三个实现类：</p><ul><li><code>GlobalSecurityContextHolderStrategy</code>：全局模式，不常用</li><li><code>ThreadLocalSecurityContextHolderStrategy</code>：基于ThreadLocal实现，线程内可见</li><li><code>InheritableThreadLocalSecurityContextHolderStrategy</code>：基于InheritableThreadLocal实现，线程和子线程可见</li></ul><p>因此，如果上述情况需要在子线程中获取，那么需要修改<code>SecurityContextHolder</code>的存储策略，在初始化的时候设置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostConstruct</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">setStrategyName</span><span class="token punctuation">(</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token constant">MODE_INHERITABLETHREADLOCAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在子线程中也可以获取认证信息了。</p><h4 id="自定义登录设置" tabindex="-1"><a class="header-anchor" href="#自定义登录设置"><span>自定义登录设置</span></a></h4><p>因为用户的验证信息是基于<code>SecurityContext</code>进行判断的，我们可以直接修改<code>SecurityContext</code>的内容，来手动为用户进行登陆：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/auth&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseBody</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token comment">// 获取SecurityContext对象（当前会话肯定是没有登陆的）</span>\n    <span class="token class-name">UsernamePasswordAuthenticationToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n            <span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n            <span class="token comment">// 手动创建一个UsernamePasswordAuthenticationToken对象，也就是用户的认证信息，角色需要添加ROLE_前缀，权限直接写</span>\n    context<span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token comment">// 手动为SecurityContext设定认证信息</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;Login success！&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在未登陆的情况下，访问此地址将直接进行手动登陆，相当于配置了一个 Test 用户，权限是 <code>ROLE_user</code></p><p>再次访问<code>/index</code>页面，可以直接访问，说明手动设置认证信息成功。</p><h4 id="securitycontext-声明周期" tabindex="-1"><a class="header-anchor" href="#securitycontext-声明周期"><span><code>SecurityContext</code> 声明周期</span></a></h4><p><strong>疑惑：</strong> <code>SecurityContext</code>这玩意不是默认线程独占吗，那<strong>每次请求都是一个新的线程</strong>，按理说上一次的<code>SecurityContext</code>对象应该没了才对啊，为什么再次请求依然能够继续使用上一次<code>SecurityContext</code>中的认证信息呢？</p><p><code>SecurityContext</code>的生命周期：请求到来时从<code>Session</code>中取出，放入<code>SecurityContextHolder</code>中，请求结束时从<code>SecurityContextHolder</code>取出，并放到<code>Session</code>中，实际上就是依靠<code>Session</code>来存储的，一旦会话过期验证信息也跟着消失。</p><p>也就是本质是存到 <code>Session</code> 里的，只不过来请求了就从<code>Session</code>取出来，放到<code>SecurityContextHolder</code>中</p><h3 id="安全上下文持久化过滤器" tabindex="-1"><a class="header-anchor" href="#安全上下文持久化过滤器"><span>安全上下文持久化过滤器</span></a></h3><p><code>SecurityContextHolderFilter</code>也是内置的<code>Filter</code>，它就是专门用于处理<code>SecurityContext</code>的，这里先说一下大致流程，以便我们后续更加方便地理解：</p><blockquote><p>当过滤器链执行到<code>SecurityContextHolderFilter</code>时，它会从<code>HttpSession</code>中把<code>SecurityContext</code>对象取出来（是存在Session中的，跟随会话的消失而消失），然后放入<code>SecurityContextHolder</code>对象中。请求结束后，再把<code>SecurityContext</code>存入<code>HttpSession</code>中 (因为可能操作会修改 context，所以放回去覆盖)，并清除<code>SecurityContextHolder</code>内的<code>SecurityContext</code>对象。</p></blockquote><h4 id="securitycontextholderfilter源码" tabindex="-1"><a class="header-anchor" href="#securitycontextholderfilter源码"><span><code>SecurityContextHolderFilter</code>源码</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityContextHolderFilter</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FILTER_APPLIED</span> <span class="token operator">=</span> <span class="token class-name">SecurityContextHolderFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.APPLIED&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SecurityContextRepository</span> securityContextRepository<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">SecurityContextHolderStrategy</span> securityContextHolderStrategy <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">SecurityContextHolderFilter</span><span class="token punctuation">(</span><span class="token class-name">SecurityContextRepository</span> securityContextRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>securityContextRepository<span class="token punctuation">,</span> <span class="token string">&quot;securityContextRepository cannot be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextRepository <span class="token operator">=</span> securityContextRepository<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 套娃</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span>response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 防止重复的安全需求，一般直接走else</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token constant">FILTER_APPLIED</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">FILTER_APPLIED</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 通过 securityContextRepository 中的 loadDeferredContext 方法获取到 SecurityContext 对象 的Supplier方法</span>\n            <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span></span> deferredContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextRepository<span class="token punctuation">.</span><span class="token function">loadDeferredContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextHolderStrategy<span class="token punctuation">.</span><span class="token function">setDeferredContext</span><span class="token punctuation">(</span>deferredContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextHolderStrategy<span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                request<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token constant">FILTER_APPLIED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSecurityContextHolderStrategy</span><span class="token punctuation">(</span><span class="token class-name">SecurityContextHolderStrategy</span> securityContextHolderStrategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>securityContextHolderStrategy<span class="token punctuation">,</span> <span class="token string">&quot;securityContextHolderStrategy cannot be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextHolderStrategy <span class="token operator">=</span> securityContextHolderStrategy<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span></span> deferredContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextRepository<span class="token punctuation">.</span><span class="token function">loadDeferredContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>Supplier</code> 的目的是延迟创建，因为可能不是立刻需要创建 <code>context</code>, 所以在有需要时候，再通过 <code>deferredContext.get()</code> 创建</p><h4 id="securitycontextrepository" tabindex="-1"><a class="header-anchor" href="#securitycontextrepository"><span><code>SecurityContextRepository</code></span></a></h4><p>对于 <code>this.securityContextRepository</code> 在初始化时是外部传来赋值的，因为 <code>SecurityContextRepository</code> 是接口，其具体有其他实现类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SecurityContextRepository</span> securityContextRepository<span class="token punctuation">;</span>\n<span class="token keyword">public</span> <span class="token class-name">SecurityContextHolderFilter</span><span class="token punctuation">(</span><span class="token class-name">SecurityContextRepository</span> securityContextRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>securityContextRepository<span class="token punctuation">,</span> <span class="token string">&quot;securityContextRepository cannot be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextRepository <span class="token operator">=</span> securityContextRepository<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecurityContextRepository</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/** <span class="token keyword">@deprecated</span> */</span>\n    <span class="token annotation punctuation">@Deprecated</span>\n    <span class="token class-name">SecurityContext</span> <span class="token function">loadContext</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestResponseHolder</span> requestResponseHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">default</span> <span class="token class-name">DeferredSecurityContext</span> <span class="token function">loadDeferredContext</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpRequestResponseHolder</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SupplierDeferredSecurityContext</span><span class="token punctuation">(</span><span class="token class-name">SingletonSupplier</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">void</span> <span class="token function">saveContext</span><span class="token punctuation">(</span><span class="token class-name">SecurityContext</span> context<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">boolean</span> <span class="token function">containsContext</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="loaddeferredcontext的实现细节" tabindex="-1"><a class="header-anchor" href="#loaddeferredcontext的实现细节"><span><code>loadDeferredContext</code>的实现细节</span></a></h4><p>具体地，<code>SecurityContextRepository</code>的实现类是<code>DelegatingSecurityContextRepository</code>类</p><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>这个类中维护了多个<code>SecurityContextRepositor</code>实现类，而其本身并没有实现<code>loadDeferredContext</code>方法，而是靠内部维护的其他<code>SecurityContextRepository</code>实现类来完成：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">DeferredSecurityContext</span> <span class="token function">loadDeferredContext</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// DeferredSecurityContext是一个支持延时生成的SecurityContext，本质是一个SecurityContext的Supplier</span>\n        <span class="token class-name">DeferredSecurityContext</span> deferredSecurityContext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token comment">// 遍历内部维护的其他SecurityContextRepository实现，一般包含以下两个：</span>\n    <span class="token comment">// 1. HttpSessionSecurityContextRepository</span>\n    <span class="token comment">// 2. RequestAttributeSecurityContextRepository</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SecurityContextRepository</span> delegate <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegates<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 这个if-else语句其实为了添加多个SecurityContextRepository提供的SecurityContext并将其组成一个链状结构的DelegatingDeferredSecurityContext（至于为什么，我们接着往下看）</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>deferredSecurityContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                deferredSecurityContext <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">loadDeferredContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token class-name">DeferredSecurityContext</span> next <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">loadDeferredContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                deferredSecurityContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingDeferredSecurityContext</span><span class="token punctuation">(</span>deferredSecurityContext<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> deferredSecurityContext<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思是，内部保存了多个 <code>SecurityContextRepository</code> 实现，保存在 <code>this.delegates</code>里面</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DelegatingSecurityContextRepository</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContextRepository</span><span class="token punctuation">&gt;</span></span> delegates<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>delegates<span class="token punctuation">,</span> <span class="token string">&quot;delegates cannot be empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>delegates <span class="token operator">=</span> delegates<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般有两个</p><ol><li><code>HttpSessionSecurityContextRepository</code></li><li><code>RequestAttributeSecurityContextRepository</code></li></ol><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>然后这个 <code>DelegatingSecurityContextRepository</code> 的 <code>doFilter</code> 就是遍历使用这些多个来依次 <code>delegate.loadDeferredContext(request);</code></p><h5 id="httpsessionsecuritycontextrepository" tabindex="-1"><a class="header-anchor" href="#httpsessionsecuritycontextrepository"><span><code>HttpSessionSecurityContextRepository</code></span></a></h5><p>首先我们来看第一个<code>HttpSessionSecurityContextRepository</code>，它是第一个被遍历的实现，内部的 <code>loadDeferredContext(request)</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">DeferredSecurityContext</span> <span class="token function">loadDeferredContext</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">readSecurityContextFromSession</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n        <span class="token comment">// 从Session中取出SecurityContext</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SupplierDeferredSecurityContext</span><span class="token punctuation">(</span>supplier<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextHolderStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SPRING_SECURITY_CONTEXT_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;SPRING_SECURITY_CONTEXT&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> springSecurityContextKey <span class="token operator">=</span> <span class="token constant">SPRING_SECURITY_CONTEXT_KEY</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">SecurityContext</span> <span class="token function">readSecurityContextFromSession</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> httpSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token comment">// 实际上这里就是从Session中通过键“SPRING_SECURITY_CONTEXT”取出的SecurityContext</span>\n    <span class="token comment">// 跟我们上一节使用的是完全一样的，这下就很清晰了</span>\n    <span class="token comment">// 如果用户没有登录验证，那么这里获取到的SecurityContext就是null了</span>\n        <span class="token class-name">Object</span> contextFromSession <span class="token operator">=</span> httpSession<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>springSecurityContextKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">SecurityContext</span><span class="token punctuation">)</span> contextFromSession<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后返回回去的是一个<code>SupplierDeferredSecurityContext</code>对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SupplierDeferredSecurityContext</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredSecurityContext</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">SupplierDeferredSecurityContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SecurityContextHolderStrategy</span> strategy<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">SecurityContext</span> securityContext<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">boolean</span> missingContext<span class="token punctuation">;</span>\n\n    <span class="token class-name">SupplierDeferredSecurityContext</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">,</span> <span class="token class-name">SecurityContextHolderStrategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>supplier <span class="token operator">=</span> supplier<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">SecurityContext</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//在获取SecurityContext时会进行一次初始化</span>\n        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>securityContext<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGenerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 初始化后判断是否为未登录的SecurityContext</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>missingContext<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 如果securityContext不为null表示已经初始化过了</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>securityContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 直接通过supplier获取securityContext对象</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>securityContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 如果securityContext对象为null，那么就标记missingContext</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>missingContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>securityContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>missingContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当missingContext为真时，说明没有securityContext（一般是未登录的情况）</span>\n        <span class="token comment">// 那么就创建一个空的securityContext，不包含任何认证信息</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>securityContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//日志无视就好</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Created %s&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>securityContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="requestattributesecuritycontextrepository" tabindex="-1"><a class="header-anchor" href="#requestattributesecuritycontextrepository"><span><code>RequestAttributeSecurityContextRepository</code></span></a></h5><p>接着是第二个被遍历的实现<code>RequestAttributeSecurityContextRepository</code>类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">DeferredSecurityContext</span> <span class="token function">loadDeferredContext</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">getContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 同样是返回SupplierDeferredSecurityContext对象</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SupplierDeferredSecurityContext</span><span class="token punctuation">(</span>supplier<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextHolderStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">SecurityContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 通过HttpServletRequest的Attribute获取SecurityContext</span>\n        <span class="token comment">// 由于一般情况下没有设定过，因此得到的就是null</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">SecurityContext</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestAttributeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，两个SecurityContext就会以链式存放在<code>DelegatingDeferredSecurityContext</code>对象中，一并返回</p><p>因为在 <code>DelegatingDeferredSecurityContextRepository</code> 中的 <code>doFilter</code> 就是不断塞进去</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DeferredSecurityContext</span> <span class="token function">loadDeferredContext</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">DeferredSecurityContext</span> deferredSecurityContext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SecurityContextRepository</span> delegate <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegates<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>deferredSecurityContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            deferredSecurityContext <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">loadDeferredContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">DeferredSecurityContext</span> next <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">loadDeferredContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            deferredSecurityContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingDeferredSecurityContext</span><span class="token punctuation">(</span>deferredSecurityContext<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> deferredSecurityContext<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的对象就是 <code>DeferredSecurityContext</code>, 像是一个链式存储，返回最后一个元素的位置，然后可以通过 <code>previous</code> 和 <code>next</code> 来找</p><p>它的内部长这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingDeferredSecurityContext</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredSecurityContext</span> <span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DeferredSecurityContext</span> previous<span class="token punctuation">;</span>\n        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DeferredSecurityContext</span> next<span class="token punctuation">;</span>\n\n        <span class="token class-name">DelegatingDeferredSecurityContext</span><span class="token punctuation">(</span><span class="token class-name">DeferredSecurityContext</span> previous<span class="token punctuation">,</span> <span class="token class-name">DeferredSecurityContext</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>previous <span class="token operator">=</span> previous<span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token class-name">SecurityContext</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 在获取SecurityContext时，会首先从最前面的开始获取</span>\n            <span class="token class-name">SecurityContext</span> securityContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>previous<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 如果最前面的SecurityContext是已登录的，那么直接返回这个SecurityContext</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>previous<span class="token punctuation">.</span><span class="token function">isGenerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> securityContext<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 否则继续看后面的，也许后面的会有已登录的（实在没有就直接返回一个空的SecurityContext了）</span>\n            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGenerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>previous<span class="token punctuation">.</span><span class="token function">isGenerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">isGenerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重新回到-securitycontextholderfilter" tabindex="-1"><a class="header-anchor" href="#重新回到-securitycontextholderfilter"><span>重新回到 <code>SecurityContextHolderFilter</code></span></a></h4><p>兜了这么大一圈，现在回到一开始的Filter中，也就是 <code>SecurityContextHolderFilter</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>\n        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span></span> deferredContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextRepository<span class="token punctuation">.</span><span class="token function">loadDeferredContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 拿到最终的SecurityContext的Supplier后，继续下面的语句</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 向securityContextHolderStrategy中设置我们上面得到的DeferredSecurityContext</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextHolderStrategy<span class="token punctuation">.</span><span class="token function">setDeferredContext</span><span class="token punctuation">(</span>deferredContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 请求前的任务已完成，继续其他过滤器了</span>\n            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 请求结束后，清理掉securityContextHolderStrategy中的DeferredSecurityContext</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextHolderStrategy<span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            request<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token constant">FILTER_APPLIED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是我们最后就是在 <code>SecurityContextHolderFilter</code> 中向 <code>securityContextHolderStrategy</code> 注入信息 <code>this.securityContextHolderStrategy.setDeferredContext(deferredContext);</code></p><p>而对应的 <code>securityContextHolderStrategy</code> 就是来自 <code>SecurityContextHolder</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityContextHolderFilter</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FILTER_APPLIED</span> <span class="token operator">=</span> <span class="token class-name">SecurityContextHolderFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.APPLIED&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SecurityContextRepository</span> securityContextRepository<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">SecurityContextHolderStrategy</span> securityContextHolderStrategy <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="securitycontextholder-分析" tabindex="-1"><a class="header-anchor" href="#securitycontextholder-分析"><span><code>SecurityContextHolder</code> 分析</span></a></h4><p>最后我们再来看一下我们之前通过<code>SecurityContextHolder</code>是如何获取到SecurityContext的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityContextHolder</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> strategyName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_PROPERTY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SecurityContextHolderStrategy</span> strategy<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> initializeCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">static</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 类加载时会进行一次初始化</span>\n        <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 初始化会将对应的SecurityContextHolderStrategy对象给创建</span>\n        <span class="token function">initializeStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        initializeCount<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 初始化SecurityContextHolderStrategy对象</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initializeStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>strategyName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;MODE_THREADLOCAL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalSecurityContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>strategyName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;MODE_INHERITABLETHREADLOCAL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocalSecurityContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>strategyName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;MODE_GLOBAL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalSecurityContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 尝试加载系统配置中设定的Strategy实现类，默认是MODE_THREADLOCAL</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>strategyName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> customStrategy <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// 这里直接根据配置中的类名，用反射怒艹一个对象出来</span>\n                strategy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SecurityContextHolderStrategy</span><span class="token punctuation">)</span> customStrategy<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">handleReflectionException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 清除Context中的内容，实际上就是清理SecurityContextHolderStrategy中的内容</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        strategy<span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 获取SecurityContext对象</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecurityContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取SecurityContext实际上也是通过SecurityContextHolderStrategy根据策略来获取</span>\n        <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n        \n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="securitycontextholderstrategy" tabindex="-1"><a class="header-anchor" href="#securitycontextholderstrategy"><span><code>SecurityContextHolderStrategy</code></span></a></h5><p>我们发现，实际上<code>SecurityContextHolder</code>获取<code>SecurityContext</code>对象，就是通过<code>SecurityContextHolderStrategy</code>根据策略来获取，我们直接来看<code>SecurityContextHolderStrategy</code>的实现类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalSecurityContextHolderStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">SecurityContextHolderStrategy</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 内部维护一个ThreadLocal对象，按线程存储对应的DeferredSecurityContext</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Supplier</span><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> contextHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 清理实际上是直接清理掉ThreadLocal中存的对象</span>\n        contextHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">SecurityContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取也很简单，直接通过Supplier拿到需要的SecurityContext对象</span>\n        <span class="token keyword">return</span> <span class="token function">getDeferredContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span></span> <span class="token function">getDeferredContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> contextHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 如果存储的DeferredSecurityContext为null，这里临时创建一个空的SecurityContext并保存</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> context<span class="token punctuation">;</span>\n            contextHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，整个流程其实就很清楚了，项目启动时，<code>SecurityContextHolder</code>会自动根据配置创建对应的<code>SecurityContextHolderStrategy</code>对象。</p><p>当我们的请求到来之后，首先会经过<code>SecurityContextHolderFilter</code>，然后在这个阶段，通过<code>SecurityContextRepository</code>来将不同地方存储（一般是Session中存储）的<code>SecurityContext</code>对象取出并封装为<code>DefferdSecurityContext</code>，然后将其添加到一开始创建好的<code>SecurityContextHolderStrategy</code>对象中</p><p>这样，我们的<code>Controller</code>在处理时就能直接从<code>SecurityContextHolder</code>取出<code>SecurityContext</code>对象了，最后在处理结束返回响应时，<code>SecurityContextHolderFilter</code>也会将<code>SecurityContextHolderStrategy</code>存储的<code>DefferdSecurityContext</code>清除掉，至此，一个完整流程结束。</p>',81)],c={},i=(0,a(3671).A)(c,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,o)}]]),l=JSON.parse('{"path":"/code/java_ssm/3-SpringSecurity/ss8.html","title":"Javassm - SpringSecurity8","lang":"zh-CN","frontmatter":{"title":"Javassm - SpringSecurity8","date":"2025-09-18T00:00:00.000Z","category":["code"],"tag":["javassm","Spring"],"order":-0.599,"description":"内部机制探究 安全上下文 SecurityContext 用户登录之后，怎么获取当前已经登录用户的信息呢？ SecurityContext 获取方式 通过使用SecurityContextHolder就可以很方便地得到SecurityContext对象 我们可以直接使用SecurityContext对象来获取当前的认证信息： 通过SecurityCon...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_ssm/3-SpringSecurity/ss8.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - SpringSecurity8"}],["meta",{"property":"og:description","content":"内部机制探究 安全上下文 SecurityContext 用户登录之后，怎么获取当前已经登录用户的信息呢？ SecurityContext 获取方式 通过使用SecurityContextHolder就可以很方便地得到SecurityContext对象 我们可以直接使用SecurityContext对象来获取当前的认证信息： 通过SecurityCon..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-22T18:08:18.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javassm"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2025-09-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-22T18:08:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - SpringSecurity8\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-22T18:08:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"内部机制探究","slug":"内部机制探究","link":"#内部机制探究","children":[{"level":3,"title":"安全上下文 SecurityContext","slug":"安全上下文-securitycontext","link":"#安全上下文-securitycontext","children":[{"level":4,"title":"SecurityContext 获取方式","slug":"securitycontext-获取方式","link":"#securitycontext-获取方式","children":[]},{"level":4,"title":"SecurityContextHolder 存储策略","slug":"securitycontextholder-存储策略","link":"#securitycontextholder-存储策略","children":[]},{"level":4,"title":"自定义登录设置","slug":"自定义登录设置","link":"#自定义登录设置","children":[]},{"level":4,"title":"SecurityContext 声明周期","slug":"securitycontext-声明周期","link":"#securitycontext-声明周期","children":[]}]},{"level":3,"title":"安全上下文持久化过滤器","slug":"安全上下文持久化过滤器","link":"#安全上下文持久化过滤器","children":[{"level":4,"title":"SecurityContextHolderFilter源码","slug":"securitycontextholderfilter源码","link":"#securitycontextholderfilter源码","children":[]},{"level":4,"title":"SecurityContextRepository","slug":"securitycontextrepository","link":"#securitycontextrepository","children":[]},{"level":4,"title":"loadDeferredContext的实现细节","slug":"loaddeferredcontext的实现细节","link":"#loaddeferredcontext的实现细节","children":[{"level":5,"title":"HttpSessionSecurityContextRepository","slug":"httpsessionsecuritycontextrepository","link":"#httpsessionsecuritycontextrepository","children":[]},{"level":5,"title":"RequestAttributeSecurityContextRepository","slug":"requestattributesecuritycontextrepository","link":"#requestattributesecuritycontextrepository","children":[]}]},{"level":4,"title":"重新回到 SecurityContextHolderFilter","slug":"重新回到-securitycontextholderfilter","link":"#重新回到-securitycontextholderfilter","children":[]},{"level":4,"title":"SecurityContextHolder 分析","slug":"securitycontextholder-分析","link":"#securitycontextholder-分析","children":[{"level":5,"title":"SecurityContextHolderStrategy","slug":"securitycontextholderstrategy","link":"#securitycontextholderstrategy","children":[]}]}]}]}],"git":{"createdTime":1758564498000,"updatedTime":1758564498000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":9.57,"words":2871},"filePathRelative":"code/java_ssm/3-SpringSecurity/ss8.md","localizedDate":"2025年9月18日","excerpt":"<h2>内部机制探究</h2>\\n<h3>安全上下文 <code>SecurityContext</code></h3>\\n<p>用户登录之后，怎么获取当前已经登录用户的信息呢？</p>\\n<h4><code>SecurityContext</code> 获取方式</h4>\\n<p>通过使用<code>SecurityContextHolder</code>就可以很方便地得到<code>SecurityContext</code>对象</p>\\n<p>我们可以直接使用<code>SecurityContext</code>对象来获取当前的认证信息：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@RequestMapping</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/index\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">index</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">SecurityContext</span> context <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">SecurityContextHolder</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getContext</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Authentication</span> authentication <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAuthentication</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">User</span> user <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">User</span><span class=\\"token punctuation\\">)</span> authentication<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getPrincipal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>user<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getUsername</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>user<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAuthorities</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"index\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);