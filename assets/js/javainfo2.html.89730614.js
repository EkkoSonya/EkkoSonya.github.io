"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[5788],{3671:(a,n)=>{n.A=(a,n)=>{const s=a.__vccOpts||a;for(const[a,e]of n)s[a]=e;return s}},7338:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>r,data:()=>k});var e=s(7847);const t=s.p+"assets/img/2.087e7df3.png",o=s.p+"assets/img/3.955b05d8.png",p=s.p+"assets/img/4.5ab70068.png",l=s.p+"assets/img/5.e2c4f97c.png",c=s.p+"assets/img/6.c20d4bc6.png",i=s.p+"assets/img/7.87a9e58f.png",d=[(0,e.Fv)('<h2 id="java9" tabindex="-1"><a class="header-anchor" href="#java9"><span>Java9</span></a></h2><p>Java 9的主要特性有，全新的模块机制、接口的private方法等。</p><h3 id="模块机制" tabindex="-1"><a class="header-anchor" href="#模块机制"><span>模块机制</span></a></h3><h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h4><p>当我们导入一个<code>jar</code>包作为依赖时（包括JDK官方库），实际上很多功能我们并不会用到，但是由于它们是属于同一个依赖捆绑在一起，这样就会导致我们可能只用到一部分内容，但是需要引用一个完整的类库</p><p>实际上我们可以把用不到的类库排除掉，大大降低依赖库的规模。</p><p>于是，Java 9引入了<strong>模块机制</strong>来对这种情况进行优化，在之前的我们的项目是这样的：</p><figure><img src="'+t+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>而在引入模块机制之后：</p><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>可以看到，模块可以由一个或者多个在一起的 Java 包组成，通过将这些包分出不同的模块，我们就可以按照模块的方式进行管理了。</p><h5 id="实现包的分离管理" tabindex="-1"><a class="header-anchor" href="#实现包的分离管理"><span>实现包的分离管理</span></a></h5><p>这里我们创建一个新的项目，并在<code>src</code>目录下，新建<code>module-info.java</code>文件表示此项目采用模块管理机制：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token class-name">NewHelloWorld</span> <span class="token punctuation">{</span>  <span class="token comment">//模块名称随便起一个就可以，但是注意必须是唯一的，以及模块内的包名也得是唯一的，即使模块不同</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们来创建一个主类：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>package com.ekko;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(&quot;Hello World&quot;);\n    }\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序可以正常运行，貌似和之前没啥区别，不过我们发现，JDK为我们提供的某些框架不见了</p><p>Java为我们提供的<code>logging</code>相关日志库，即 <code>java.util.loggin</code></p><p>我们发现现在不见了，实际上它就是被作为一个模块单独存在，这里我们需进行<strong>模块导入</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token class-name">NewHelloWorld</span> <span class="token punctuation">{</span>  <span class="token comment">//模块名称随便起一个就可以</span>\n    <span class="token keyword">requires</span> <span class="token namespace">java<span class="token punctuation">.</span>logging</span><span class="token punctuation">;</span>   \n    <span class="token comment">//除了JDK的一些常用包之外，只有我们明确需要的模块才会导入依赖库</span>\n    <span class="token comment">//当然如果要导入JavaSE的所有依赖，想之前一样的话，直接 requires java.se;  即可</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们导入java.logging相关模块后，就可以正常使用Logger了</p><p>否则，如果未在 <code>module-info.java</code> 中导入，会提示找不到</p><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>模块化机制提供了另一个级别的Java代码可见性、可访问性的控制。</p><h5 id="提高安全性" tabindex="-1"><a class="header-anchor" href="#提高安全性"><span>提高安全性</span></a></h5><p>尝试通过反射获取JDK提供的类中的字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//Java17版本的String类</span>\n<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>\n    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span><span class="token punctuation">,</span>\n               <span class="token class-name">Constable</span><span class="token punctuation">,</span> <span class="token class-name">ConstantDesc</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Stable</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span> \n     <span class="token comment">//自JDK9后，为了提高性能，String底层数据存放的是byte[]而不是char[]</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringClass <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n    <span class="token class-name">Field</span> field <span class="token operator">=</span> stringClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//这里我们通过反射来获取String类中的value字段</span>\n    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//由于是private访问权限，所以我们修改一下</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;ABCD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我们发现，在程序运行之后，修改操作被阻止了：</p><figure><img src="'+l+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>反射 API 的 Java 9 封装和安全性得到了改进，如果模块没有明确授权给其他模块使用反射的权限，那么其他模块是不允许使用反射进行修改的。</p><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h4><p>首先模块具有四种类型：</p><ul><li><p><strong>系统模块：</strong> 来自JDK和JRE的模块（官方提供的模块，比如我们上面用的） 我们也可以直接使用<code>java --list-modules</code>命令来列出所有的模块，不同的模块会导出不同的包供我们使用。</p></li><li><p><strong>应用程序模块：</strong> 我们自己写的Java模块项目。</p></li><li><p><strong>自动模块：</strong> 可能有些库并不是Java 9以上的模块项目，这种时候就需要做兼容了，默认情况下是<strong>直接导出所有的包</strong>，可以访问所有其他模块提供的类，不然之前版本的库就用不了了。</p></li><li><p><strong>未命名模块：</strong> 我们自己创建的一个Java项目，如果没有创建<code>module-info.java</code>，那么会按照未命名模块进行处理 未命名模块同样可以访问所有其他模块提供的类，这样我们之前写的Java 8代码才能正常地在Java 9以及之后的版本下运行。 不过，由于没有使用Java 9的模块新特性，未命名模块只能<strong>默认暴露给其他未命名的模块和自动模块</strong>，应用程序模块无法访问这些类（实际上就是传统Java 8以下的编程模式，因为没有模块只需要导包就行）</p></li></ul><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h4><p>这里我们就来创建两个项目，看看如何使用模块机制</p><p>首先我们在项目A中，添加一个<code>User</code>类，然后在项目B使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">&quot; (&quot;</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">&quot;岁)&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们编写一下项目A的模块设置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token keyword">module</span><span class="token punctuation">.</span>a <span class="token punctuation">{</span>\n    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们将<code>com.test</code>包下所有内容都暴露出去，默认情况下<strong>所有的包都是私有</strong>的，就算其他项目将此项目作为依赖也无法使用。</p><p>接着我们现在想要在项目B中使用项目A的User类，我们需要进行导入：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token keyword">module</span><span class="token punctuation">.</span>b <span class="token punctuation">{</span>\n    <span class="token keyword">requires</span> <span class="token keyword">module</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们就可以在Main类中使用模块<code>module.a</code>中暴露出来的包内容了：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>   \n<span class="token comment">//如果模块module.a不暴露，那么将无法导入</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;penguin&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然除了普通的<code>exports</code>进行包的暴露之外，我们也可以直接指定将包暴露给<strong>指定的模块</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token keyword">module</span><span class="token punctuation">.</span>a <span class="token punctuation">{</span>\n    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span> <span class="token keyword">to</span> <span class="token keyword">module</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>   \n    <span class="token comment">//这里我们将com.test包暴露给指定的模块module.b，非指定的模块即使导入也无法使用</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="依赖传递-transitive" tabindex="-1"><a class="header-anchor" href="#依赖传递-transitive"><span>依赖传递 <code>transitive</code></span></a></h5><p>如果模块<code>module.a</code>依赖于其他模块，那么会不会传递给依赖于模块<code>module.a</code>的模块呢？</p><p>默认是不传递的</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token keyword">module</span><span class="token punctuation">.</span>a <span class="token punctuation">{</span>\n    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span> <span class="token keyword">to</span> <span class="token keyword">module</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>   <span class="token comment">//使用exports将com.test包下所有内容暴露出去，这样其他模块才能导入</span>\n    <span class="token keyword">requires</span> <span class="token namespace">java<span class="token punctuation">.</span>logging</span><span class="token punctuation">;</span>   <span class="token comment">//这里添加一个模块的依赖</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+c+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>可以看到，在模块<code>module.b</code>中，并<strong>没有进行依赖传递</strong>，说明哪个模块导入的依赖只能哪个模块用</p><p>但是现在我们希望依赖可以传递，就是哪个模块用了什么依赖，依赖此模块的模块也会自动进行依赖，我们可以通过一个关键字解决：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token keyword">module</span><span class="token punctuation">.</span>a <span class="token punctuation">{</span>\n    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span> <span class="token keyword">to</span> <span class="token keyword">module</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>   \n    <span class="token comment">//使用exports将com.test包下所有内容暴露出去，这样其他模块才能导入</span>\n    <span class="token keyword">requires</span> <span class="token keyword">transitive</span> <span class="token namespace">java<span class="token punctuation">.</span>logging</span><span class="token punctuation">;</span>   \n    <span class="token comment">//使用transitive来向其他模块传递此依赖</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在就可以使用了：</p><figure><img src="'+i+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h5 id="开启反射-open" tabindex="-1"><a class="header-anchor" href="#开启反射-open"><span>开启反射 <code>open</code></span></a></h5><p>还有我们前面演示的反射，我们发现如果我们依赖了一个模块，是没办法直接进行反射操作的</p><p>那么怎么样才可以使用反射呢？我们可以为其他模块开放某些运行使用反射的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">open</span> <span class="token keyword">module</span> <span class="token keyword">module</span><span class="token punctuation">.</span>a <span class="token punctuation">{</span>   \n  <span class="token comment">//直接添加open关键字开放整个模块的反射权限</span>\n    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span> <span class="token keyword">to</span> <span class="token keyword">module</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token keyword">module</span><span class="token punctuation">.</span>a <span class="token punctuation">{</span>\n    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span> <span class="token keyword">to</span> <span class="token keyword">module</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>\n    <span class="token keyword">opens</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>   \n    <span class="token comment">//通过使用opens关键字来为其他模块开放反射权限</span>\n    <span class="token comment">//也可以指定目标开放反射 opens com.test to module.b;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="指定实现-uses-provides" tabindex="-1"><a class="header-anchor" href="#指定实现-uses-provides"><span>指定实现 <code>uses</code> + <code>provides</code></span></a></h5><p>我们还可以指定模块需要使用的抽象类或是接口实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">open</span> <span class="token keyword">module</span> <span class="token keyword">module</span><span class="token punctuation">.</span>a <span class="token punctuation">{</span>\n    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span> <span class="token keyword">to</span> <span class="token keyword">module</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>\n    <span class="token keyword">uses</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>  \n    <span class="token comment">//使用uses指定，Test是一个接口（比如需要的服务等），模块需要使用到</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在模块B中去实现一下，然后声明我们提供了实现类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>main</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token keyword">module</span><span class="token punctuation">.</span>b <span class="token punctuation">{</span>\n    <span class="token keyword">requires</span> <span class="token keyword">module</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>   <span class="token comment">//导入项目A的模块，此模块暴露了com.test包</span>\n    <span class="token keyword">provides</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span><span class="token class-name">Test</span> <span class="token keyword">with</span> <span class="token namespace">com<span class="token punctuation">.</span>main<span class="token punctuation">.</span></span><span class="token class-name">TestImpl</span><span class="token punctuation">;</span>  <span class="token comment">//声明此模块提供了Test的实现类</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用"><span>简单使用</span></a></h5><p>了解了以上的相关知识后，我们就可以简单地进行模块的使用了。比如现在我们创建了一个新的Maven项目</p><p>然后我们导入了lombok框架的依赖，如果我们不创建<code>module-info.java</code>文件，那么就是一个未命名模块，未命名模块默认可以使用其他所有模块提供的类，实际上就是我们之前的开发模式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Log</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//使用lombok提供的注解，可以正常运行</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们希望按照全新的模块化开发模式来进行开发，将我们的项目从未命名模块改进为应用程序模块，所以我们先创建好<code>module-info.java</code>文件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还需要去依赖对应的模块：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">requires</span> <span class="token namespace">lombok</span><span class="token punctuation">;</span>   <span class="token comment">//lombok模块</span>\n    <span class="token keyword">requires</span> <span class="token namespace">java<span class="token punctuation">.</span>logging</span><span class="token punctuation">;</span>    <span class="token comment">//JUL日志模块，也需要使用到</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就可以正常使用了。</p>',78)],u={},r=(0,s(3671).A)(u,[["render",function(a,n){return(0,e.uX)(),(0,e.CE)("div",null,d)}]]),k=JSON.parse('{"path":"/code/java%209-17/javainfo2.html","title":"Java9 - 模块机制","lang":"zh-CN","frontmatter":{"title":"Java9 - 模块机制","date":"2025-07-27T00:00:00.000Z","category":["code"],"tag":["java新特性"],"order":-0.7464,"description":"Java9 Java 9的主要特性有，全新的模块机制、接口的private方法等。 模块机制 简介 当我们导入一个jar包作为依赖时（包括JDK官方库），实际上很多功能我们并不会用到，但是由于它们是属于同一个依赖捆绑在一起，这样就会导致我们可能只用到一部分内容，但是需要引用一个完整的类库 实际上我们可以把用不到的类库排除掉，大大降低依赖库的规模。 于是...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java%209-17/javainfo2.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Java9 - 模块机制"}],["meta",{"property":"og:description","content":"Java9 Java 9的主要特性有，全新的模块机制、接口的private方法等。 模块机制 简介 当我们导入一个jar包作为依赖时（包括JDK官方库），实际上很多功能我们并不会用到，但是由于它们是属于同一个依赖捆绑在一起，这样就会导致我们可能只用到一部分内容，但是需要引用一个完整的类库 实际上我们可以把用不到的类库排除掉，大大降低依赖库的规模。 于是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-28T12:08:06.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"java新特性"}],["meta",{"property":"article:published_time","content":"2025-07-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-28T12:08:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java9 - 模块机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-28T12:08:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"Java9","slug":"java9","link":"#java9","children":[{"level":3,"title":"模块机制","slug":"模块机制","link":"#模块机制","children":[{"level":4,"title":"简介","slug":"简介","link":"#简介","children":[{"level":5,"title":"实现包的分离管理","slug":"实现包的分离管理","link":"#实现包的分离管理","children":[]},{"level":5,"title":"提高安全性","slug":"提高安全性","link":"#提高安全性","children":[]}]},{"level":4,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":4,"title":"例子","slug":"例子","link":"#例子","children":[{"level":5,"title":"依赖传递 transitive","slug":"依赖传递-transitive","link":"#依赖传递-transitive","children":[]},{"level":5,"title":"开启反射 open","slug":"开启反射-open","link":"#开启反射-open","children":[]},{"level":5,"title":"指定实现 uses + provides","slug":"指定实现-uses-provides","link":"#指定实现-uses-provides","children":[]},{"level":5,"title":"简单使用","slug":"简单使用","link":"#简单使用","children":[]}]}]}]}],"git":{"createdTime":1753704486000,"updatedTime":1753704486000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":7.61,"words":2282},"filePathRelative":"code/java 9-17/javainfo2.md","localizedDate":"2025年7月27日","excerpt":"<h2>Java9</h2>\\n<p>Java 9的主要特性有，全新的模块机制、接口的private方法等。</p>\\n<h3>模块机制</h3>\\n<h4>简介</h4>\\n<p>当我们导入一个<code>jar</code>包作为依赖时（包括JDK官方库），实际上很多功能我们并不会用到，但是由于它们是属于同一个依赖捆绑在一起，这样就会导致我们可能只用到一部分内容，但是需要引用一个完整的类库</p>\\n<p>实际上我们可以把用不到的类库排除掉，大大降低依赖库的规模。</p>\\n<p>于是，Java 9引入了<strong>模块机制</strong>来对这种情况进行优化，在之前的我们的项目是这样的：</p>","autoDesc":true}')},6082:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>q,data:()=>J});var e=s(7847);const t=(0,e.Lk)("h2",{id:"网络基础2",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#网络基础2"},[(0,e.Lk)("span",null,"网络基础2")])],-1),o=(0,e.Lk)("h3",{id:"tomact-安装",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#tomact-安装"},[(0,e.Lk)("span",null,"Tomact 安装")])],-1),p=(0,e.Lk)("p",null,"Tomcat（汤姆猫）就是一个典型的Web应用服务器软件，通过运行Tomcat服务器，我们就可以快速部署我们的Web项目，并交由Tomcat进行管理，我们只需要直接通过浏览器访问我们的项目即可。",-1),l={href:"https://tomcat.apache.org/download-10.cgi",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Fv)('<ul><li>下载：64-bit Windows zip</li></ul><p>下载完成后，解压，并放入桌面，接下来需要配置一下环境变量，打开<code>高级系统设置</code>，打开<code>环境变量</code>，添加一个新的系统变量，变量名称为<code>JRE_HOME</code>，填写JDK的安装目录+/jre，比如Zulujdk默认就是：C:\\Program Files\\Zulu\\zulu-8\\jre</p><p>设置完成后，我们进入tomcat文件夹bin目录下，并在当前位置打开CMD窗口，将startup.sh拖入窗口按回车运行，如果环境变量配置有误，会提示，若没问题，服务器则正常启动。</p><p>如果出现乱码，说明编码格式配置有问题，我们修改一下服务器的配置文件，打开<code>conf</code>文件夹，找到<code>logging.properties</code>文件，这就是日志的配置文件（我们在前面已经给大家讲解过了）将ConsoleHandler的默认编码格式修改为GBK编码格式：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">java.util.logging.ConsoleHandler.encoding</span> <span class="token punctuation">=</span> <span class="token value attr-value">GBK</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在重新启动服务器，就可以正常显示中文了。</p>',6),i={href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Lk)("p",null,"Tomcat服务器默认是使用8080端口（可以在配置文件中修改），访问成功说明我们的Tomcat环境已经部署成功了。",-1),u=(0,e.Lk)("p",null,"整个Tomcat目录下，我们已经认识了bin目录（所有可执行文件，包括启动和关闭服务器的脚本）以及conf目录（服务器配置文件目录），那么我们接着来看其他的文件夹：",-1),r=(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,"lib目录：Tomcat服务端运行的一些依赖，不用关心。"),(0,e.Lk)("li",null,"logs目录：所有的日志信息都在这里。"),(0,e.Lk)("li",null,"temp目录：存放运行时产生的一些临时文件，不用关心。"),(0,e.Lk)("li",null,"work目录：工作目录，Tomcat会将jsp文件转换为java文件（我们后面会讲到，这里暂时不提及）"),(0,e.Lk)("li",null,"webapp目录：所有的Web项目都在这里，每个文件夹都是一个Web应用程序：")],-1),k=(0,e.Lk)("p",null,"我们发现，官方已经给我们预设了一些项目了，访问后默认使用的项目为ROOT项目，也就是我们默认打开的网站。",-1),m={href:"http://localhost:8080/examples/",target:"_blank",rel:"noopener noreferrer"},v={href:"http://localhost:8080/docs/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://localhost:8080/manager",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Lk)("p",null,"提示需要用户名和密码，由于不知道是什么，我们先点击取消，页面中出现如下内容：",-1),h=(0,e.Fv)('<p>You are not authorized to view this page. If you have not changed any configuration files, please examine the file <code>conf/tomcat-users.xml</code> in your installation. That file must contain the credentials to let you use this webapp.</p><p>For example, to add the <code>manager-gui</code> role to a user named <code>tomcat</code> with a password of <code>s3cret</code>, add the following to the config file listed above.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;role rolename=&quot;manager-gui&quot;/&gt;\n&lt;user username=&quot;tomcat&quot; password=&quot;s3cret&quot; roles=&quot;manager-gui&quot;/&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that for Tomcat 7 onwards, the roles required to use the manager application were changed from the single <code>manager</code> role to the following four roles. You will need to assign the role(s) required for the functionality you wish to access.</p><ul><li><code>manager-gui</code> - allows access to the HTML GUI and the status pages</li><li><code>manager-script</code> - allows access to the text interface and the status pages</li><li><code>manager-jmx</code> - allows access to the JMX proxy and the status pages</li><li><code>manager-status</code> - allows access to the status pages only</li></ul><p>The HTML interface is protected against CSRF but the text and JMX interfaces are not. To maintain the CSRF protection:</p><ul><li>Users with the <code>manager-gui</code> role should not be granted either the <code>manager-script</code> or <code>manager-jmx</code> roles.</li><li>If the text or jmx interfaces are accessed through a browser (e.g. for testing since these interfaces are intended for tools not humans) then the browser must be closed afterwards to terminate the session.</li></ul>',7),y={href:"http://localhost:8080/docs/manager-howto.html",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Fv)('<p>现在我们按照上面的提示，去配置文件中进行修改：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager-gui<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>admin<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>admin<span class="token punctuation">&quot;</span></span> <span class="token attr-name">roles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager-gui<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在再次打开管理页面，已经可以成功使用此用户进行登陆了。登录后，展示给我们的是一个图形化界面，我们可以快速预览当前服务器的一些信息，包括已经在运行的Web应用程序，甚至还可以查看当前的Web应用程序有没有出现内存泄露。</p><p>同样的，还有一个虚拟主机管理页面，用于一台主机搭建多个Web站点，一般情况下使用不到，这里就不做演示了。</p><p>我们可以将我们自己的项目也放到webapp文件夹中，这样就可以直接访问到了，我们在webapp目录下新建test文件夹，将我们之前编写的前端代码全部放入其中（包括html文件、js、css、icon等），重启服务器。</p>',5),j={href:"http://localhost:8080/test/",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Lk)("h3",{id:"idea-maven-构建-web-项目",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#idea-maven-构建-web-项目"},[(0,e.Lk)("span",null,"IDEA MAVEN 构建 web 项目")])],-1),x=(0,e.Lk)("p",null,"新建项目，选择 Java Enterprise 项目名称随便，项目模板选择Web应用程序，然后我们需要配置Web应用程序服务器，将我们的Tomcat服务器集成到IDEA中。配置很简单，首先点击新建，然后设置Tomcat主目录即可，配置完成后，点击下一步即可，依赖项使用默认即可，然后点击完成，之后IDEA会自动帮助我们创建Maven项目。",-1),T={},q=(0,s(3671).A)(T,[["render",function(a,n){const s=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[t,o,p,(0,e.Lk)("p",null,[(0,e.eW)("那么首先，我们需要进行一个简单的环境搭建，我们需要在Tomcat官网下载最新的Tomcat服务端程序："),(0,e.Lk)("a",l,[(0,e.eW)("https://tomcat.apache.org/download-10.cgi"),(0,e.bF)(s)])]),c,(0,e.Lk)("p",null,[(0,e.eW)("服务器启动成功之后，不要关闭，我们打开浏览器，在浏览器中访问："),(0,e.Lk)("a",i,[(0,e.eW)("http://localhost:8080/"),(0,e.bF)(s)])]),d,u,r,k,(0,e.Lk)("p",null,[(0,e.eW)("我们也可以访问example项目，只需要在后面填写路径即可："),(0,e.Lk)("a",m,[(0,e.eW)("http://localhost:8080/examples/"),(0,e.bF)(s)])]),(0,e.Lk)("p",null,[(0,e.eW)("或是docs项目（这个是Tomcat的一些文档）"),(0,e.Lk)("a",v,[(0,e.eW)("http://localhost:8080/docs/"),(0,e.bF)(s)])]),(0,e.Lk)("p",null,[(0,e.eW)("Tomcat还自带管理页面，我们打开："),(0,e.Lk)("a",g,[(0,e.eW)("http://localhost:8080/manager"),(0,e.bF)(s)])]),b,(0,e.Lk)("blockquote",null,[h,(0,e.Lk)("p",null,[(0,e.eW)("For more information - please see the "),(0,e.Lk)("a",y,[(0,e.eW)("Manager App How-To"),(0,e.bF)(s)]),(0,e.eW)(".")])]),w,(0,e.Lk)("p",null,[(0,e.eW)("我们可以直接通过 "),(0,e.Lk)("a",j,[(0,e.eW)("http://localhost:8080/test/"),(0,e.bF)(s)]),(0,e.eW)(" 来进行访问。")]),f,x])}]]),J=JSON.parse('{"path":"/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo2.html","title":"Content - Tomact","lang":"zh-CN","frontmatter":{"title":"Content - Tomact","date":"2025-07-20T00:00:00.000Z","category":["code"],"tag":["javaweb"],"order":-0.7465,"description":"网络基础2 Tomact 安装 Tomcat（汤姆猫）就是一个典型的Web应用服务器软件，通过运行Tomcat服务器，我们就可以快速部署我们的Web项目，并交由Tomcat进行管理，我们只需要直接通过浏览器访问我们的项目即可。 那么首先，我们需要进行一个简单的环境搭建，我们需要在Tomcat官网下载最新的Tomcat服务端程序：https://tomc...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo2.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Content - Tomact"}],["meta",{"property":"og:description","content":"网络基础2 Tomact 安装 Tomcat（汤姆猫）就是一个典型的Web应用服务器软件，通过运行Tomcat服务器，我们就可以快速部署我们的Web项目，并交由Tomcat进行管理，我们只需要直接通过浏览器访问我们的项目即可。 那么首先，我们需要进行一个简单的环境搭建，我们需要在Tomcat官网下载最新的Tomcat服务端程序：https://tomc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-24T12:57:42.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:published_time","content":"2025-07-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-24T12:57:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Content - Tomact\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-24T12:57:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"网络基础2","slug":"网络基础2","link":"#网络基础2","children":[{"level":3,"title":"Tomact 安装","slug":"tomact-安装","link":"#tomact-安装","children":[]},{"level":3,"title":"IDEA MAVEN 构建 web 项目","slug":"idea-maven-构建-web-项目","link":"#idea-maven-构建-web-项目","children":[]}]}],"git":{"createdTime":1753033405000,"updatedTime":1753361862000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":2}]},"readingTime":{"minutes":4.74,"words":1421},"filePathRelative":"code/javaweb/8-网络内容/javainfo2.md","localizedDate":"2025年7月20日","excerpt":"<h2>网络基础2</h2>\\n<h3>Tomact 安装</h3>\\n<p>Tomcat（汤姆猫）就是一个典型的Web应用服务器软件，通过运行Tomcat服务器，我们就可以快速部署我们的Web项目，并交由Tomcat进行管理，我们只需要直接通过浏览器访问我们的项目即可。</p>\\n<p>那么首先，我们需要进行一个简单的环境搭建，我们需要在Tomcat官网下载最新的Tomcat服务端程序：<a href=\\"https://tomcat.apache.org/download-10.cgi\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://tomcat.apache.org/download-10.cgi</a></p>","autoDesc":true}')}}]);