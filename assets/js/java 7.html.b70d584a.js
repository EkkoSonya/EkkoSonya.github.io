"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[3645],{83671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},10968:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var t=a(7847);const e=[(0,t.Fv)('<h2 id="面向对象高级篇-4" tabindex="-1"><a class="header-anchor" href="#面向对象高级篇-4"><span>面向对象高级篇 4</span></a></h2><h3 id="异常机制" tabindex="-1"><a class="header-anchor" href="#异常机制"><span>异常机制</span></a></h3><h4 id="异常类型" tabindex="-1"><a class="header-anchor" href="#异常类型"><span>异常类型</span></a></h4><p>我们在之前其实已经接触过一些异常了，比如数组越界异常，空指针异常，算术异常等.<br> 他们其实都是异常类型，我们的每一个异常也是一个类，他们都继承自 <strong>Exception</strong> 类</p><ul><li><p><strong>运行时异常</strong> 继承自 <strong>RuntimeException</strong> 在编译阶段无法感知代码是否会出现问题，只有在运行的时候才知道会不会出错（正常情况下是不会出错的），这样的异常称为运行时异常。<br> 所有的运行时异常都继承自 <strong>RuntimeException</strong><strong>RuntimeException</strong> 是继承 <strong>Exception</strong></p></li><li><p><strong>编译时异常</strong> 继承 <strong>Exception</strong> 编译时异常明确指出可能会出现的异常，在编译阶段就需要进行处理（捕获异常）必须要考虑到出现异常的情况，如果不进行处理，将<strong>无法通过编译</strong>！<br> 默认继承自 <strong>Exception</strong> 类的异常都是编译时异常。<br> 比如Object类中定义的clone方法，就明确指出了在运行的时候会出现的异常。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="http://myimg.ekkosonya.cn/20241029001425.png" alt="20241029001425" tabindex="0" loading="lazy"><figcaption>20241029001425</figcaption></figure></li><li><p><strong>错误 Error</strong><strong>错误比异常更严重</strong>，异常就是不同寻常，但不一定会导致致命的问题，而错误是致命问题，一般出现错误可能JVM就无法继续正常运行了。<br> 比如 OutOfMemoryError 就是内存溢出错误（内存占用已经超出限制，无法继续申请内存了）</p></li></ul><h4 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常"><span>自定义异常</span></a></h4><p>异常其实就两大类，一个是编译时异常 <code>Exception</code>，一个是运行时异常 <code>RuntimeException</code>。<br> 我们自定义异常也是从这两类中进行选择。</p><ul><li><p>自定义编译时异常 编译时异常只需要继承 <strong>Exception</strong> 就行了，编译时异常的子类有很多很多，仅仅是SE中就有700多个。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">TestException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//这里我们选择使用父类的带参构造，这个参数就是异常的原因</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自定义运行时异常 运行时异常只需要继承 <code>RuntimeException</code> 就行了</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token class-name">TestException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="抛出异常-throw" tabindex="-1"><a class="header-anchor" href="#抛出异常-throw"><span>抛出异常 <code>throw</code></span></a></h4><p>当别人调用我们的方法时，如果传入了错误的参数导致程序无法正常运行，这时我们就可以手动抛出一个异常来终止程序继续运行下去，同时告知上一级方法执行出现了问题：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">&quot;被除数不能为0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//throw new RuntimeException(&quot;被除数不能为0&quot;);</span>\n      <span class="token comment">//使用throw关键字来抛出异常</span>\n  <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常的抛出同样需要创建一个异常对象出来，我们抛出异常实际上就是将这个异常对象抛出，异常对象携带了我们抛出异常时的一些信息，比如是因为什么原因导致的异常，在 RuntimeException 的构造方法中我们可以写入原因。</p><ul><li><p>注意，如果我们在方法中<strong>抛出了一个非运行时异常</strong>，那么必须告知函数的调用方我们会抛出某个异常，函数调用方必须要对抛出的这个异常进行对应的处理才可以，<strong>因为不这样就无法编译了</strong>： <code>throws Exception</code></p><p>就是说如果这个函数结束时有异常，要么自己处理好，要么就往上一级函数上 <code>throw</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    \n  <span class="token comment">//使用throws关键字告知调用方此方法会抛出哪些异常，请调用方处理好</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;我是编译时异常！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果不同的分支条件会出现不同的异常，那么所有在方法中可能会抛出的异常都需要注明：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>  <span class="token comment">//多个异常使用逗号隔开</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> \n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最后再提一下，我们在重写方法时，如果父类中的方法表明了会抛出某个异常，只要重写的内容中不会抛出对应的异常我们可以直接省去：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="异常的处理-try-catch-finally" tabindex="-1"><a class="header-anchor" href="#异常的处理-try-catch-finally"><span>异常的处理 <code>try...catch</code> <code>finally</code></span></a></h4><p>当程序没有按照我们理想的样子运行而出现异常时（<strong>默认会交给 JVM 来处理</strong>，JVM发现任何异常都会立即终止程序运行，并在控制台打印栈追踪信息）<br> 现在我们希望能够自己处理出现的问题，让程序继续运行下去，就需要对异常进行<strong>捕获</strong></p><p>异常处理：要么一直 <code>throw</code> 交给上一级函数 最终到 <code>main</code> 给 <code>jvm</code> 处理; 要么在当前函数通过 <code>try-catch</code> 进行捕获。</p><p>无论是否出现异常，都会在最后执行任务，可以交给 <strong>finally</strong> 语句块来处理，可以只跟 <code>try</code> 使用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// try...catch 进行异常捕获</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//打印栈追踪信息</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;异常错误信息：&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取异常的错误信息</span>\n  <span class="token punctuation">}</span>\n  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序继续正常运行！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果某个方法明确指出会抛出哪些异常，除非抛出的异常是一个运行时异常，否则我们必须要使用 <code>try-catch</code> 语句块进行异常的捕获，不然就无法通过编译.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//必须要进行异常的捕获，否则报错</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token comment">//明确会抛出IOException</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当然，如果我们确实不想在当前这个方法中进行处理，那么我们可以继续踢皮球，抛给上一级：<br> 注意，如果已经是主方法了，那么就相当于到顶层了，此时发生异常再往上抛出的话，就会直接交给JVM进行处理，默认会让整个程序终止并打印栈追踪信息。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token comment">//继续编写throws往上一级抛</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意，如果我们要捕获的异常，是某个异常的父类，那么当发生这个异常时，同样可以捕获到</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">//这里发生的是数组越界异常，它是运行时异常的子类</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//使用运行时异常同样可以捕获到</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;捕获到异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当代码可能出现多种类型的异常时，我们希望能够分不同情况处理不同类型的异常，就可以使用多重异常捕获：<br> 但是要注意一下顺序 <code>try {} catch { xxxException | xxxException e }{ }</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token comment">//....</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//父类型在前，会将子类的也捕获</span>\n\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//永远都不会被捕获</span>\n\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//永远都不会被捕获</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 可以简写为 </span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token comment">//....</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> <span class="token operator">|</span> <span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//用|隔开每种类型即可</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="断言表达式-assert" tabindex="-1"><a class="header-anchor" href="#断言表达式-assert"><span>断言表达式 <code>assert</code></span></a></h4><p>我们可以使用断言表达式来对某些东西进行判断，如果判断失败会抛出错误，只不过默认情况下没有开启断言，我们需要在虚拟机参数中手动开启一下。</p><p><code>assert</code>断言表达式，如果 <code>assert</code> 后面的表达式判断结果为 <strong>false</strong>，将抛出 <strong>AssertionError</strong> 错误。</p><p>比如我们可以判断变量的值，如果大于10就抛出错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">assert</span> a <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',24)],p={},o=(0,a(83671).A)(p,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),c=JSON.parse('{"path":"/code/java/java%207.html","title":"Java - 异常","lang":"zh-CN","frontmatter":{"title":"Java - 异常","date":"2024-10-28T00:00:00.000Z","category":["code"],"tag":["java"],"order":-0.94,"description":"面向对象高级篇 4 异常机制 异常类型 我们在之前其实已经接触过一些异常了，比如数组越界异常，空指针异常，算术异常等. 他们其实都是异常类型，我们的每一个异常也是一个类，他们都继承自 Exception 类 运行时异常 继承自 RuntimeException 在编译阶段无法感知代码是否会出现问题，只有在运行的时候才知道会不会出错（正常情况下是不会出错...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java/java%207.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Java - 异常"}],["meta",{"property":"og:description","content":"面向对象高级篇 4 异常机制 异常类型 我们在之前其实已经接触过一些异常了，比如数组越界异常，空指针异常，算术异常等. 他们其实都是异常类型，我们的每一个异常也是一个类，他们都继承自 Exception 类 运行时异常 继承自 RuntimeException 在编译阶段无法感知代码是否会出现问题，只有在运行的时候才知道会不会出错（正常情况下是不会出错..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://myimg.ekkosonya.cn/20241029001425.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T02:44:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Java - 异常"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-10-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T02:44:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java - 异常\\",\\"image\\":[\\"http://myimg.ekkosonya.cn/20241029001425.png\\"],\\"datePublished\\":\\"2024-10-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T02:44:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"面向对象高级篇 4","slug":"面向对象高级篇-4","link":"#面向对象高级篇-4","children":[{"level":3,"title":"异常机制","slug":"异常机制","link":"#异常机制","children":[{"level":4,"title":"异常类型","slug":"异常类型","link":"#异常类型","children":[]},{"level":4,"title":"自定义异常","slug":"自定义异常","link":"#自定义异常","children":[]},{"level":4,"title":"抛出异常  throw","slug":"抛出异常-throw","link":"#抛出异常-throw","children":[]},{"level":4,"title":"异常的处理  try...catch finally","slug":"异常的处理-try-catch-finally","link":"#异常的处理-try-catch-finally","children":[]},{"level":4,"title":"断言表达式 assert","slug":"断言表达式-assert","link":"#断言表达式-assert","children":[]}]}]}],"git":{"createdTime":1729969508000,"updatedTime":1730861075000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":4}]},"readingTime":{"minutes":6.35,"words":1906},"filePathRelative":"code/java/java 7.md","localizedDate":"2024年10月28日","excerpt":"<h2>面向对象高级篇 4</h2>\\n<h3>异常机制</h3>\\n<h4>异常类型</h4>\\n<p>我们在之前其实已经接触过一些异常了，比如数组越界异常，空指针异常，算术异常等.<br>\\n他们其实都是异常类型，我们的每一个异常也是一个类，他们都继承自 <strong>Exception</strong> 类</p>\\n<ul>\\n<li>\\n<p><strong>运行时异常</strong>  继承自 <strong>RuntimeException</strong>\\n在编译阶段无法感知代码是否会出现问题，只有在运行的时候才知道会不会出错（正常情况下是不会出错的），这样的异常称为运行时异常。<br>\\n所有的运行时异常都继承自 <strong>RuntimeException</strong>\\n<strong>RuntimeException</strong> 是继承 <strong>Exception</strong></p>\\n</li>\\n<li>\\n<p><strong>编译时异常</strong>  继承 <strong>Exception</strong>\\n编译时异常明确指出可能会出现的异常，在编译阶段就需要进行处理（捕获异常）必须要考虑到出现异常的情况，如果不进行处理，将<strong>无法通过编译</strong>！<br>\\n默认继承自 <strong>Exception</strong> 类的异常都是编译时异常。<br>\\n比如Object类中定义的clone方法，就明确指出了在运行的时候会出现的异常。</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">native</span> <span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">clone</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">CloneNotSupportedException</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div><figure><img src=\\"http://myimg.ekkosonya.cn/20241029001425.png\\" alt=\\"20241029001425\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>20241029001425</figcaption></figure>\\n</li>\\n<li>\\n<p><strong>错误 Error</strong>\\n<strong>错误比异常更严重</strong>，异常就是不同寻常，但不一定会导致致命的问题，而错误是致命问题，一般出现错误可能JVM就无法继续正常运行了。<br>\\n比如 OutOfMemoryError 就是内存溢出错误（内存占用已经超出限制，无法继续申请内存了）</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);