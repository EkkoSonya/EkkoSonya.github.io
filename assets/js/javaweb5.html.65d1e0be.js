"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[8577],{3671:(s,a)=>{a.A=(s,a)=>{const n=s.__vccOpts||s;for(const[s,e]of a)n[s]=e;return n}},9491:(s,a,n)=>{n.r(a),n.d(a,{comp:()=>d,data:()=>c});var e=n(7847);const t=n.p+"assets/img/4.cedbdedd.png",l=n.p+"assets/img/5.30661ae5.png",o=[(0,e.Fv)('<h2 id="数据库-3" tabindex="-1"><a class="header-anchor" href="#数据库-3"><span>数据库 3</span></a></h2><h2 id="数据库查询语言-dql" tabindex="-1"><a class="header-anchor" href="#数据库查询语言-dql"><span>数据库查询语言 (DQL)</span></a></h2><h3 id="单表查询-selecet" tabindex="-1"><a class="header-anchor" href="#单表查询-selecet"><span>单表查询 <code>SELECET</code></span></a></h3><p>单表查询是最简单的一种查询，我们只需要在一张表中去查找数据即可，通过使用<code>select</code>语句来进行单表查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 指定查询某一列数据</span>\n<span class="token keyword">SELECT</span> 列名<span class="token punctuation">[</span><span class="token punctuation">,</span>列名<span class="token punctuation">]</span> <span class="token keyword">FROM</span> 表名\n<span class="token comment">-- 会以别名显示此列</span>\n<span class="token keyword">SELECT</span> 列名 别名 <span class="token keyword">FROM</span> 表名\n<span class="token comment">-- 查询所有的列数据</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名\n<span class="token comment">-- 只查询不重复的值</span>\n<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 列名 <span class="token keyword">FROM</span> 表名\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以添加<code>where</code>字句来限定查询目标：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="常用where查询条件" tabindex="-1"><a class="header-anchor" href="#常用where查询条件"><span>常用<code>where</code>查询条件</span></a></h4><ul><li><p>一般的比较运算符，包括=、&gt;、&lt;、&gt;=、&lt;=、!=等。</p></li><li><p>是否在集合中：in、not in</p></li><li><p>字符模糊匹配：like，not like <code>%</code> 表示任意内容 比如 <code>03%</code> 表示03开头</p></li><li><p>多重条件连接查询：and、or、not</p></li></ul><h4 id="排序查询-order-by" tabindex="-1"><a class="header-anchor" href="#排序查询-order-by"><span>排序查询 <code>order by</code></span></a></h4><p>我们可以通过<code>order by</code>来将查询结果进行排序：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 列名 <span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用ASC表示升序排序，使用DESC表示降序排序，默认为升序。</p><p>我们也可以可以同时添加<strong>多个排序</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 列名<span class="token number">1</span> <span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">,</span> 列名<span class="token number">2</span> <span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样会先按照列名1进行排序，每组列名1相同的数据再按照列名2排序。</p><h4 id="聚集函数" tabindex="-1"><a class="header-anchor" href="#聚集函数"><span>聚集函数</span></a></h4><p>聚集函数一般用作统计，包括：</p><ul><li><code>count([distinct]*)</code>统计所有的行数（distinct表示<strong>去重再统计</strong>，下同）</li><li><code>count([distinct]列名)</code>统计某列的值总和</li><li><code>sum([distinct]列名)</code>求一列的和（注意必须是数字类型的）</li><li><code>avg([distinct]列名)</code>求一列的平均值（注意必须是数字类型）</li><li><code>max([distinct]列名)</code>求一列的最大值</li><li><code>min([distinct]列名)</code>求一列的最小值</li></ul><p>一般聚集函数是这样使用的：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> 列名<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="分组和分页查询" tabindex="-1"><a class="header-anchor" href="#分组和分页查询"><span>分组和分页查询</span></a></h4><p>通过使用<code>group by</code>来对查询结果进行分组，它需要结合聚合函数一起使用：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 列名\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们还可以添加<code>having</code>来限制分组条件：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 列名 <span class="token keyword">HAVING</span> 约束条件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以通过<code>limit</code>来限制查询的数量，只取前n个结果：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> 数量\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们也可以进行分页：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> 起始位置<span class="token punctuation">,</span>数量\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="多表查询" tabindex="-1"><a class="header-anchor" href="#多表查询"><span>多表查询</span></a></h3><p>多表查询是同时查询的两个或两个以上的表，多表查询会通过连接转换为单表查询。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表<span class="token number">1</span><span class="token punctuation">,</span> 表<span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接这样查询会得到两张表的<strong>笛卡尔积</strong>，也就是<strong>每一项数据和另一张表的每一项数据都结合一次</strong>，会产生庞大的数据。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表<span class="token number">1</span><span class="token punctuation">,</span> 表<span class="token number">2</span> <span class="token keyword">WHERE</span> 条件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，只会从笛卡尔积的结果中得到满足条件的数据。</p><p><strong>注意：</strong> 如果两个表中都带有此属性，需要添加表名前缀来指明是哪一个表的数据。比如 <code>select * from a1, a2 where a1.xxx;</code></p><h4 id="自身连接查询" tabindex="-1"><a class="header-anchor" href="#自身连接查询"><span>自身连接查询</span></a></h4><p>自身连接，就是将表本身和表进行笛卡尔积计算，得到结果，但是由于表名相同，因此要先起一个别名：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 别名<span class="token number">1</span><span class="token punctuation">,</span> 表名 别名<span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其实自身连接查询和前面的是一样的，只是连接对象变成自己和自己了。</p><h4 id="外连接查询" tabindex="-1"><a class="header-anchor" href="#外连接查询"><span>外连接查询</span></a></h4><p>可以叠着使用</p><p>外连接就是<strong>专门用于联合查询情景</strong>的，比如现在有一个存储所有用户的表，还有一张用户详细信息的表，我希望将这两张表结合到一起来查看完整的数据，我们就可以通过使用外连接来进行查询，外连接有三种方式：</p><ul><li><p>通过使用<code>inner join xxx on</code>进行内连接 只会<strong>返回两个表满足条件的交集部分</strong>： <code>select * from student inner join teach on student.sid = teach.sid;</code><img src="'+t+'" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>通过使用<code>left join xxx on</code>进行左连接 不仅会<strong>返回两个表满足条件的交集部分</strong>，也会返回<strong>左边表中的全部数据</strong>，而在右表中缺失的数据会使用<code>null</code>来代替（右连接<code>right join</code>同理，只是反过来而已，这里就不再介绍了）： <code>select * from student left join teach on student.sid = teach.sid;</code><img src="'+l+'" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>右连接类似 <code>right join xxx on</code></p></li></ul><h4 id="嵌套查询" tabindex="-1"><a class="header-anchor" href="#嵌套查询"><span>嵌套查询</span></a></h4><p>我们可以将查询的结果作为另一个查询的条件，比如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 列名 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们来再次尝试编写一下在最开始我们查找某教师所有学生的SQL语句。</p><hr><h2 id="数据库控制语言-dcl" tabindex="-1"><a class="header-anchor" href="#数据库控制语言-dcl"><span>数据库控制语言（DCL）</span></a></h2><p>庞大的数据库不可能由一个人来管理，我们需要更多的用户来一起管理整个数据库。</p><h3 id="创建用户" tabindex="-1"><a class="header-anchor" href="#创建用户"><span>创建用户</span></a></h3><p>我们可以通过<code>create user</code>来创建用户：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> 用户名 identified <span class="token keyword">by</span> 密码<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以不带密码：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> 用户名<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以通过@来限制用户登录的登录IP地址，<code>%</code>表示匹配所有的IP地址，默认使用的就是任意IP地址。</p><h3 id="登陆用户" tabindex="-1"><a class="header-anchor" href="#登陆用户"><span>登陆用户</span></a></h3><p>首先需要添加一个环境变量，然后我们通过cmd去登陆mysql：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>login <span class="token operator">-</span>u 用户名 <span class="token operator">-</span>p\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入密码后即可登陆此用户，我们输入以下命令来看看能否访问所有数据库：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们发现，虽然此用户能够成功登录，但是并不能查看完整的数据库列表，这是因为此用户还没有权限！</p><h3 id="用户授权" tabindex="-1"><a class="header-anchor" href="#用户授权"><span>用户授权</span></a></h3><p>我们可以通过使用<code>grant</code>来为一个数据库用户进行授权：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">grant</span> <span class="token keyword">all</span><span class="token operator">|</span>权限<span class="token number">1</span><span class="token punctuation">,</span>权限<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>列<span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">on</span> 数据库<span class="token punctuation">.</span>表 <span class="token keyword">to</span> 用户 <span class="token punctuation">[</span><span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中all代表授予所有权限，当数据库和表为<code>*</code>，代表为所有的数据库和表都授权。如果在最后添加了<code>with grant option</code>，那么被授权的用户还能将已获得的授权继续授权给其他用户。</p><p>我们可以使用<code>revoke</code>来收回一个权限：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">revoke</span> <span class="token keyword">all</span><span class="token operator">|</span>权限<span class="token number">1</span><span class="token punctuation">,</span>权限<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>列<span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">on</span> 数据库<span class="token punctuation">.</span>表 <span class="token keyword">from</span> 用户\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>test</p>',72)],p={},d=(0,n(3671).A)(p,[["render",function(s,a){return(0,e.uX)(),(0,e.CE)("div",null,o)}]]),c=JSON.parse('{"path":"/code/javaweb/javaweb5.html","title":"数据库2","lang":"zh-CN","frontmatter":{"title":"数据库2","date":"2024-03-23T00:00:00.000Z","category":["code"],"tag":["javaweb","mysql"],"order":-0.7496,"description":"数据库 3 数据库查询语言 (DQL) 单表查询 SELECET 单表查询是最简单的一种查询，我们只需要在一张表中去查找数据即可，通过使用select语句来进行单表查询： 我们也可以添加where字句来限定查询目标： 常用where查询条件 一般的比较运算符，包括=、>、<、>=、<=、!=等。 是否在集合中：in、not in 字符模糊匹配：like...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/javaweb5.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"数据库2"}],["meta",{"property":"og:description","content":"数据库 3 数据库查询语言 (DQL) 单表查询 SELECET 单表查询是最简单的一种查询，我们只需要在一张表中去查找数据即可，通过使用select语句来进行单表查询： 我们也可以添加where字句来限定查询目标： 常用where查询条件 一般的比较运算符，包括=、>、<、>=、<=、!=等。 是否在集合中：in、not in 字符模糊匹配：like..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-11T04:13:39.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:published_time","content":"2024-03-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-11T04:13:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-11T04:13:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"数据库 3","slug":"数据库-3","link":"#数据库-3","children":[]},{"level":2,"title":"数据库查询语言 (DQL)","slug":"数据库查询语言-dql","link":"#数据库查询语言-dql","children":[{"level":3,"title":"单表查询 SELECET","slug":"单表查询-selecet","link":"#单表查询-selecet","children":[]},{"level":3,"title":"多表查询","slug":"多表查询","link":"#多表查询","children":[]}]},{"level":2,"title":"数据库控制语言（DCL）","slug":"数据库控制语言-dcl","link":"#数据库控制语言-dcl","children":[{"level":3,"title":"创建用户","slug":"创建用户","link":"#创建用户","children":[]},{"level":3,"title":"登陆用户","slug":"登陆用户","link":"#登陆用户","children":[]},{"level":3,"title":"用户授权","slug":"用户授权","link":"#用户授权","children":[]}]}],"git":{"createdTime":1744122222000,"updatedTime":1746936819000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":2}]},"readingTime":{"minutes":5.32,"words":1597},"filePathRelative":"code/javaweb/javaweb5.md","localizedDate":"2024年3月23日","excerpt":"<h2>数据库 3</h2>\\n<h2>数据库查询语言 (DQL)</h2>\\n<h3>单表查询 <code>SELECET</code></h3>\\n<p>单表查询是最简单的一种查询，我们只需要在一张表中去查找数据即可，通过使用<code>select</code>语句来进行单表查询：</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token comment\\">-- 指定查询某一列数据</span>\\n<span class=\\"token keyword\\">SELECT</span> 列名<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">,</span>列名<span class=\\"token punctuation\\">]</span> <span class=\\"token keyword\\">FROM</span> 表名\\n<span class=\\"token comment\\">-- 会以别名显示此列</span>\\n<span class=\\"token keyword\\">SELECT</span> 列名 别名 <span class=\\"token keyword\\">FROM</span> 表名\\n<span class=\\"token comment\\">-- 查询所有的列数据</span>\\n<span class=\\"token keyword\\">SELECT</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">FROM</span> 表名\\n<span class=\\"token comment\\">-- 只查询不重复的值</span>\\n<span class=\\"token keyword\\">SELECT</span> <span class=\\"token keyword\\">DISTINCT</span> 列名 <span class=\\"token keyword\\">FROM</span> 表名\\n</code></pre></div>","autoDesc":true}')}}]);