"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[5605],{3671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},2012:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>o,data:()=>c});var t=s(7847);const e=[(0,t.Fv)('<h2 id="servlet3" tabindex="-1"><a class="header-anchor" href="#servlet3"><span>Servlet3</span></a></h2><h3 id="重定向与请求转发" tabindex="-1"><a class="header-anchor" href="#重定向与请求转发"><span>重定向与请求转发</span></a></h3><h4 id="重定向-302-resp-sendredirect" tabindex="-1"><a class="header-anchor" href="#重定向-302-resp-sendredirect"><span>重定向 302 <code>resp.sendRedirect()</code></span></a></h4><p>当我们希望用户登录完成之后，直接跳转到网站的首页，那么这个时候，我们就可以使用<strong>重定向</strong>来完成。</p><p>当浏览器收到一个重定向的响应时，会按照重定向响应给出的地址，再次向此地址发出请求。</p><p>实现重定向很简单，只需要调用一个方法即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用后，响应的状态码会被设置为<code>302</code>，并且响应头中添加了一个<code>Location</code>属性，此属性表示，需要重定向到哪一个网址。</p><p>现在，如果我们成功登陆，那么服务器会发送给我们一个重定向响应，这时，我们的浏览器会去重新请求另一个网址。这样，我们在登陆成功之后，就可以直接帮助用户跳转到用户首页了。</p><p>除了用写好的 <code>resp.sendRedircet()</code> 来进行重定向操作外，我们可以直接发送 <code>302</code> + 定义 <code>Location</code> 的位置即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nresp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Location&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="请求转发" tabindex="-1"><a class="header-anchor" href="#请求转发"><span>请求转发</span></a></h4><p>请求转发可以携带数据，重定向无法携带数据</p><p>那么我们接着来看请求转发，请求转发其实是一种服务器内部的跳转机制，我们知道，重定向会使得浏览器去重新请求一个页面</p><p>而请求转发则是<strong>服务器内部进行跳转</strong>，它的目的是，直接<strong>将本次请求转发给其他Servlet进行处理，并由其他Servlet来返回结果</strong>，因此它是在进行内部的转发。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，在登陆成功的时候，我们将请求转发给处理时间的Servlet，注意这里的路径规则和之前的不同，我们需要填写<strong>Servlet上指明的路径</strong>，并且请求转发只能转发到此应用程序内部的Servlet，<strong>不能转发给其他站点或是其他Web应用程序。</strong></p><p>现在再次进行登陆操作，我们发现，返回结果为一个405页面，证明了，我们的请求现在是被另一个Servlet进行处理，并且请求的信息全部被转交给另一个Servlet，由于此Servlet不支持POST请求，因此返回405状态码。</p><p>那么也就是说，该请求包括请求参数也一起被传递了，那么我们可以尝试获取以下POST请求的参数。</p><p>现在我们给此Servlet添加POST请求处理，直接转交给Get请求处理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次访问，成功得到结果，但是我们发现，浏览器<strong>只发起了一次请求</strong>，并没有再次请求新的URL，也就是说，这一次请求直接返回了请求转发后的处理结果。</p><p>请求转发可以携带数据！</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;我是请求转发前的数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nreq<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过<code>setAttribute</code>方法来给当前请求添加一个附加数据，在请求转发后，我们可以直接获取到该数据。</p><p>重定向属于2次请求，因此无法使用这种方式来传递数据，那么，如何在重定向之间传递数据呢？</p><p>我们可以使用即将要介绍的<code>ServletContext</code>对象。</p><p>最后总结，两者的区别为：</p><ul><li>请求转发是一次请求，重定向是两次请求</li><li>请求转发地址栏不会发生改变， 重定向地址栏会发生改变</li><li>请求转发可以共享请求参数 ，重定向之后，就获取不了共享参数了</li><li>请求转发只能转发给内部的Servlet</li></ul><h3 id="servletcontext对象-全局存储通信" tabindex="-1"><a class="header-anchor" href="#servletcontext对象-全局存储通信"><span>ServletContext对象 - 全局存储通信</span></a></h3><p><code>ServletContext</code>全局唯一，它是属于<strong>整个Web应用程序</strong>的</p><p>可以通过<code>getServletContext()</code>来获取到此对象。</p><p>此对象也能设置附加值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncontext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;我是重定向之前的数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nresp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为无论在哪里，无论什么时间，获取到的<code>ServletContext</code>始终是同一个对象，因此我们可以随时随地获取我们添加的属性。</p><p>它不仅仅可以用来进行数据传递，还可以做一些其他的事情，比如请求转发：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>context<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它还可以获取<strong>根目录下的资源文件</strong>（注意是webapp根目录下的，不是resource中的资源）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>contest<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="初始化参数-webinitparam" tabindex="-1"><a class="header-anchor" href="#初始化参数-webinitparam"><span>初始化参数 <code>@WebInitParam</code></span></a></h3><p>初始化参数类似于<strong>初始化配置需要的一些值</strong>，比如我们的数据库连接相关信息，就可以通过初始化参数来给予Servlet，或是一些其他的配置项，也可以使用初始化参数来实现。</p><p>我们可以给一个<code>Servlet</code>添加一些初始化参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> initParams <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;我是一个默认的初始化参数&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它也是以键值对形式保存的，我们可以直接通过Servlet的<code>getInitParameter</code>方法获取：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="全局定义初始化参数" tabindex="-1"><a class="header-anchor" href="#全局定义初始化参数"><span>全局定义初始化参数</span></a></h4><p>但是，这里的初始化参数仅仅是针对于此Servlet，我们也可以定义全局初始化参数，只需要在web.xml编写即可：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>lbwnb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>我是全局初始化参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们需要使用<code>ServletContext</code>来读取全局初始化参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;lbwnb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有关<code>ServletContext</code>其他的内容，我们需要完成后面内容的学习，才能理解。</p>',53)],p={},o=(0,s(3671).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),c=JSON.parse('{"path":"/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo5.html","title":"Content - Servlet3","lang":"zh-CN","frontmatter":{"title":"Content - Servlet3","date":"2025-07-22T00:00:00.000Z","category":["code"],"tag":["javaweb"],"order":-0.7462,"description":"Servlet3 重定向与请求转发 重定向 302 resp.sendRedirect() 当我们希望用户登录完成之后，直接跳转到网站的首页，那么这个时候，我们就可以使用重定向来完成。 当浏览器收到一个重定向的响应时，会按照重定向响应给出的地址，再次向此地址发出请求。 实现重定向很简单，只需要调用一个方法即可 调用后，响应的状态码会被设置为302，并且...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/8-%E7%BD%91%E7%BB%9C%E5%86%85%E5%AE%B9/javainfo5.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Content - Servlet3"}],["meta",{"property":"og:description","content":"Servlet3 重定向与请求转发 重定向 302 resp.sendRedirect() 当我们希望用户登录完成之后，直接跳转到网站的首页，那么这个时候，我们就可以使用重定向来完成。 当浏览器收到一个重定向的响应时，会按照重定向响应给出的地址，再次向此地址发出请求。 实现重定向很简单，只需要调用一个方法即可 调用后，响应的状态码会被设置为302，并且..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-24T12:57:42.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:published_time","content":"2025-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-24T12:57:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Content - Servlet3\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-24T12:57:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"Servlet3","slug":"servlet3","link":"#servlet3","children":[{"level":3,"title":"重定向与请求转发","slug":"重定向与请求转发","link":"#重定向与请求转发","children":[{"level":4,"title":"重定向 302 resp.sendRedirect()","slug":"重定向-302-resp-sendredirect","link":"#重定向-302-resp-sendredirect","children":[]},{"level":4,"title":"请求转发","slug":"请求转发","link":"#请求转发","children":[]}]},{"level":3,"title":"ServletContext对象 - 全局存储通信","slug":"servletcontext对象-全局存储通信","link":"#servletcontext对象-全局存储通信","children":[]},{"level":3,"title":"初始化参数 @WebInitParam","slug":"初始化参数-webinitparam","link":"#初始化参数-webinitparam","children":[{"level":4,"title":"全局定义初始化参数","slug":"全局定义初始化参数","link":"#全局定义初始化参数","children":[]}]}]}],"git":{"createdTime":1753361862000,"updatedTime":1753361862000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":4.7,"words":1410},"filePathRelative":"code/javaweb/8-网络内容/javainfo5.md","localizedDate":"2025年7月22日","excerpt":"<h2>Servlet3</h2>\\n<h3>重定向与请求转发</h3>\\n<h4>重定向 302 <code>resp.sendRedirect()</code></h4>\\n<p>当我们希望用户登录完成之后，直接跳转到网站的首页，那么这个时候，我们就可以使用<strong>重定向</strong>来完成。</p>\\n<p>当浏览器收到一个重定向的响应时，会按照重定向响应给出的地址，再次向此地址发出请求。</p>\\n<p>实现重定向很简单，只需要调用一个方法即可</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code>resp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sendRedirect</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"time\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);