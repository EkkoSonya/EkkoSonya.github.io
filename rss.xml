<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="http://ekkosonya.cn/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="http://ekkosonya.cn/rss.xml" rel="self" type="application/rss+xml"/>
    <title>EkkoSonya&amp;apos;s Blog</title>
    <link>http://ekkosonya.cn/</link>
    <description>笔记记录</description>
    <language>zh-CN</language>
    <pubDate>Sun, 06 Jul 2025 14:54:50 GMT</pubDate>
    <lastBuildDate>Sun, 06 Jul 2025 14:54:50 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>code</category>
    <item>
      <title>javaweb - JUL日志1</title>
      <link>http://ekkosonya.cn/code/javaweb/javaweb20.html</link>
      <guid>http://ekkosonya.cn/code/javaweb/javaweb20.html</guid>
      <source url="http://ekkosonya.cn/rss.xml">javaweb - JUL日志1</source>
      <description>JUL日志系统 JDK为我们提供了一个自带的日志框架，位于java.util.logging包下，我们可以使用此框架来实现日志的规范化打印，使用起来非常简单： 我们可以在主类中使用日志打印，得到日志的打印结果： 我们发现，通过日志输出的结果会更加规范，在后续的学习中，日志将时刻伴随我们左右。 JUL基本使用 日志的打印并不是简单的输出，有些时候我们可以...</description>
      <category>code</category>
      <pubDate>Fri, 04 Jul 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>JUL日志系统</h2>
<p>JDK为我们提供了一个自带的日志框架，位于<code>java.util.logging</code>包下，我们可以使用此框架来实现日志的规范化打印，使用起来非常简单：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 首先获取日志打印器，名称随意</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用info来输出一个普通的信息，直接填写字符串即可</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是普通的日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们可以在主类中使用日志打印，得到日志的打印结果：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>十一月 15, 2021 12:55:37 下午 com.test.Main main
信息: 我是普通的日志
</code></pre></div><p>我们发现，通过日志输出的结果会更加规范，在后续的学习中，日志将时刻伴随我们左右。</p>
<h3>JUL基本使用</h3>
<p>日志的打印并不是简单的输出，有些时候我们可以会打印一些比较重要的日志信息，或是一些非常紧急的日志信息，根据不同类型的信息进行划分</p>
<h4>级别划分</h4>
<p>日志一般分为7个级别，详细信息我们可以在<code>Level</code>类中查看：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Level</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  
    <span class="token comment">//出现严重故障的消息级别，值为1000，也是可用的日志级别中最大的</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">SEVERE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"SEVERE"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//存在潜在问题的消息级别，比如边充电边打电话就是个危险操作，虽然手机爆炸的概率很小，但是还是会有人警告你最好别这样做，这是日志级别中倒数第二大的</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">WARNING</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"WARNING"</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//所有常规提示日志信息都以INFO级别进行打印</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">INFO</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"INFO"</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//以下日志级别依次降低，不太常用</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">CONFIG</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"CONFIG"</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">FINE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"FINE"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">FINER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"FINER"</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">FINEST</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"FINEST"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre></div><p>之前通过<code>info</code>方法直接输出的结果就是使用的默认级别的日志，实际上每个级别都有一个对应的方法用于打印：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">severe</span><span class="token punctuation">(</span><span class="token string">"severe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//最高日志级别</span>
    logger<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"warning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认日志级别</span>
    logger<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">fine</span><span class="token punctuation">(</span><span class="token string">"fine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">finer</span><span class="token punctuation">(</span><span class="token string">"finer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">finest</span><span class="token punctuation">(</span><span class="token string">"finest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//最低日志级别</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>自定义级别设置 <code>logger.log</code></h4>
<p>当然，如果需要更加灵活地控制日志级别</p>
<p>我们也可以通过<code>log</code>方法来主动设定该条日志的输出级别：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">SEVERE</span><span class="token punctuation">,</span> <span class="token string">"严重的错误"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"祝你明天就遇到我"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">WARNING</span><span class="token punctuation">,</span> <span class="token string">"警告的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">,</span> <span class="token string">"普通的信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">"级别低于普通信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><code>Logger</code>默认情况下只会打印INFO级别以上的日志，而INFO级别以下的日志则会直接省略，我们可以通过配置来进行调整。</p>
<h4>修改日志的默认打印级别</h4>
<p>我们知道日志的默认打印级别为INFO，此时低于INFO的所有日志都是被屏蔽的，而要修改日志的默认打印级别，我们需要同时调整<code>Handler</code>和<code>Logger</code>的<code>level</code>属性：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>handler<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">FINEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token comment">//注意，填写的日志打印级别是什么，高于等于此级别的所有日志都会被打印</span>
logger<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">FINEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">fine</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>现在我们再次打印低于INFO级别的日志就可以正确得到结果了。</p>
<p><code>Logger</code>类还为我们提供了两个比较特殊的日志级别，它们专门用于配置特殊情况：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//表示直接关闭所有日志信息，值为int的最大值</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">OFF</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"OFF"</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//表示开启所有日志信息，无论是什么级别都进行打印</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Level</span> <span class="token constant">ALL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Level</span><span class="token punctuation">(</span><span class="token string">"ALL"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">,</span> defaultBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>因为这这里OFF的值为int的最大值，也就是说没有任何日志级别的值大于它，因此，如果将打印等级配置为OFF，那么所有类型的日志信息都不会被打印了，而ALL则相反。</p>
]]></content:encoded>
    </item>
    <item>
      <title>javaweb - JUL日志2</title>
      <link>http://ekkosonya.cn/code/javaweb/javaweb21.html</link>
      <guid>http://ekkosonya.cn/code/javaweb/javaweb21.html</guid>
      <source url="http://ekkosonya.cn/rss.xml">javaweb - JUL日志2</source>
      <description>JUL日志系统2 日志核心内容 核心部分 Handler 日志打印的核心部分：Handler，它用于处理我们的日志内容打印 ConsoleHandler | FileHandler | SocketHandler JDK为我们提供了很多种类的Handler用于多种不同类型的日志打印，比较常见的就是打印到控制台，当然我们也可以打印到一个日志文件中，名字一...</description>
      <category>code</category>
      <pubDate>Sun, 06 Jul 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>JUL日志系统2</h2>
<h3>日志核心内容</h3>
<h4>核心部分 <code>Handler</code></h4>
<p>日志打印的核心部分：<code>Handler</code>，它用于处理我们的日志内容打印</p>
<p><code>ConsoleHandler</code> | <code>FileHandler</code> | <code>SocketHandler</code></p>
<p>JDK为我们提供了很多种类的<code>Handler</code>用于多种不同类型的日志打印，比较常见的就是打印到控制台，当然我们也可以打印到一个日志文件中，名字一般为<code>xxx.log</code>这种格式。</p>
<p>常用的Handler实现有：</p>
<ul>
<li><code>ConsoleHandler</code>: 将日志通过<code>System. err</code>打印到控制台，现在默认就是使用的这个。</li>
<li><code>FileHandler</code>: 将日志直接写入到指定的文件中。</li>
<li><code>SocketHandler</code>: 将日志利用Socket通过网络发送到另一个主机。</li>
</ul>
<p>当然，一个Logger中可以包含多个Handler用于同时向不同的地方打印日志，我们可以通过<code>getHandlers</code>方法来获取Logger对象中已经配置的Handler对象：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">getHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>此时打印的列表中不存在任何Handler对象，可见，我们创建的Logger默认是不带任何Handler对象的</p>
<p>那么我们之前的日志是怎么打印出来的呢？这实际上是Logger的父级提供的，这里我们先暂时不介绍继承关系。</p>
<p>我们使用<code>setUseParentHandlers</code>方法来屏蔽所有父级提供的日志处理器：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>logger<span class="token punctuation">.</span><span class="token function">setUseParentHandlers</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>现在由于Logger没有配置任何Handler处理器，因此我们打印日志就<strong>不会有任何效果</strong>。</p>
<h5><code>ConsoleHandler</code></h5>
<p>我们可以来尝试自己配置一个用于控制台打印的Handler处理器，这里直接创建一个新的ConsoleHandler对象：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ConsoleHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>现在我们打印日志就可以出现想要的结果了：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>8月 28, 2024 12:12:37 上午 com.test.Main main
信息: Hello World
</code></pre></div><h5><code>FileHandler</code></h5>
<p>我们接着来尝试将日志记录到我们本地的文件中，这里使用FileHandler类型：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">FileHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token string">"test.log"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token comment">//第二个参数开启后会续写已有的日志，如果不开启会直接覆盖重写</span>
logger<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>最后我们就可以得到一个日志文件了，默认是以XML格式进行写入的：</p>
<figure><figcaption>alt text</figcaption></figure>
<p>这种格式有助于程序的日志读取，但是对于我们人来说，非常难以阅读，那有没有什么办法将文件的日志打印变成控制台那种格式呢？</p>
<h5>修改输出格式 <code>Formatter</code></h5>
<p>实际上每一个Handler都有一个<code>Formatter</code>对象，它用于控制日志的格式，默认情况下，<code>ConsoleHandler</code>会配置一个<code>SimpleFormatte</code>r对象，格式为：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>时间 类名 方法
日志级别: 日志内容
</code></pre></div><p>我们刚刚在<code>FileHandler</code>中见到的是默认生成的<code>XMLFormatter</code>，它会将日志以XML的形式进行打印，现在我们也可以手动修改它为<code>SimpleFormatter</code>类型：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token string">"test.log"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
handler<span class="token punctuation">.</span><span class="token function">setFormatter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>此时日志文件中写入的内容就是简单的日志格式了
</p>
]]></content:encoded>
    </item>
    <item>
      <title>javaweb - JUL日志3</title>
      <link>http://ekkosonya.cn/code/javaweb/javaweb22.html</link>
      <guid>http://ekkosonya.cn/code/javaweb/javaweb22.html</guid>
      <source url="http://ekkosonya.cn/rss.xml">javaweb - JUL日志3</source>
      <description>JUL日志系统3 日志继承关系 RootLogger JUL中Logger之间存在父子关系，这种父子关系类似于继承，我们可以通过Logger的getParent方法来获取其父Logger对象： 这里我们会得到一个： 这个RootLogger对象为所有日志记录器的最顶层父级对象，它包含一个默认的ConsoleHandler处理器用于进行控制台打印，而日志...</description>
      <category>code</category>
      <pubDate>Sun, 06 Jul 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>JUL日志系统3</h2>
<h3>日志继承关系</h3>
<h4><code>RootLogger</code></h4>
<p>JUL中Logger之间存在父子关系，这种父子关系类似于继承，我们可以通过Logger的<code>getParent</code>方法来获取其父Logger对象：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这里我们会得到一个：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>java.util.logging.LogManager$RootLogger@24d46ca6
</code></pre></div><p>这个<code>RootLogger</code>对象为所有日志记录器的最顶层父级对象，它包含一个默认的<code>ConsoleHandler</code>处理器用于进行控制台打印，而日志在打印时，子Logger会继承父Logger提供的所有<code>Handler</code>进行日志处理，因此我们在默认情况下才能正常使用日志打印：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Logger</span> parent <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4>修改默认情况下的打印等级</h4>
<p><code>Handler</code>是属于对应的<code>Logger</code>的，即继承的子<code>Logger</code>不能直接修改父<code>Logger</code>的<code>Handler</code></p>
<p>根据我们上节课学习的知识，在默认情况下如果我们需要修改日志打印等级，那么同时<strong>也需要将父级的Handler也进行日志等级配置</strong>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>parent<span class="token punctuation">.</span><span class="token function">getHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">finest</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4>重复<code>Logger</code>问题</h4>
<p>当然，如果我们在不屏蔽父级<code>Handler</code>的情况下为子级配置一个<code>Handler</code>，那么此时两个<code>Handler</code>都会生效</p>
<p>顺序：先子<code>Logger</code>, 再父<code>Logger</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>logger<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"你干嘛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>日志中出现了两次：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>8月 28, 2024 12:57:39 上午 com.test.Main main
信息: 你干嘛
8月 28, 2024 12:57:39 上午 com.test.Main main
信息: 你干嘛
</code></pre></div><p>不过需要注意一下顺序，当父级和子级都配置时，那么<strong>子级的Handler优先进行处理，接着才是父级。</strong></p>
<h4>名称分级，自动构建继承关系</h4>
<p>除了默认的RootLogger作为父类，实际上Logger还会通过名称进行分级，自动构建一个继承关系，比如下面：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger1 <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Logger</span> logger2 <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"com.test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Logger</span> logger3 <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"com.test.inner1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Logger</span> logger4 <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"com.test.inner2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logger4<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> logger2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//全true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logger3<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> logger2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logger2<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> logger1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>就像包名一样，<strong>日志的名称会按照包的分级，进行自动继承</strong>，就像下面这个图一样：</p>
<figure><figcaption>alt text</figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>javaweb - JUL日志4</title>
      <link>http://ekkosonya.cn/code/javaweb/javaweb23.html</link>
      <guid>http://ekkosonya.cn/code/javaweb/javaweb23.html</guid>
      <source url="http://ekkosonya.cn/rss.xml">javaweb - JUL日志4</source>
      <description>JUL日志系统4 日志默认配置 Properties 格式 Properties格式的文件是Java的一种配置文件，我们之前在学习Mybatis的时候学习了XML，但是我们发现XML配置文件读取实在是太麻烦，那么能否有一种简单一点的配置文件呢？ 此时就可以使用Properties文件，它的格式如下： 该文件配置很简单，格式类似于我们Java中的Map键...</description>
      <category>code</category>
      <pubDate>Sun, 06 Jul 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>JUL日志系统4</h2>
<h3>日志默认配置</h3>
<h4><code>Properties</code> 格式</h4>
<p><code>Properties</code>格式的文件是Java的一种配置文件，我们之前在学习Mybatis的时候学习了XML，但是我们发现XML配置文件读取实在是太麻烦，那么能否有一种简单一点的配置文件呢？</p>
<p>此时就可以使用<code>Properties</code>文件，它的格式如下：</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">Test</span>
<span class="token key attr-name">desc</span><span class="token punctuation">=</span><span class="token value attr-value">Description</span>
</code></pre></div><p>该文件配置很简单，格式<strong>类似于我们Java中的Map键值对</strong>，中间使用<strong>等号</strong>进行连接。</p>
<p>当然，<strong>键的名称我们也可以分为多级进行配置</strong>，每一级使用<code>.</code>进行划分，比如我们现在要配置数据库的连接信息，就可以编写为这种形式：</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">jdbc.datasource.driver</span><span class="token punctuation">=</span><span class="token value attr-value">com.cj.mysql.Driver</span>
<span class="token key attr-name">jdbc.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/test</span>
<span class="token key attr-name">jdbc.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">test</span>
<span class="token key attr-name">jdbc.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
</code></pre></div><h5>JAVA读取<code>Properties</code></h5>
<p>JDK为我们提供了一个叫做<code>Properties</code>的类型，它继承自<code>Hashtable</code>类（是HashMap的<strong>同步加锁版</strong>）</p>
<p>使用起来和<code>HashMap</code>是差不多的：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Properties</span> <span class="token keyword">extends</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>相关操作：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"test.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//使用load方法读取本地文件中的所有配置到Map中</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h5>获取系统数据<code>getProperties</code></h5>
<p>实际上，我们也可以通过这种方式来获取我们的一些系统属性</p>
<p><code>System</code>类中有一个<code>getProperties</code>方法用于存储所有系统相关的属性值，这里我们打印一下系统名称和版本：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"os.version"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>当然，程序中的Properties对象也可以快速保存为一个对应的<code>.properties</code>文件：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"system.properties"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"系统属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4>JUL设置默认配置 <code>LogManger</code></h4>
<p>实际上JUL也可以通过进行<strong>配置文件来规定日志打印器的一些默认值</strong></p>
<p>比如我们现在想配置默认的日志打印级别：</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># RootLogger 的默认处理器为</span>
<span class="token key attr-name">handlers</span><span class="token punctuation">=</span><span class="token value attr-value">java.util.logging.ConsoleHandler</span>
<span class="token comment"># RootLogger 的默认的日志级别</span>
<span class="token key attr-name">.level</span><span class="token punctuation">=</span><span class="token value attr-value">ALL</span>
<span class="token comment"># 配置ConsoleHandler的默认level</span>
<span class="token key attr-name">java.util.logging.ConsoleHandler.level</span><span class="token punctuation">=</span><span class="token value attr-value">ALL</span>
</code></pre></div><p>接着我们需要在程序开始之前加载这里的配置：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LogManager</span> manager <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token comment">//获取LogManager读取配置文件</span>
manager<span class="token punctuation">.</span><span class="token function">readConfiguration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样就可以通过配置文件的形式修改一些功能的默认属性了，而不需要我们再使用代码进行配置。</p>
<p>实际上在JUL的这类内部也有着对应的配置处理操作，如果发现有默认配置优先使用配置里面的，比如Handler的构造方法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Level</span> defaultLevel<span class="token punctuation">,</span> <span class="token class-name">Formatter</span> defaultFormatter<span class="token punctuation">,</span>
        <span class="token class-name">Formatter</span> specifiedFormatter<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">LogManager</span> manager <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> cname <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> <span class="token class-name">Level</span> level <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getLevelProperty</span><span class="token punctuation">(</span>cname <span class="token operator">+</span> <span class="token string">".level"</span><span class="token punctuation">,</span> defaultLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Filter</span> filter <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getFilterProperty</span><span class="token punctuation">(</span>cname <span class="token operator">+</span> <span class="token string">".filter"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Formatter</span> formatter <span class="token operator">=</span> specifiedFormatter <span class="token operator">==</span> <span class="token keyword">null</span>
                                <span class="token operator">?</span> manager<span class="token punctuation">.</span><span class="token function">getFormatterProperty</span><span class="token punctuation">(</span>cname <span class="token operator">+</span> <span class="token string">".formatter"</span><span class="token punctuation">,</span> defaultFormatter<span class="token punctuation">)</span>
                                <span class="token operator">:</span> specifiedFormatter<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> encoding <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getStringProperty</span><span class="token punctuation">(</span>cname <span class="token operator">+</span> <span class="token string">".encoding"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre></div><p>关于使用配置文件的形式修改JUL部分内容的默认值就先讲解到这里。</p>
]]></content:encoded>
    </item>
    <item>
      <title>javaweb - JUL日志5</title>
      <link>http://ekkosonya.cn/code/javaweb/javaweb24.html</link>
      <guid>http://ekkosonya.cn/code/javaweb/javaweb24.html</guid>
      <source url="http://ekkosonya.cn/rss.xml">javaweb - JUL日志5</source>
      <description>JUL日志系统5 自定义日志格式 新建一个类，来继承Formatter，通过修改对应的format函数来实现自定义 每一个Handler都可以配置一个对应的Formatter来决定日志打印的格式，除了官方为我们提供的两种默认格式外，我们也可以自定义我们想要的日志打印格式。 我们只需要继承Formatter类，就可以创建一个自定义的日志格式处理逻辑了： ...</description>
      <category>code</category>
      <pubDate>Sun, 06 Jul 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>JUL日志系统5</h2>
<h3>自定义日志格式</h3>
<p>新建一个类，来继承<code>Formatter</code>，通过修改对应的<code>format</code>函数来实现自定义</p>
<p>每一个<code>Handler</code>都可以配置一个对应的<code>Formatter</code>来决定日志打印的格式，除了官方为我们提供的两种默认格式外，我们也可以自定义我们想要的日志打印格式。</p>
<p>我们只需要继承<code>Formatter</code>类，就可以创建一个自定义的日志格式处理逻辑了：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFormatter</span> <span class="token keyword">extends</span> <span class="token class-name">Formatter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LogRecord</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"我是自定义日志格式"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其中参数为<code>LogRecord</code>，它提供了当前日志记录的相关信息，比如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LogRecord</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所在类: "</span> <span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">getSourceClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法名称: "</span> <span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">getSourceMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志级别: "</span> <span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocalizedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"我是自定义日志格式"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>修改对应<code>Formatter</code></h4>
<h5>手动修改 <code>setFormatter</code></h5>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"com.test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setFormatter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h5>配置文件修改</h5>
<p>直接把<code>ConsoleHandler</code>的默认<code>Formatter</code>配置为我们自己的类：</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">java.util.logging.ConsoleHandler.formatter</span><span class="token punctuation">=</span><span class="token value attr-value">com.test.MyFormatter</span>
</code></pre></div><h4>自定义例子</h4>
<p>因此，我们也可以利用这些属性来编写一个类似于的<code>SimpleFormatter</code>的日志格式，比如这里包含类名、时间等，类似于下面图中的日志格式：</p>
<figure><figcaption>alt text</figcaption></figure>
<p>我们来尝试编写一下：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LogRecord</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//日期</span>
    <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">getMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SimpleDateFormat</span> dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss.SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//级别</span>
    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>" </code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>hint - List初始化</title>
      <link>http://ekkosonya.cn/code/java_hint/hint1.html</link>
      <guid>http://ekkosonya.cn/code/java_hint/hint1.html</guid>
      <source url="http://ekkosonya.cn/rss.xml">hint - List初始化</source>
      <description>带初始值的初始化 如果是 java 9+, 可以直接使用 list.of 这种方式创建的列表 不可修改，add() 和 remove() 都会抛出 UnsupportedOperationException。 但如果是 java 8，就没有这个，可以使用 Stream </description>
      <category>code</category>
      <pubDate>Mon, 16 Jun 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>带初始值的初始化</p>
<ul>
<li>
<p>如果是 <code>java 9+</code>, 可以直接使用 <code>list.of</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这种方式创建的列表 不可修改，<code>add()</code> 和 <code>remove()</code> 都会抛出 <code>UnsupportedOperationException</code>。</p>
</li>
<li>
<p>但如果是 <code>java 8</code>，就没有这个，可以使用 <code>Stream</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Charlie"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
</ul>
<p>| 特性                     | <code>List.of(...)</code>                        | <code>Stream.of(...).collect(Collectors.toList())</code> |
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>javaweb - Mybatis8</title>
      <link>http://ekkosonya.cn/code/javaweb/javaweb18.html</link>
      <guid>http://ekkosonya.cn/code/javaweb/javaweb18.html</guid>
      <source url="http://ekkosonya.cn/rss.xml">javaweb - Mybatis8</source>
      <description>Mybatis详解6 缓存机制 其实缓存机制我们在之前学习IO流的时候已经提及过了，我们可以提前将一部分内容放入缓存，下次需要获取数据时，就可以直接从缓存中读取，这样的话相当于直接从内存中获取而不是再去向数据库索要数据，效率会更高，缓存的概念在我们后续的学习中还会经常遇见，它也是现在提高数据获取效率的良好解决方案。 Mybatis为了查询效率，同样内置...</description>
      <category>code</category>
      <pubDate>Tue, 17 Jun 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Mybatis详解6</h2>
<h3>缓存机制</h3>
<p>其实缓存机制我们在之前学习IO流的时候已经提及过了，我们可以提前将一部分内容放入缓存，下次需要获取数据时，就可以直接从缓存中读取，这样的话相当于直接从内存中获取而不是再去向数据库索要数据，效率会更高，缓存的概念在我们后续的学习中还会经常遇见，它也是现在提高数据获取效率的良好解决方案。</p>
<p>Mybatis为了查询效率，同样内置了一个缓存机制，我们在查询时，如果Mybatis缓存中存在数据，那么我们就可以直接从缓存中获取，而不是再去向数据库进行请求，节省性能开销。</p>
<figure><figcaption>alt text</figcaption></figure>
<p><code>Mybatis</code>的缓存机制有些复杂，存在<strong>一级缓存(本地缓存)<strong>和</strong>二级缓存</strong></p>
<h4>一级缓存 (作用在<code>SqlSession</code>)</h4>
<p>我们首先来看一下一级缓存，默认情况下，只启用了本地的会话缓存，也就是一级缓存，<strong>它仅仅对一个会话中的数据进行缓存</strong>（一级缓存强制启用，无法关闭，只能做调整）</p>
<p>也就是每一个<code>SqlSession</code>都有有一个对应的缓存</p>
<p>我们来看看下面这段代码：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TestMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//再次获取</span>
</code></pre></div><p>这里我们连续获取了两次ID为1的用户，我们会在日志中惊奇地发现，这里的查询操作实际上只进行了一次：</p>
<figure><figcaption>alt text</figcaption></figure>
<p>我们去掉类上的<code>@Data</code>注解，会发现得到的两个对象实际上就是同一个：</p>
<figure><figcaption>alt text</figcaption></figure>
<p>也就是说我们第二次查询不仅压根就<strong>没执行SQL语句</strong>，甚至直接没有<strong>重新构造对象，而是直接获取之前创建好的</strong>。</p>
<p>可见，<code>Mybatis</code>确实存在着缓存机制来进行性能优化。</p>
<p>那么如果我修改了数据库中的内容，缓存还会生效吗：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mapper<span class="token punctuation">.</span><span class="token function">updateAgeById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>此时由于我们更新了数据库中的数据，那么之前缓存的内容也会跟着失效，第二次获取的时候会进行重新查询。</p>
<p>也就是说<code>Mybatis</code>知道我们对数据库里面的数据进行了修改，所以之前缓存的内容可能就不是当前数据库里面最新的内容了。</p>
<p>但是一定注意，一级缓存只针对于<strong>单个会话</strong>，<strong>多个会话之间不相通</strong>。</p>
<p>因此， 一个会话DML操作只会重置当前会话的缓存，不会重置其他会话的缓存，我们可以来试验一下：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> s1 <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSession</span> s2 <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TestMapper</span> m1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TestMapper</span> m2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m2<span class="token punctuation">.</span><span class="token function">updateAgeById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以看到，会话1在重复查询数据时，即使会话2已经修改了数据，但是依然没有影响会话1之中的缓存。</p>
<p>这导致尽管会话2更新了数据，但是会话1中的数据是从缓存得到的，没有更新。</p>
<p>一级缓存给我们提供了很高速的访问效率，但是它的作用范围实在是有限，<strong>如果一个会话结束，那么之前的缓存就全部失效了</strong>，但是我们希望缓存能够扩展到所有会话都能使用，无论哪个会话对于数据的查询缓存都可以直接被所有会话使用。</p>
<h4>二级缓存 (作用在<code>Mapper</code>)</h4>
<p>我们可以通过<strong>二级缓存</strong>来实现，二级缓存<strong>默认是关闭状态</strong>，要开启二级缓存，我们需要在映射器XML文件中添加：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>二级缓存是<code>Mapper</code>级别的，<strong>只要是使用这个<code>Mapper</code>的会话，都会关联到这个二级缓存</strong></p>
<p>无论哪个会话失效，它之前查询的缓存依然会存在于二级缓存中，依然可以被其他会话直接使用。</p>
<p>我们可以对<code>cache</code>标签进行一些配置：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>
  <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>
  <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>
  <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>
  <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>其中，<code>size</code>表示最大的缓存对象数量，当缓存达到上限时，会根据<code>eviction</code>配置的策略进行清理：</p>
<ul>
<li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li>
<li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li>
<li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li>
<li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li>
</ul>
<p><code>flushInterval</code>用于控制缓存刷新时间，当到达指定时间时会自动清理所有缓存，默认情况下如果不配置此项则不会进行定时清理。</p>
<p><code>readOnly</code>（只读）属性可以被设置为 true 或 false，只读的缓存会给所有调用者返回<strong>相同的缓存对象</strong>，且<strong>对象不能被修改</strong>。这就提供了可观的性能提升。</p>
<p>而可读写的缓存会（通过序列化）返回<strong>缓存对象的拷贝</strong>。 速度上会慢一些，但是更安全，因此默认值是 false。</p>
<blockquote>
<p><strong>注意：</strong> 二级缓存是<strong>事务性</strong>的，这意味着，当 SqlSession 结束并提交时，或是结束并回滚，而且没有执行 <code>flushCache=true</code> 的 <code>insert/delete/update</code> 语句时，<strong>二级缓存才会被更新</strong>。</p>
</blockquote>
<p>即：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSession</span> session2 <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">TestMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectStuById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    session2<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">TestMapper</span> mapper2 <span class="token operator">=</span> session2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper2<span class="token punctuation">.</span><span class="token function">selectStuById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>只有<code>commit</code>了，才会保存在二级缓存，这样用<code>mapper2</code>时，才不会重新读取，如果没有<code>commit</code>，就会重新读取，因为并没有保存在缓存中</p>
<p>开启二级缓存后，再次执行我们之前的操作，就可以直接在二级缓存中命中了：</p>
<figure><figcaption>alt text</figcaption></figure>
<h5>查找顺序</h5>
<p>实际上，添加了二级缓存之后，Mybatis会<strong>先从二级缓存中查找数据</strong>，当二级缓存中没有时，<strong>才会从一级缓存中获取</strong>，当一级缓存中都还没有数据时，才<strong>会请求数据库</strong>。</p>
<h5>单独配置取消二级缓存 <code>useCache='false'</code></h5>
<p>当我们开启二级缓存后，默认情况下一个Mapper中所有的操作都会使用二级缓存</p>
<p>我们也可以单独配置其不使用二级缓存，只需要修改<code>useCache</code>属性即可：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUserById<span class="token punctuation">"</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    select * from user where id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h5>操作结束，清除所有缓存 <code>flushCache</code></h5>
<p>有些操作可能比较特殊，比如我们希望某个操作执行完成后，直接清除所有缓存，无论是一级缓存还是二级缓存，那么此时就可以开启<code>flushCache</code>属性：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUserById<span class="token punctuation">"</span></span> <span class="token attr-name">flushCache</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    select * from user where id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>开启此选项后，调用此操作将直接导致一级和二级缓存被清除。</p>
<h4>缓存一致性问题</h4>
<p>虽然缓存机制给我们提供了很大的性能提升，但是缓存存在一个问题，我们之前在<code>计算机组成原理</code>中可能学习过<strong>缓存一致性问题</strong></p>
<p>当多个CPU在操作自己的缓存时，可能会出现各自的缓存内容不同步的问题。</p>
<figure><figcaption>alt text</figcaption></figure>
<p>而<code>Mybatis</code>也会这样，我们来看看这个例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TestMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们现在循环地每三秒读取一次，而在这个过程中，我们使用其他软件手动修改数据库中的数据，将1号用户的ID改成100，那么理想情况下，下一次读取将直接无法获取到这行数据，因为ID已经发生变化了。</p>
<p>但是结果却是依然能够读取，并且sid并没有发生改变，这也证明了Mybatis的缓存在生效，因为我们是从外部进行修改，Mybatis不知道我们修改了数据，所以依然在使用缓存中的数据，但是这样很明显是不正确的</p>
<p>因此，如果存在多台服务器或者是多个程序都在使用<code>Mybatis</code>操作同一个数据库，并且都开启了<strong>缓存</strong>，需要解决这个问题</p>
<p>我们只能关闭所有二级缓存，并且在<code>Mybatis</code>每个操作都配置<code>flushCache</code>为true来保证刷新。</p>
<p>只不过这种操作实际上是治标不治本的，<strong>实现多服务器缓存共用</strong>才是最终解决方案，也就是让所有的Mybatis都使用<strong>同一个缓存进行数据存取</strong></p>
<p>在后面，我们会继续学习Redis、Ehcache、Memcache等缓存框架，通过使用这些工具，就能够很好地解决缓存一致性问题。</p>
]]></content:encoded>
    </item>
    <item>
      <title>javaweb - Mybatis9</title>
      <link>http://ekkosonya.cn/code/javaweb/javaweb19.html</link>
      <guid>http://ekkosonya.cn/code/javaweb/javaweb19.html</guid>
      <source url="http://ekkosonya.cn/rss.xml">javaweb - Mybatis9</source>
      <description>Mybatis详解7 使用注解开发 在之前的学习中，我们已经体验到Mybatis为我们带来的便捷了 我们只需要编写对应的映射器，并将其绑定到一个接口上，即可直接通过该接口执行我们的SQL语句，极大的简化了我们之前JDBC那样的代码编写模式。 那么，能否实现无需XML映射器配置，而是直接使用注解在接口上进行配置呢？ 我们可以直接删除掉所有的Mapper....</description>
      <category>code</category>
      <pubDate>Tue, 17 Jun 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Mybatis详解7</h2>
<h3>使用注解开发</h3>
<p>在之前的学习中，我们已经体验到<code>Mybatis</code>为我们带来的便捷了</p>
<p>我们只需要编写对应的映射器，并将其绑定到一个接口上，即可直接通过该接口执行我们的SQL语句，极大的简化了我们之前JDBC那样的代码编写模式。</p>
<p>那么，能否<strong>实现无需XML映射器配置</strong>，而是直接使用注解在接口上进行配置呢？</p>
<p>我们可以直接删除掉所有的<code>Mapper.xml</code>文件了，只保留<code>Mapper</code>相关的接口。</p>
<p>现在，我们来尝试以全注解的形式重现编写咱们的SQL语句映射</p>
<h4>调整 <code>mybatis-config.xml</code></h4>
<p>还是以查询所有的用户为例，既然现在不需要配置<code>Mapper.xml</code>文件了，那么我们现在需要重写在Mybatis的配置文件中进行mapper的配置</p>
<p>因为现在只需要使用接口来进行配置</p>
<p>所以使用<code>package</code>标签来指定一个包，包下所有的接口都将直接作为<code>Mapper</code>配置接口：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>或者还是<code>mapper</code>标签通过<code>class</code>属性来指定具体的接口：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.mapper.TestMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h4>修改对应接口+注解</h4>
<p>现在我们还是在<code>Mapper</code>中添加一个对应的方法用于执行：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>之前我们需要像这样编写：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAllUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    select * from user
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h5>举例</h5>
<p>现在只需要一个注解即可，<code>Mybatis</code>为我们提供了丰富的注解用于表示不同SQL语句类型</p>
<p>这里的<code>@Select</code>代表的就是select标签，我们只需要直接在其中编写SQL语句即可，而返回类型<code>Mybatis</code>会自动根据方法的返回值进行判断：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><figure><img src="https://oss.itbaima.cn/internal/markdown/2024/08/20/ALdMlG5evncp4kH.png" alt="QQ_1724143033753" tabindex="0" loading="lazy"><figcaption>QQ_1724143033753</figcaption></figure>
<p>包括一些SQL语句参数的使用也是和之前完全一样，比如插入一个用户：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user (name, age) values (#{name}, #{age})"</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h5>配置这些额外的参数 <code>@Options</code></h5>
<p>虽然Mybatis为我们提供了之前XML配置中各种操作的对应注解，但是我们发现，这些注解并不能像之前XML那样直接修改一些属性</p>
<p>比如我们希望配置<code>useGeneratedKeys</code>来得到自动生成的主键，从而修改我们对应的实体类</p>
<p>需要配置这些额外的参数，我们可以使用<code>@Options</code>注解：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> keyColumn <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user (name, age) values (#{name}, #{age})"</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    insert into user (name, age) values (#{name}, #{age})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这两种写法效果是完全一样的，<code>Mybatis</code>在插入后，会将我们当前的实体类对象的<code>id</code>修改为得到的<code>id</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mapper<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><figure><figcaption>alt text</figcaption></figure>
<p>所以我们通过<code>Mybatis</code>为我们设计的这一系列注解就可以很轻松地取代掉之前的配置。</p>
<h5>实体类字段名称与数据库不同 <code>@Results</code></h5>
<p>假如现在我们的实体类字段名称与数据库不同，此时该如何像之前一样配置<code>resultMap</code>呢？</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> uid<span class="token punctuation">;</span>
    <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>我们可以使用<code>@Results</code>注解来实现这种操作，它的使用方式与resultMap几乎没什么区别：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h5>结合<code>xml</code>配置</h5>
<p>当然，如果你还是觉得这种方式配置起来不如之前方便，那么你也可以单独在XML中配置一个<code>resultMap</code></p>
<p>然后直接通过注解的形式引用：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h5>指定构造方法 <code>@ConstructorArgs</code></h5>
<p>那么现在如果我们需要指定使用的构造方法怎么办呢？就像我们之前在使用<code>constrator</code>标签一样</p>
<p>Mybatis为我们提供了<code>@ConstructorArgs</code>注解，配置方式和之前几乎一致：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConstructorArgs</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Arg</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Arg</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Arg</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span> javaType <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这与我们之前的XML配置完全一致：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idArg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_int<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_int<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h5>关联查询 (注解只支持嵌套查询)</h5>
<p>我们再来看看之前在<code>resultMap</code>中配置的关联查询该如何编写，Mybatis也为我们提供了丰富的注解用于处理这类问题，我们首先来看看<strong>一对一查询</strong>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"detail"</span><span class="token punctuation">,</span> one <span class="token operator">=</span> <span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"selectDetailById"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id};"</span><span class="token punctuation">)</span>
<span class="token class-name">User</span> <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user_detail where id = #{id}"</span><span class="token punctuation">)</span>
<span class="token class-name">UserDetail</span> <span class="token function">selectDetailById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>我们在配置<code>@Result</code>注解时，只需要将<code>one</code>或是<code>many</code>参数进行填写即可，它们分别代表一对一关联和一对多关联</p>
<p>使用<code>@One</code>和<code>@Many</code>注解来指定其他查询语句进行<strong>嵌套查询</strong>，就像是我们之前使用<code>association</code>和<code>collection</code>那样。</p>
<p>不过很遗憾的是，我们无法完全通过注解来实现<strong>之前的联合查询解析</strong>（这是因为 Java 注解不允许循环引用）</p>
<p>只能使用这种嵌套查询来完成复杂查询操作，因此，如果对这种复杂查询有着一定需求的话，<strong>建议使用之前的<code>XML</code>方式进行配置</strong>。</p>
<h5>动态<code>SQL</code>配置 (<code>SelectProvider</code>注解)</h5>
<p>我们还可以使用注解进行动态SQL的配置</p>
<p>比如现在我们想要实现之前的这个奇葩需求：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    select * from user where id = #{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id &gt; 3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        and age &gt; 18
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>Mybatis</code>针对于所有的<code>SQL</code>操作都提供了对应的Provider注解，用于配置动态SQL</p>
<p>我们需要先创建一个类编写我们的动态SQL操作：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSqlBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">buildGetUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>   
          <span class="token comment">//SQL类中提供了常见的SELECT、FORM、WHERE等操作</span>
            <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"id = #{id}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"age &gt; 18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>详细的SQL语句构建器语法文档：<a href="https://mybatis.org/mybatis-3/zh_CN/statement-builders.html" target="_blank" rel="noopener noreferrer">https://mybatis.org/mybatis-3/zh_CN/statement-builders.html</a></p>
<p>构建完成后，接着我们就可以使用<code>@SelectProvider</code>来引用这边编写好的动态SQL操作：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SelectProvider</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">TestSqlBuilder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"buildGetUserById"</span><span class="token punctuation">)</span>
<span class="token class-name">User</span> <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>效果和之前我们编写XML形式的动态SQL一致</p>
<p>当然，如果遇到了多个参数的情况，我们同样需要使用<code>@Param</code>来指定参数名称，包括<code>TestSqlBuilder</code>中编写的方法也需要添加，否则必须保证形参列表与这边接口一致。</p>
<p>虽然这样可以实现和之前差不多的效果，但是这实在是太过复杂了，我们还需要单独编写一个类来做这种事情</p>
<p>实际上我们也可以直接在<code>@Select</code>中编写一个XML配置动态SQL，<code>Mybatis</code>同样可以正常解析：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
         &lt;script&gt;
            select * from user where id = #{id}
            &lt;if test="id &gt; 3"&gt;
                 and age &gt; 18
            &lt;/if&gt;
         &lt;/script&gt;
         """</span><span class="token punctuation">)</span>
<span class="token class-name">User</span> <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这里只需要包括一个<code>script</code>标签我们就能像之前XML那样编写动态SQL了，只不过由于IDEA不支持这种语法的识别，可能会出现一些莫名其妙的红标，但是是可以正常运行的。</p>
<h5>二级缓存配置 <code>@CacheNamespace</code></h5>
<p>最后我们来看一下二级缓存相关的配置，使用<code>@CacheNamespace</code>注解直接定义在接口上即可，然后我们可以通过使用<code>@Options</code>来控制单个操作的缓存启用：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheNamespace</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span> readWrite <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>我们如果需要控制单个方法的缓存，同样可以使用<code>@Option</code>来进行配置：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>flushCache <span class="token operator">=</span> <span class="token class-name">Options<span class="token punctuation">.</span>FlushCachePolicy</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">,</span> useCache <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id}"</span><span class="token punctuation">)</span>
<span class="token class-name">User</span> <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3><code>Configuration</code></h3>
<p>这里我们不如再做的更加极致一点，咱们把配置文件也给变成代码配置，彻底抛弃XML配置</p>
<p>实际上我们的XML配置中所有配置项都可以以<code>Configuration</code>对象的形式进行配置，最后在构造<code>SqlSessionFactory</code>时也可以通过此对象进行创建：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token function">initConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Configuration</span> <span class="token function">initConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PooledDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PooledDataSource</span><span class="token punctuation">(</span>
            <span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">,</span>
            <span class="token string">"jdbc:mysql://localhost:3306/web_study"</span><span class="token punctuation">,</span>
            <span class="token string">"test"</span><span class="token punctuation">,</span>
            <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Environment</span> environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Environment</span><span class="token punctuation">(</span><span class="token string">"development"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    configuration<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    configuration<span class="token punctuation">.</span><span class="token function">getTypeAliasRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerAliases</span><span class="token punctuation">(</span><span class="token string">"com.test.entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    configuration<span class="token punctuation">.</span><span class="token function">setLogImpl</span><span class="token punctuation">(</span><span class="token class-name">StdOutImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    configuration<span class="token punctuation">.</span><span class="token function">addMappers</span><span class="token punctuation">(</span><span class="token string">"com.test.mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> configuration<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>有关Mybatis的基本使用，我们就暂时介绍到这里。</p>
]]></content:encoded>
      <enclosure url="https://oss.itbaima.cn/internal/markdown/2024/08/20/ALdMlG5evncp4kH.png" type="image/png"/>
    </item>
    <item>
      <title>javaweb - Mybatis5</title>
      <link>http://ekkosonya.cn/code/javaweb/javaweb15.html</link>
      <guid>http://ekkosonya.cn/code/javaweb/javaweb15.html</guid>
      <source url="http://ekkosonya.cn/rss.xml">javaweb - Mybatis5</source>
      <description>Mybatis详解3 复杂查询 一对一查询 首先来看最简单的一对一查询，假设我们每个用户都有一个自己的详细信息表： alt textalt text 这里的id与用户id一致，作为用户id的逻辑外键，表示对应用户的详细信息。对应的实体类为： 现在我们希望查询User时，同时将用户的详细信息包含在内，像这种一对一查询该怎么实现呢？ 我们现在同样需要使用r...</description>
      <category>code</category>
      <pubDate>Sun, 15 Jun 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Mybatis详解3</h2>
<h3>复杂查询</h3>
<h4>一对一查询</h4>
<p>首先来看最简单的一对一查询，假设我们每个用户都有一个自己的详细信息表：</p>
<figure><figcaption>alt text</figcaption></figure>
<p>这里的id与用户id一致，作为用户id的逻辑外键，表示对应用户的详细信息。对应的实体类为：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetail</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> description<span class="token punctuation">;</span>
    <span class="token class-name">Date</span> register<span class="token punctuation">;</span>
    <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token class-name">UserDetail</span> detail<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>现在我们希望查询<code>User</code>时，同时将<strong>用户的详细信息包含在内</strong>，像这种一对一查询该怎么实现呢？</p>
<p>我们现在同样需要使用<code>resultMap</code>来自定义映射规则</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>MyBatis</code> 有两种不同的方式加载关联：</p>
<ul>
<li><strong>嵌套结果映射</strong>：使用嵌套的结果映射来处理连接结果的重复子集。</li>
<li><strong>嵌套 Select 查询</strong>：通过执行另外一个 SQL 映射语句来加载期望的复杂类型。</li>
</ul>
<h5>嵌套结果映射 <code>association</code></h5>
<p>我们先来看第一种方式，需要使用<strong>关联查询</strong>将用户的详细信息一并获取，然后配置关联查询相关信息，最后由<code>Mybatis</code>来对查询的结果进行处理即可.</p>
<p>首先是关联查询的<code>SQL</code>语句，这里我们直接使用<strong>左连接</strong>：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">left</span> <span class="token keyword">join</span> user_detail <span class="token keyword">on</span> <span class="token keyword">user</span><span class="token punctuation">.</span>id <span class="token operator">=</span> user_detail<span class="token punctuation">.</span>id <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token comment">#{id}</span>
</code></pre></div><figure><figcaption>alt text</figcaption></figure>
<p>接着我们需要在<code>resultMap</code>编写好对应关系，一对一查询我们可以使用<code>association</code>标签来进行指定，其中<code>property</code>就是需要进行一对一处理的对象</p>
<p>在此标签内部填写需要进行一对一映射的对象属性：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>detail<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserDetail<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>register<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>register<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这里的<code>column</code>和<code>javaType</code>可以不填，<code>Mybatis</code>一般情况下可以自动完成推断，配置完成后，我们在查询时<code>Mybatis</code>就可以自动把额外信息也封装好了：</p>
<figure><figcaption>alt text</figcaption></figure>
<h5>嵌套 Select 查询 <code>select + association</code></h5>
<p>们可以在查询<code>user</code>表的时候，同时查询<code>user_detail</code>表的对应信息，分别执行两个选择语句，最后再由<code>Mybatis</code>将其结果合并，效果和第一种方法是一样的：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    select * from user where id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUserDetailById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.UserDetail<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    select * from user_detail where id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>detail<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUserDetailById<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.UserDetail<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这里我们分别配置了两个<code>select</code>标签用于分别查询用户基本信息和详细信息，并使用<code>association</code>标签的<code>select</code>属性来指定关联查询操作，得到结果是一样的</p>
<h5>Mybatis日志</h5>
<p>我们可以开启<code>Mybatis</code>的日志来观察具体执行的操作，这里我们需要在<code>Mybatis</code>配置文件中添加：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这样Mybatis运行时就会打印日志到控制台了：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>...
Opening JDBC Connection
Created connection 1962329560.
==&gt;  Preparing: select * from user where id = ?
==&gt; Parameters: 1(Integer)
&lt;==    Columns: id, name, age
&lt;==        Row: 1, 小明, 18
====&gt;  Preparing: select * from user_detail where id = ?
====&gt; Parameters: 1(Integer)
&lt;====    Columns: id, description, register, avatar
&lt;====        Row: 1, 我是一个阳光开朗大男孩, 2024-08-16 15:15:03, https://www.baidu.com
&lt;====      Total: 1
&lt;==      Total: 1
User(id=1, name=小明, age=18, detail=UserDetail(id=1, description=我是一个阳光开朗大男孩, register=Fri Aug 16 15:15:03 CST 2024, avatar=https://www.baidu.com))
Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@74f6c5d8]
Returned connection 1962329560 to pool.
</code></pre></div><p>Mybatis日志中，<code>==&gt;</code>向右的箭头就是发送给MySQL服务器的SQL语句以及其参数列表，<code>&lt;==</code>向左的箭头就是得到的结果，可以看到这里一共执行了两次SQL语句，分别是user表和user_detail表的查询操作</p>
<h4>一对多查询 (查询一个 - 返回多个)</h4>
<p><code>collection</code> - 实体属性为列表</p>
<p><code>association</code> - 实体属性为实体类</p>
<p>我们接着来看一对多查询，现在来一个新的表，用于存放用户借阅的图书，对应实体类如下：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> bid<span class="token punctuation">;</span>
    <span class="token class-name">String</span> title<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> books<span class="token punctuation">;</span>   <span class="token comment">//直接得到用户所属的所有书籍信息</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其中<code>book</code>表设计如下，其中uid作为用户id的逻辑外键，表示这本书是谁借的：</p>
<figure><figcaption>alt text</figcaption></figure>
<p>对于一对多查询，我们也可以进行<strong>关联查询</strong>来让<code>Mybatis</code>自动解析结果并封装为对象</p>
<p>首先还是关联查询的SQL语句，这里我们让user左连接到book表中：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">left</span> <span class="token keyword">join</span> book <span class="token keyword">on</span> <span class="token keyword">user</span><span class="token punctuation">.</span>id <span class="token operator">=</span> book<span class="token punctuation">.</span>uid <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token comment">#{id}</span>
</code></pre></div><p>此时由于出现了多行数据，我们需要配置一个<code>collection</code>标签来让其可以正确处理关联的集合结果，<code>Mybatis</code>会根据我们配置的属性自动将关联数据变为一个集合并存放在对象中：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.Book<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bid<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>我们需要在<code>resultMap</code>中完整编写需要查询对象的属性对应关系以及在<code>collection</code>中编写关联查询的集合内类型相关属性对应关系，当然这个关系哪怕只写一个Mybatis也可以自动推断其他的，不过建议还是写完整一点</p>
<h5>嵌套查询</h5>
<p>此外也可以用 <code>select</code> 嵌套查询来解决，操作是同样的</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectStuById"</span> resultMap<span class="token operator">=</span><span class="token string">"test"</span> parameterType<span class="token operator">=</span><span class="token string">"_int"</span><span class="token operator">&gt;</span>
    select <span class="token operator">*</span> from student where sid <span class="token operator">=</span> #<span class="token punctuation">{</span>sid<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectBookBySid"</span> resultType<span class="token operator">=</span><span class="token string">"com.test.entity.Book"</span><span class="token operator">&gt;</span>
    select <span class="token operator">*</span> from book where uid <span class="token operator">=</span> #<span class="token punctuation">{</span>sid<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"test"</span> type<span class="token operator">=</span><span class="token string">"Student"</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"sid"</span> property<span class="token operator">=</span><span class="token string">"sid"</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"name"</span> property<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"sex"</span> property<span class="token operator">=</span><span class="token string">"sex"</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>collection property<span class="token operator">=</span><span class="token string">"books"</span> select<span class="token operator">=</span><span class="token string">"selectBookBySid"</span> column<span class="token operator">=</span><span class="token string">"sid"</span> ofType<span class="token operator">=</span><span class="token string">"com.test.entity.Book"</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">&gt;</span>
</code></pre></div><h4>多对一查询 (多 - 多)</h4>
<p>了解了一对多，那么多对一又该如何查询</p>
<p>比如每个用户现在都有一个小组，但是他们目前都是在同一个小组中，此时我们查询所有用户信息的时候，需要自动携带他们的小组：</p>
<figure><figcaption>alt text</figcaption></figure>
<p>这里我们需要修改一下user表来记录每一个用户所属的小组id，这里使用gid作为分组id的逻辑外键</p>
<p>接着是实体类设计：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Group</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token class-name">Group</span> group<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>接着就是编写SQL映射，实际上这里跟我们之前的一对一非常类似，我们只需要让查询出来的每一个用户都左连接分组信息即可，这样<code>Mybatis</code>就可以通过<code>association</code>来自动处理了：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span> groups<span class="token punctuation">.</span>name <span class="token keyword">as</span> gname <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token identifier"><span class="token punctuation">`</span>groups<span class="token punctuation">`</span></span> <span class="token keyword">on</span> <span class="token keyword">user</span><span class="token punctuation">.</span>gid <span class="token operator">=</span> groups<span class="token punctuation">.</span>id
</code></pre></div><p>注意SQL语句中一些字段存在歧义，我们需要手动为其起个别名，接着就是XML编写了：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAllUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    select *, groups.name as gname from user left join `groups` on user.gid = groups.id
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这样我们就可以成功实现多对一查询了，这与之前的一对一比较类似。</p>
<p>当然，也可以嵌套<code>select</code></p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    select * from student
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGroup<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.Group<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGroup<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.Group<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    select * from `group` where gid = #{gid}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>javaweb - Mybatis6</title>
      <link>http://ekkosonya.cn/code/javaweb/javaweb16.html</link>
      <guid>http://ekkosonya.cn/code/javaweb/javaweb16.html</guid>
      <source url="http://ekkosonya.cn/rss.xml">javaweb - Mybatis6</source>
      <description>Mybatis详解4 DML 操作 前面我们介绍了查询操作，我们接着来看修改相关操作(增、删、改)。 Mybatis为我们的DML操作提供了几个预设方法： 可以看到，这些方法默认情况下返回的结果都是int类型的，这与我们之前JDBC中是一样的，它代表执行SQL后受影响的行数。 插入 insert标签 我们来尝试编写一个插入操作 Mybatis为我们提供...</description>
      <category>code</category>
      <pubDate>Sun, 15 Jun 2025 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Mybatis详解4</h2>
<h3>DML 操作</h3>
<p>前面我们介绍了<strong>查询操作</strong>，我们接着来看修改相关操作(<strong>增、删、改</strong>)。</p>
<p><code>Mybatis</code>为我们的<code>DML</code>操作提供了几个预设方法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>可以看到，这些方法默认情况下返回的结果都是<code>int</code>类型的，这与我们之前JDBC中是一样的，它代表<strong>执行<code>SQL</code>后受影响的行数</strong>。</p>
<h4>插入 <code>insert</code>标签</h4>
<p>我们来尝试编写一个插入操作</p>
<p><code>Mybatis</code>为我们提供的插入操作非常快捷，我们可以直接让一个<code>User</code>对象作为参数传入</p>
<p>即可在配置中直接解析其属性到<code>insert</code>语句中，这里需要用到<code>insert</code>标签：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    insert into user (name, age) values (#{name}, #{age})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这里我们将<code>parameterType</code>类型设置为我们的实体类型，这样下面在使用<code>#{name}</code>时<code>Mybatis</code>就会自动调用类中对应的Get方法来获取结果</p>
<p>不过，即使这里不指定具体类型，<code>Mybatis</code>也能完成自动推断，非常智能(<strong>参数名称要与实体类参数对应</strong>)。</p>
<p>和之前一样，我们也可以直接将其绑定到一个接口上：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>注意返回类型必须是<code>int</code>或是<code>long</code>这类数字类型</strong>，表示生效的行数，然后这里我们传入的参数直接写成对应的类型即可。</p>
<h5>自增主键ID <code>useGeneratedKeys</code></h5>
<p>有些时候，我们的数据插入后使用的是一个自增主键ID，那么这个自增的主键值我们该如何获取到呢？</p>
<p>Mybatis为我们提供了一些参数用于处理这种问题：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    insert into user (name, age) values (#{name}, #{age})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这里<code>useGeneratedKeys</code>设置为<code>true</code>表示我们希望获取数据库生成的键</p>
<p><code>keyProperty</code>设置为User类中的需要获取自增结果的属性名，<code>keyColumn</code>为数据库中自增的字段名称</p>
<p>但是一般情况下不需要手动设置，但是某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，必须设置。</p>
<p>这样我们就可以获取到自增后的值了，接着我们什么都不需要做，Mybatis会在查询完后自动为我们的User对象赋值：</p>
<h4>修改 <code>update</code>标签</h4>
<p>我们接着来看修改操作，比如要根据ID修改用户的年龄：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setUserAgeById<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    update user set age = #{age} where id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">setUserAgeById</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这里的参数我们依然选择使用<code>User</code>，和之前<code>insert</code>一样，<code>Mybatis</code>会从传入的对象中自动获取需要的参数，当然我们也可以将此方法设计为两个参数的形式：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">setUserAgeById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4>删除</h4>
<p>删除操作则更为简单，假设我们要根据用户的id进行数据的删除：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUserById<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    delete from user where id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这些操作相比查询操作来说非常简单就可以实现，这里就不多做介绍了。</p>
<h3>事务操作</h3>
<p>我们可以在获取<code>SqlSession</code>关闭自动提交来开启事务模式，和JDBC其实都差不多</p>
<p>在创建<code>SqlSession</code>的时候不填写参数默认使用的就是事务模式：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre></div><p>我们发现，在关闭自动提交后，我们的内容是没有进入到数据库的：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TestMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//虽然日志中已经提示生效1行，但是并没有提交</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>SqlSession</code>接口中为我们提供了事务操作相关的方法，这里我们可以直接尝试进行事务的提交：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TestMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//通过SqlSession进行事务提交</span>
</code></pre></div><p>注意，如果我们在提交事务之前，没有进行任何的DML操作，也就是删除、更新、插入的其中任意一种操作，那么调用<code>commit</code>方法则不会进行提交，当然如果仍然需要提交的话也可以使用<code>commit(true)</code>来强制提交。</p>
<p>我们接着来测试一下回滚操作：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TestMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//此时由于数据被删除，无法查到</span>
session<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//进行回滚操作</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//之前被删除的数据回来了</span>
</code></pre></div><p>事务相关操作非常简单，这里就暂时先介绍这么多。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>