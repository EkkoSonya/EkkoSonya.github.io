"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[2586],{3671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},200:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>r,data:()=>d});var t=s(7847);const e=s.p+"assets/img/2.a7d6846e.png",p=s.p+"assets/img/3.7b234ab4.png",o=s.p+"assets/img/4.0428c4d3.png",c=s.p+"assets/img/5.6beb56ec.png",i=s.p+"assets/img/6.e4f734bf.png",l=[(0,t.Fv)('<h2 id="数据库框架整合3" tabindex="-1"><a class="header-anchor" href="#数据库框架整合3"><span>数据库框架整合3</span></a></h2><h3 id="mybatis事务管理" tabindex="-1"><a class="header-anchor" href="#mybatis事务管理"><span>Mybatis事务管理</span></a></h3><p>通过将对应的Bean类型注册到容器中，就能更加方便的去使用Mapper</p><p>接着来看Spring的事务控制。</p><h4 id="事务机制回顾" tabindex="-1"><a class="header-anchor" href="#事务机制回顾"><span>事务机制回顾</span></a></h4><p>回顾一下事务机制。首先事务遵循一个<code>ACID</code>原则：</p><ul><li>原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</li><li>一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。类比银行转账，从一个账号扣款，另一个账号增款，必须保证总金额不变。</li><li>隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。类比多个人同时编辑同一文档，每个人看到的结果都是独立的，不会受其他人的影响，不过难免会存在冲突。</li><li>持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。类比写入硬盘的文件，即使关机重启，文件仍然存在。</li></ul><p>简单来说，事务就是要么完成，要么就啥都别做！并且不同的事务之间相互隔离，互不干扰。</p><h4 id="隔离机制" tabindex="-1"><a class="header-anchor" href="#隔离机制"><span>隔离机制</span></a></h4><p>那么我们接着来深入了解一下事务的<strong>隔离机制</strong></p><blockquote><p>个人理解：隔离机制就是规定不同事务来接触数据库时，所获得的数据信息的规则 当多个事务（Transaction）同时执行时，数据库需要通过一定的规则和策略， 保证这些事务之间不会互相干扰，从而确保数据的一致性和正确性。</p></blockquote><p>事务之间是相互隔离互不干扰的，那么如果出现了下面的情况，会怎么样呢：</p><blockquote><p>当两个事务同时在执行，并且同时在操作同一个数据，这样很容易出现并发相关的问题，比如一个事务先读取了某条数据，而另一个事务此时修改了此数据，当前一个事务紧接着再次读取时，会导致和前一次读取的数据不一致，这就是一种典型的数据虚读现象。</p></blockquote><p>因此，为了解决这些问题，事务之间实际上是存在一些<strong>隔离级别</strong>的：</p><ul><li>ISOLATION_READ_UNCOMMITTED（读未提交）：其他事务会读取当前事务尚未更改的提交（相当于读取的是这个事务暂时缓存的内容，并不是数据库中的内容）</li><li>ISOLATION_READ_COMMITTED（读已提交）：其他事务会读取当前事务已经提交的数据（也就是直接读取数据库中已经发生更改的内容）</li><li>ISOLATION_REPEATABLE_READ（可重复读）：其他事务会读取当前事务已经提交的数据并且其他事务执行过程中<strong>不允许再进行数据修改</strong>（注意这里仅仅是不允许修改数据）</li><li>ISOLATION_SERIALIZABLE（串行化）：它完全服从ACID原则，一个事务必须等待其他事务结束之后才能开始执行，相当于挨个执行，效率很低</li></ul><p>我们依次来看看，不同的隔离级别会导致什么问题。</p><h5 id="读未提交" tabindex="-1"><a class="header-anchor" href="#读未提交"><span><code>读未提交</code></span></a></h5><p>首先是<code>读未提交</code>级别，此级别属于最低级别，相当于各个事务共享一个缓存区域，任何事务的操作都在这里进行。</p><p>那么它会导致以下问题 (脏读)：</p><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>也就是说，事务A最后得到的实际上是一个毫无意义的数据（事务B已经回滚了）</p><p>我们称此数据为&quot;脏数据&quot;，这种现象称为<strong>脏读</strong></p><h5 id="读已提交" tabindex="-1"><a class="header-anchor" href="#读已提交"><span><code>读已提交</code></span></a></h5><p>我们接着来看<code>读已提交</code>级别，事务<strong>只能读取其他事务已经提交的内容</strong>，相当于直接从数据中读取数据，这样就可以避免<strong>脏读</strong>问题了，但是它还是存在以下问题：</p><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>这正是我们前面例子中提到的问题，虽然它避免了脏读问题，但是如果事件B修改并提交了数据，那么实际上事务A之前读取到的数据依然不是最新的数据，直接导致两次读取的数据不一致</p><p>这种现象称为<strong>虚读</strong>也可以称为<strong>不可重复读</strong></p><h5 id="可重复读" tabindex="-1"><a class="header-anchor" href="#可重复读"><span><code>可重复读</code></span></a></h5><p>因此，下一个隔离级别<code>可重复读</code>就能够解决这样的问题（MySQL的默认隔离级别）</p><p>它规定<strong>在其他事务执行时，不允许修改数据</strong>，这样，就可以有效地避免不可重复读的问题</p><p>但是这里仅仅是禁止了事务执行过程中的UPDATE操作，但是它并没有禁止<code>INSERT</code>这类操作，因此，如果事务A执行过程中事务B插入了新的数据，那么A这时是毫不知情的，比如：</p><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>两个人同时报名一个活动，两个报名的事务同时在进行，但是他们一开始读取到的人数都是5，而这时，它们都会认为报名成功后人数应该变成6，而正常情况下应该是7</p><p>因此这个时候就发生了数据的<strong>幻读</strong>现象。</p><h5 id="串行化" tabindex="-1"><a class="header-anchor" href="#串行化"><span><code>串行化</code></span></a></h5><p>因此，要解决这种问题，只能使用最后一种隔离级别<code>串行化</code>来实现了，每个事务不能同时进行，直接避免所有并发问题，简单粗暴，但是效率爆减，并不推荐。</p><p>最后总结三种情况：</p><ul><li>脏读：读取到了被回滚的数据，它毫无意义。</li><li>虚读（不可重复读）：由于其他事务更新数据，两次读取的数据不一致。</li><li>幻读：由于其他事务执行插入删除操作，而又无法感知到表中记录条数发生变化，当下次再读取时会莫名其妙多出或缺失数据，就像产生幻觉一样。</li></ul><p>（对于虚读和幻读的区分：虚读是某个数据前后读取不一致，幻读是整个表的记录数量前后读取不一致</p><p>最后这张图，请务必记在你的脑海，记在你的心中：</p><figure><img src="'+c+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="mybatis事务封装介绍" tabindex="-1"><a class="header-anchor" href="#mybatis事务封装介绍"><span>Mybatis事务封装介绍</span></a></h4><p>Mybatis对于数据库的事务管理，也有着相应的封装。</p><p>一个事务无非就是创建、提交、回滚、关闭，因此这些操作被Mybatis抽象为一个接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transaction</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Integer</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于此接口的实现，MyBatis的事务管理分为两种形式：</p><ol><li>使用<strong>JDBC</strong>的事务管理机制：即利用对应数据库的驱动生成的<code>Connection</code>对象完成对事务的提交（commit()）、回滚（rollback()）、关闭（close()）等，对应的实现类为<code>JdbcTransaction</code></li><li>使用<strong>MANAGED</strong>的事务管理机制：这种机制MyBatis自身不会去实现事务管理，而是让程序的容器（比如Spring）来实现对事务的管理，对应的实现类为<code>ManagedTransaction</code></li><li>如果需要自定义，那么得实现<code>org.apache.ibatis.transaction.Transaction</code>接口，然后在<code>type</code>属性中指定其类名。使用自定义的事务管理器可以根据具体需求来实现一些特定的事务管理行为。</li></ol><h4 id="transaction接口实现1-——-jdbctransaction" tabindex="-1"><a class="header-anchor" href="#transaction接口实现1-——-jdbctransaction"><span><code>Transaction</code>接口实现1 —— <code>JdbcTransaction</code></span></a></h4><p>而我们之前一直使用的其实就是JDBC的事务，相当于直接使用<code>Connection</code>对象（之前JavaWeb阶段已经讲解过了）在进行事务操作，并没有额外的管理机制，对应的配置为：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么我们来看看<code>JdbcTransaction</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTransaction</span> <span class="token keyword">implements</span> <span class="token class-name">Transaction</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">JdbcTransaction</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">protected</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">;</span>\n    <span class="token keyword">protected</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>\n    <span class="token keyword">protected</span> <span class="token class-name">TransactionIsolationLevel</span> level<span class="token punctuation">;</span>\n    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">JdbcTransaction</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> ds<span class="token punctuation">,</span> <span class="token class-name">TransactionIsolationLevel</span> desiredLevel<span class="token punctuation">,</span> <span class="token keyword">boolean</span> desiredAutoCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 数据源</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> ds<span class="token punctuation">;</span>\n        <span class="token comment">// 事务隔离级别，上面已经提到过了</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> desiredLevel<span class="token punctuation">;</span>\n        <span class="token comment">// 是否自动提交</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>autoCommit <span class="token operator">=</span> desiredAutoCommit<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 也可以直接给个Connection对象</span>\n   <span class="token keyword">public</span> <span class="token class-name">JdbcTransaction</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>connection <span class="token operator">=</span> connection<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 没有就通过数据源新开一个Connection</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 连接已经创建并且没开启自动提交才可以使用</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Committing JDBC Connection [&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connection <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 实际上使用的是数据库驱动提供的Connection对象进行事务操作</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于<code>JdbcTransaction</code>只是为数据库驱动提供的<code>Connection</code>对象套了层壳，所有的事务操作实际上是直接调用<code>Connection</code>对象。</p><p>那么我们接着来看<code>ManagedTransaction</code>的源码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManagedTransaction</span> <span class="token keyword">implements</span> <span class="token class-name">Transaction</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，大体内容和<code>JdbcTransaction</code>差不多，但是它并没有<strong>实现任何的事务操作</strong>。也就是说，它希望将实现交给其他的管理框架来完成，而Spring就为Mybatis提供了一个非常好的事务管理实现。</p><h3 id="spring事务管理" tabindex="-1"><a class="header-anchor" href="#spring事务管理"><span>Spring事务管理</span></a></h3><p>现在我们来学习一下Spring提供的事务管理（Spring事务管理分为<strong>编程式事务</strong>和<strong>声明式事</strong>务，但是编程式事务过于复杂并且具有高度耦合性，违背了Spring框架的设计初衷，因此这里只讲解声明式事务）</p><p>声明式事务是基于AOP实现的。</p><p>使用声明式事务非常简单</p><p>只需要在配置类添加<code>@EnableTransactionManagement</code>注解即可</p><p>这样就可以开启Spring的事务支持了。</p><p>接着，我们<strong>只需要把一个事务要做的所有事情</strong>封装到<code>Service</code>层的一个方法中即可</p><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h4><h5 id="_1-事务管理器-transactionmanager" tabindex="-1"><a class="header-anchor" href="#_1-事务管理器-transactionmanager"><span>1. 事务管理器 <code>TransactionManager</code></span></a></h5><p>首先需要在配置文件中注册一个新的Bean，事务需要执行必须有一个<strong>事务管理器</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;org.example&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;org.example.mapper&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@EnableTransactionManagement</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfiguration</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">TransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HikariDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/study&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactoryBean</span> <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//直接参数得到Bean对象</span>\n        <span class="token class-name">SqlSessionFactoryBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-对应示例操作" tabindex="-1"><a class="header-anchor" href="#_2-对应示例操作"><span>2. 对应示例操作</span></a></h5><p>接着我们来编写一个简单的Mapper操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into student(name, sex) values(&#39;测试&#39;, &#39;男&#39;)&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">void</span> <span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样会向数据库中插入一条新的学生信息</p><p>接着，假设我们这里有一个业务需要连续插入两条学生信息</p><p>首先编写业务层的接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>\n    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，我们再来编写业务层的实现，我们可以直接将其注册为<code>Bean</code>，交给Spring来进行管理</p><p>这样就可以自动将Mapper注入到类中了，并且可以支持事务：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TestService</span><span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Resource</span>\n    <span class="token class-name">TestMapper</span> mapper<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Transactional</span>   \n    <span class="token comment">// 此注解表示事务，之后执行的所有方法都会在同一个事务中执行</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        mapper<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;我是测试异常！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mapper<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需在方法上添加<code>@Transactional</code>注解，即可表示此方法执行的是一个事务操作</p><p>在调用此方法时，Spring会通过AOP机制为其进行增强，一旦发现异常，事务会自动回滚。</p><h5 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试"><span>3. 测试</span></a></h5><p>最后我们来调用一下此方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;项目正在启动...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">TestConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">TestService</span> service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">TestService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        service<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的结果是出现错误：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>12月 17, 2022 4:09:00 下午 com.zaxxer.hikari.HikariDataSource getConnection\n信息: HikariPool-1 - Start completed.\nException in thread &quot;main&quot; java.lang.RuntimeException: 我是测试异常！\n    at org.example.service.TestServiceImpl.test(TestServiceImpl.java:17)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.base/java.lang.reflect.Method.invoke(Method.java:568)\n    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，整个栈追踪信息中包含了大量aop包下的内容，也就印证了它确实是通过AOP实现的</p><p>结果显而易见，第一次的插入操作确实被回滚了，数据库中没有任何新增的内容。</p><h4 id="transactional" tabindex="-1"><a class="header-anchor" href="#transactional"><span><code>@Transactional</code></span></a></h4><p>我们接着来研究一下<code>@Transactional</code>注解的一些参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Inherited</span>\n<span class="token annotation punctuation">@Documented</span>\n<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Transactional</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;transactionManager&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Propagation</span> <span class="token function">propagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Isolation</span> <span class="token function">isolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">int</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> <span class="token function">timeoutString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">boolean</span> <span class="token function">readOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rollbackFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rollbackForClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">noRollbackFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">noRollbackForClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几个比较关键的属性：</p><ul><li><code>transactionManager</code>：指定事务管理器</li><li><code>propagation</code>：事务传播规则，一个事务可以包括N个子事务</li><li><code>isolation</code>：事务隔离级别，不多说了</li><li><code>timeout</code>：事务超时时间</li><li><code>readOnly</code>：是否为只读事务，不同的数据库会根据只读属性进行优化，比如MySQL一旦声明事务为只读，那么久不允许增删改操作了。</li><li><code>rollbackFor</code>和<code>noRollbackFo</code>r：发生指定异常时回滚或是不回滚，默认发生任何异常都回滚。</li></ul><h4 id="事务传播规则" tabindex="-1"><a class="header-anchor" href="#事务传播规则"><span>事务传播规则</span></a></h4><p>除了事务的传播规则，其他的内容其实已经给大家讲解过了，那么我们就来看看事务的传播。</p><p>事务传播一共有七种级别：</p><figure><img src="'+i+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h5 id="propagation-required级别" tabindex="-1"><a class="header-anchor" href="#propagation-required级别"><span><code>PROPAGATION_REQUIRED</code>级别</span></a></h5><p>Spring默认的传播级别是<code>PROPAGATION_REQUIRED</code></p><p>现在我们的<code>Service</code>类中一共存在两个事务，而一个事务方法包含了另一个事务方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TestService</span><span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Resource</span>\n    <span class="token class-name">TestMapper</span> mapper<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Transactional</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n        <span class="token comment">// 包含另一个事务</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;我是测试异常！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n        <span class="token comment">// 发生异常时，会回滚另一个事务吗？</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Transactional</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        mapper<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们得到结果，<strong>另一个事务也被回滚了</strong></p><p>也就是说，相当于另一个事务直接加入到此事务中，也就是表中所描述的那样。</p><p>如果单独执行<code>test2()</code>则会开启一个新的事务，而执行<code>test()</code>则会直接让内部的<code>test2()</code>加入到当前事务中。</p><h5 id="propagation-supprots级别" tabindex="-1"><a class="header-anchor" href="#propagation-supprots级别"><span><code>PROPAGATION_SUPPROTS</code>级别</span></a></h5><p>现在我们将<code>test2()</code>的传播级别设定为<code>SUPPORTS</code></p><p>那么这时如果<strong>单独调用</strong><code>test2()</code>方法，并<strong>不会以事务的方式执行</strong>，当发生异常时，虽然依然存在AOP增强，但是<strong>不会进行回滚操作</strong></p><p>而现在再调用<code>test()</code>方法，才会以事务的方式执行，即只有别的事务调用该方法，才会作为事务的一部分：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">SUPPORTS</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    mapper<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;我是测试异常！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="propagation-mandatory级别" tabindex="-1"><a class="header-anchor" href="#propagation-mandatory级别"><span><code>PROPAGATION_MANDATORY</code>级别</span></a></h5><p>我们接着来看<code>MANDATORY</code>，它非常严格，如果当前方法并没有在任何事务中进行，会直接出现异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">MANDATORY</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    mapper<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;我是测试异常！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接运行<code>test2()</code>方法，报错如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Exception in thread &quot;main&quot; org.springframework.transaction.IllegalTransactionStateException: No existing transaction found for transaction marked with propagation &#39;mandatory&#39;\n    at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:362)\n    at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:595)\n    at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:382)\n    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)\n    at com.sun.proxy.$Proxy29.test2(Unknown Source)\n    at com.test.Main.main(Main.java:17)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="其他级别" tabindex="-1"><a class="header-anchor" href="#其他级别"><span>其他级别</span></a></h5><p><code>NESTED</code>级别表示如果存在外层事务，则此方法单独创建一个子事务，回滚只会影响到此子事务，实际上就是利用创建Savepoint，然后回滚到此保存点实现的。</p><p><code>NEVER</code>级别表示此方法不应该加入到任何事务中，其余类型适用于同时操作多数据源情况下的分布式事务管理，这里暂时不做介绍。</p>',115)],u={},r=(0,s(3671).A)(u,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,l)}]]),d=JSON.parse('{"path":"/code/java_ssm/Spring/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/spring12.html","title":"Javassm - 数据库框架整合2","lang":"zh-CN","frontmatter":{"title":"Javassm - 数据库框架整合2","date":"2025-08-21T00:00:00.000Z","category":["code"],"tag":["javassm","Spring","SpringEL"],"order":-0.599,"description":"数据库框架整合3 Mybatis事务管理 通过将对应的Bean类型注册到容器中，就能更加方便的去使用Mapper 接着来看Spring的事务控制。 事务机制回顾 回顾一下事务机制。首先事务遵循一个ACID原则： 原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。 一致性（Consis...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_ssm/Spring/4-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/spring12.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - 数据库框架整合2"}],["meta",{"property":"og:description","content":"数据库框架整合3 Mybatis事务管理 通过将对应的Bean类型注册到容器中，就能更加方便的去使用Mapper 接着来看Spring的事务控制。 事务机制回顾 回顾一下事务机制。首先事务遵循一个ACID原则： 原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。 一致性（Consis..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-21T17:33:14.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javassm"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"SpringEL"}],["meta",{"property":"article:published_time","content":"2025-08-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-21T17:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - 数据库框架整合2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-21T17:33:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"数据库框架整合3","slug":"数据库框架整合3","link":"#数据库框架整合3","children":[{"level":3,"title":"Mybatis事务管理","slug":"mybatis事务管理","link":"#mybatis事务管理","children":[{"level":4,"title":"事务机制回顾","slug":"事务机制回顾","link":"#事务机制回顾","children":[]},{"level":4,"title":"隔离机制","slug":"隔离机制","link":"#隔离机制","children":[{"level":5,"title":"读未提交","slug":"读未提交","link":"#读未提交","children":[]},{"level":5,"title":"读已提交","slug":"读已提交","link":"#读已提交","children":[]},{"level":5,"title":"可重复读","slug":"可重复读","link":"#可重复读","children":[]},{"level":5,"title":"串行化","slug":"串行化","link":"#串行化","children":[]}]},{"level":4,"title":"Mybatis事务封装介绍","slug":"mybatis事务封装介绍","link":"#mybatis事务封装介绍","children":[]},{"level":4,"title":"Transaction接口实现1 —— JdbcTransaction","slug":"transaction接口实现1-——-jdbctransaction","link":"#transaction接口实现1-——-jdbctransaction","children":[]}]},{"level":3,"title":"Spring事务管理","slug":"spring事务管理","link":"#spring事务管理","children":[{"level":4,"title":"例子","slug":"例子","link":"#例子","children":[{"level":5,"title":"1. 事务管理器 TransactionManager","slug":"_1-事务管理器-transactionmanager","link":"#_1-事务管理器-transactionmanager","children":[]},{"level":5,"title":"2. 对应示例操作","slug":"_2-对应示例操作","link":"#_2-对应示例操作","children":[]},{"level":5,"title":"3. 测试","slug":"_3-测试","link":"#_3-测试","children":[]}]},{"level":4,"title":"@Transactional","slug":"transactional","link":"#transactional","children":[]},{"level":4,"title":"事务传播规则","slug":"事务传播规则","link":"#事务传播规则","children":[{"level":5,"title":"PROPAGATION_REQUIRED级别","slug":"propagation-required级别","link":"#propagation-required级别","children":[]},{"level":5,"title":"PROPAGATION_SUPPROTS级别","slug":"propagation-supprots级别","link":"#propagation-supprots级别","children":[]},{"level":5,"title":"PROPAGATION_MANDATORY级别","slug":"propagation-mandatory级别","link":"#propagation-mandatory级别","children":[]},{"level":5,"title":"其他级别","slug":"其他级别","link":"#其他级别","children":[]}]}]}]}],"git":{"createdTime":1755797594000,"updatedTime":1755797594000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":13.07,"words":3921},"filePathRelative":"code/java_ssm/Spring/4-数据库框架整合/spring12.md","localizedDate":"2025年8月21日","excerpt":"<h2>数据库框架整合3</h2>\\n<h3>Mybatis事务管理</h3>\\n<p>通过将对应的Bean类型注册到容器中，就能更加方便的去使用Mapper</p>\\n<p>接着来看Spring的事务控制。</p>\\n<h4>事务机制回顾</h4>\\n<p>回顾一下事务机制。首先事务遵循一个<code>ACID</code>原则：</p>\\n<ul>\\n<li>原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</li>\\n<li>一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。类比银行转账，从一个账号扣款，另一个账号增款，必须保证总金额不变。</li>\\n<li>隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。类比多个人同时编辑同一文档，每个人看到的结果都是独立的，不会受其他人的影响，不过难免会存在冲突。</li>\\n<li>持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。类比写入硬盘的文件，即使关机重启，文件仍然存在。</li>\\n</ul>","autoDesc":true}')}}]);