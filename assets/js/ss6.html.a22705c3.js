"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[6826],{3671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},6728:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var t=a(7847);const e=[(0,t.Fv)('<h2 id="授权" tabindex="-1"><a class="header-anchor" href="#授权"><span>授权</span></a></h2><p>用户登录后，可能会根据用户当前是身份进行角色划分，比如我们最常用的QQ，一个QQ群里面，有群主、管理员和普通群成员三种角色</p><p>其中群主具有最高权限，群主可以管理整个群的任何板块，并且具有解散和升级群的资格，而管理员只有群主的一部分权限，只能用于日常管理，普通群成员则只能进行最基本的聊天操作。</p><p>对于我们来说，用户的一个操作实际上就是在访问我们提供的<code>接口</code> (编写的对应访问路径的Servlet)</p><p>比如登陆，就需要调用<code>/login</code>接口，退出登陆就要调用/<code>logout</code>接口，而我们之前的图书管理系统中，新增图书、删除图书，所有的操作都有着对应的Servlet来进行处理。</p><p>因此，从我们开发者的角度来说，决定用户能否使用某个功能，<strong>只需要决定用户是否能够访问对应的Servlet即可</strong>。</p><p>我们可以大致像下面这样进行划分：</p><ul><li>群主：<code>/login</code>、<code>/logout</code>、<code>/chat</code>、<code>/edit</code>、<code>/delete</code>、<code>/upgrade</code></li><li>管理员：<code>/login</code>、<code>/logout</code>、<code>/chat</code>、<code>/edit</code></li><li>普通群成员：<code>/login</code>、<code>/logout</code>、<code>/chat</code></li></ul><p>也就是说，我们需要做的就是指定哪些请求可以由哪些用户发起。</p><p>SpringSecurity为我们提供了两种授权方式：</p><ul><li>基于权限的授权：只要拥有某权限的用户，就可以访问某个路径。</li><li>基于角色的授权：根据用户属于哪个角色来决定是否可以访问某个路径。</li></ul><p>两者只是概念上的不同，实际上使用起来效果差不多。这里我们就先演示以角色方式来进行授权。</p><h3 id="基于角色授权" tabindex="-1"><a class="header-anchor" href="#基于角色授权"><span>基于角色授权</span></a></h3><p>现在我们希望创建两个角色，普通用户和管理员，普通用户只能访问index页面，而管理员可以访问任何页面。</p><p>首先我们需要对数据库中的角色表进行一些修改，添加一个用户角色字段，并创建一个新的用户，Test用户的角色为user，而Admin用户的角色为admin。</p><p>接着我们需要配置SpringSecurity，决定哪些角色可以访问哪些页面：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span>auth <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">//静态资源依然全部可以访问</span>\n    auth<span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/static/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//只有具有以下角色的用户才能访问路径&quot;/&quot;</span>\n    auth<span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAnyRole</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//其他所有路径必须角色为admin才能访问</span>\n    auth<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们需要稍微修改一下验证逻辑，我们在数据库中的用户表上添加一个新的字段，用于表示角色：</p><figure><img src="https://s2.loli.net/2023/07/04/1pkfGS9LrsPtjFx.png" alt="image-20230704222733082" tabindex="0" loading="lazy"><figcaption>image-20230704222733082</figcaption></figure><p>修改一下对应的实体类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> role<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们在查询用户时，需要添加其对应的角色：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Account</span> account <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>account <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;用户名或密码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">User</span>\n            <span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//添加角色，一个用户可以有一个或多个角色</span>\n            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以了，我们重启服务器登录看看：</p><figure><img src="https://s2.loli.net/2023/07/03/Zns4Vwb7zPLc6SQ.png" alt="image-20230703182321093" tabindex="0" loading="lazy"><figcaption>image-20230703182321093</figcaption></figure><p>目前依然是可以正常登录的，但是我们随便访问一个其他的页面，就会被拦截并自动退回到登录界面：</p><figure><img src="https://s2.loli.net/2023/07/04/8aoGrM9mpYt6Xie.png" alt="image-20230704223248124" tabindex="0" loading="lazy"><figcaption>image-20230704223248124</figcaption></figure><p>这是因为我们前面配置的是user角色，那么这个角色只能访问首页，其他的都不行，所以就会被自动拦截掉了。现在我们可以到数据库中对这个用户的角色进行修改，看看修改后是否能够访问到其他页面：</p><figure><img src="https://s2.loli.net/2023/07/04/l9YkDaRJdtrmSZj.png" alt="image-20230704223503682" tabindex="0" loading="lazy"><figcaption>image-20230704223503682</figcaption></figure><p>这样就可以访问其他页面不会被拦截了，不过因为我们没配置这个路径，所以出来的是404页面。</p><p>通过使用角色控制页面的访问，我们就可以让某些用户只能访问部分页面。</p><h3 id="基于权限授权" tabindex="-1"><a class="header-anchor" href="#基于权限授权"><span>基于权限授权</span></a></h3><p>基于权限的授权与角色类似，需要以<code>hasAnyAuthority</code>或<code>hasAuthority</code>进行判断：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span>auth <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">//静态资源依然全部可以访问</span>\n    auth<span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/static/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//基于权限和基于角色其实差别并不大，使用方式是相同的</span>\n    auth<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAnyAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;page:index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上权限跟角色相比只是粒度更细，由于使用方式差不多，这里不多做阐述。</p><h3 id="使用注解权限判断" tabindex="-1"><a class="header-anchor" href="#使用注解权限判断"><span>使用注解权限判断</span></a></h3><h4 id="enablemethodsecurity" tabindex="-1"><a class="header-anchor" href="#enablemethodsecurity"><span><code>@EnableMethodSecurity</code></span></a></h4><p>除了直接配置以外，我们还可以以注解形式直接配置</p><p>首先需要在配置类(注意这里是在Mvc的配置类上添加，因为这里只针对Controller进行过滤，所有的Controller是由Mvc配置类进行注册的，如果需要为Service或其他Bean也启用权限判断，则需要在Security的配置类上添加)上开启：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableWebSecurity</span>\n<span class="token annotation punctuation">@EnableMethodSecurity</span>   <span class="token comment">//开启方法安全校验</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfiguration</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们就可以在我们想要进行权限校验的方法上添加注解了：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">&quot;hasRole(&#39;user&#39;)&quot;</span><span class="token punctuation">)</span>  \n    <span class="token comment">//直接使用hasRole方法判断是否包含某个角色</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="preauthorize注解" tabindex="-1"><a class="header-anchor" href="#preauthorize注解"><span><code>@PreAuthorize</code>注解</span></a></h4><p>通过添加<code>@PreAuthorize</code>注解，<strong>在执行之前判断判断权限</strong>，如果没有对应的权限或是对应的角色，将无法访问页面。</p><p>这里其实是使用的就是我们之前讲解的SpEL表达式，我们可以直接在这里使用权限判断相关的方法。</p><p>所有可以进行权限判断的方法在<code>SecurityExpressionRoot</code>类中有定义。</p><h4 id="postauthorize注解" tabindex="-1"><a class="header-anchor" href="#postauthorize注解"><span><code>@PostAuthorize</code>注解</span></a></h4><p>同样的还有<code>@PostAuthorize</code>注解，但是它是在<strong>方法执行之后再进行拦截</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostAuthorize</span><span class="token punctuation">(</span><span class="token string">&quot;hasRole(&#39;user&#39;)&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了Controller以外，只要是由Spring管理的Bean都可以<strong>使用注解形式来控制权限</strong>，我们可以在任意方法上添加这个注解</p><p>只要不具备表达式中指定的访问权限，那么就无法执行方法并且会返回403页面。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">&quot;hasAnyRole(&#39;user&#39;)&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;成功执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其它" tabindex="-1"><a class="header-anchor" href="#其它"><span>其它</span></a></h4><p>与具有相同功能的还有<code>@Secured</code>但是它不支持SpEL表达式的权限表示形式，并且需要添加&quot;ROLE_&quot;前缀，这里就不做演示了。</p><h4 id="prefilter和-postfilter-过滤" tabindex="-1"><a class="header-anchor" href="#prefilter和-postfilter-过滤"><span><code>@PreFilter</code>和<code>@PostFilter</code> 过滤</span></a></h4><p>我们还可以使用<code>@PreFilter</code>和<code>@PostFilter</code>对集合类型的参数或返回值进行过滤。</p><p>比如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PreFilter</span><span class="token punctuation">(</span><span class="token string">&quot;filterObject.equals(&#39;lbwnb&#39;)&quot;</span><span class="token punctuation">)</span>   \n<span class="token comment">//filterObject代表集合中每个元素，只要满足条件的元素才会留下</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;成功执行&quot;</span><span class="token operator">+</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;lbwnb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;yyds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    service<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与<code>@PreFilter</code>类似的<code>@PostFilter</code>这里就不做演示了，它用于处理返回值，使用方法是一样的。</p><p>当有多个集合时，需要使用<code>filterTarget</code>进行指定：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PreFilter</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;filterObject.equals(&#39;lbwnb&#39;)&quot;</span><span class="token punctuation">,</span> filterTarget <span class="token operator">=</span> <span class="token string">&quot;list2&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;成功执行&quot;</span><span class="token operator">+</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，有关Security的基本功能，我们就全部介绍完毕了，在后面的SpringBoot阶段，我们还会继续深入使用此框架，实现更多高级的功能。</p>',63)],p={},o=(0,a(3671).A)(p,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),c=JSON.parse('{"path":"/code/java_ssm/3-SpringSecurity/ss6.html","title":"Javassm - SpringSecurity6","lang":"zh-CN","frontmatter":{"title":"Javassm - SpringSecurity6","date":"2025-09-16T00:00:00.000Z","category":["code"],"tag":["javassm","Spring"],"order":-0.599,"description":"授权 用户登录后，可能会根据用户当前是身份进行角色划分，比如我们最常用的QQ，一个QQ群里面，有群主、管理员和普通群成员三种角色 其中群主具有最高权限，群主可以管理整个群的任何板块，并且具有解散和升级群的资格，而管理员只有群主的一部分权限，只能用于日常管理，普通群成员则只能进行最基本的聊天操作。 对于我们来说，用户的一个操作实际上就是在访问我们提供的接...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_ssm/3-SpringSecurity/ss6.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - SpringSecurity6"}],["meta",{"property":"og:description","content":"授权 用户登录后，可能会根据用户当前是身份进行角色划分，比如我们最常用的QQ，一个QQ群里面，有群主、管理员和普通群成员三种角色 其中群主具有最高权限，群主可以管理整个群的任何板块，并且具有解散和升级群的资格，而管理员只有群主的一部分权限，只能用于日常管理，普通群成员则只能进行最基本的聊天操作。 对于我们来说，用户的一个操作实际上就是在访问我们提供的接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2023/07/04/1pkfGS9LrsPtjFx.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-22T18:08:18.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Javassm - SpringSecurity6"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javassm"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2025-09-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-22T18:08:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - SpringSecurity6\\",\\"image\\":[\\"https://s2.loli.net/2023/07/04/1pkfGS9LrsPtjFx.png\\",\\"https://s2.loli.net/2023/07/03/Zns4Vwb7zPLc6SQ.png\\",\\"https://s2.loli.net/2023/07/04/8aoGrM9mpYt6Xie.png\\",\\"https://s2.loli.net/2023/07/04/l9YkDaRJdtrmSZj.png\\"],\\"datePublished\\":\\"2025-09-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-22T18:08:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"授权","slug":"授权","link":"#授权","children":[{"level":3,"title":"基于角色授权","slug":"基于角色授权","link":"#基于角色授权","children":[]},{"level":3,"title":"基于权限授权","slug":"基于权限授权","link":"#基于权限授权","children":[]},{"level":3,"title":"使用注解权限判断","slug":"使用注解权限判断","link":"#使用注解权限判断","children":[{"level":4,"title":"@EnableMethodSecurity","slug":"enablemethodsecurity","link":"#enablemethodsecurity","children":[]},{"level":4,"title":"@PreAuthorize注解","slug":"preauthorize注解","link":"#preauthorize注解","children":[]},{"level":4,"title":"@PostAuthorize注解","slug":"postauthorize注解","link":"#postauthorize注解","children":[]},{"level":4,"title":"其它","slug":"其它","link":"#其它","children":[]},{"level":4,"title":"@PreFilter和@PostFilter 过滤","slug":"prefilter和-postfilter-过滤","link":"#prefilter和-postfilter-过滤","children":[]}]}]}],"git":{"createdTime":1758564498000,"updatedTime":1758564498000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":6.08,"words":1823},"filePathRelative":"code/java_ssm/3-SpringSecurity/ss6.md","localizedDate":"2025年9月16日","excerpt":"<h2>授权</h2>\\n<p>用户登录后，可能会根据用户当前是身份进行角色划分，比如我们最常用的QQ，一个QQ群里面，有群主、管理员和普通群成员三种角色</p>\\n<p>其中群主具有最高权限，群主可以管理整个群的任何板块，并且具有解散和升级群的资格，而管理员只有群主的一部分权限，只能用于日常管理，普通群成员则只能进行最基本的聊天操作。</p>\\n<p>对于我们来说，用户的一个操作实际上就是在访问我们提供的<code>接口</code> (编写的对应访问路径的Servlet)</p>\\n<p>比如登陆，就需要调用<code>/login</code>接口，退出登陆就要调用/<code>logout</code>接口，而我们之前的图书管理系统中，新增图书、删除图书，所有的操作都有着对应的Servlet来进行处理。</p>","autoDesc":true}')}}]);