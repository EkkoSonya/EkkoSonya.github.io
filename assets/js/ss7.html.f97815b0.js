"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[4769],{3671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},7894:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>i,data:()=>l});var t=a(7847);const e=a.p+"assets/img/14.efed6dde.png",p=a.p+"assets/img/13.df76cab4.png",o=[(0,t.Fv)('<h2 id="内部机制探究" tabindex="-1"><a class="header-anchor" href="#内部机制探究"><span>内部机制探究</span></a></h2><h3 id="授权校验流程" tabindex="-1"><a class="header-anchor" href="#授权校验流程"><span>授权校验流程</span></a></h3><p>SpringSecurity的实现原理本质上是依靠N个Filter实现的，也就是一个完整的过滤链（注意这里是过滤器，不是拦截器）</p><blockquote><p>主要关注各类对应的 <code>init</code>, <code>doFilter</code></p></blockquote><h4 id="abstractsecuritywebapplicationinitializer" tabindex="-1"><a class="header-anchor" href="#abstractsecuritywebapplicationinitializer"><span><code>AbstractSecurityWebApplicationInitializer</code></span></a></h4><p>先从<code>AbstractSecurityWebApplicationInitializer</code>开始下手，也就是在 <code>init</code> 文件夹里的 <code>SecurityInitializer</code> 的父类</p><p>我们来看看它配置了什么：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//此方法会在启动时被调用</span>\n<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">beforeSpringSecurityFilterChain</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurationClasses <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">AnnotationConfigWebApplicationContext</span> rootAppContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        rootAppContext<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurationClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        servletContext<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span>rootAppContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enableHttpSessionEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        servletContext<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&quot;org.springframework.security.web.session.HttpSessionEventPublisher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    servletContext<span class="token punctuation">.</span><span class="token function">setSessionTrackingModes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSessionTrackingModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//重点在这里，这里插入了关键的FilterChain</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertSpringSecurityFilterChain</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">afterSpringSecurityFilterChain</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后转到 <code>insertSpringSecurityFilterChain</code> 实现</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertSpringSecurityFilterChain</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> filterName <span class="token operator">=</span> <span class="token string">&quot;springSecurityFilterChain&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">//创建了一个DelegatingFilterProxy对象，它本质上也是一个Filter，但是是多个Filter的集合</span>\n    <span class="token class-name">DelegatingFilterProxy</span> springSecurityFilterChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingFilterProxy</span><span class="token punctuation">(</span>filterName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> contextAttribute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContextAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>contextAttribute <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        springSecurityFilterChain<span class="token punctuation">.</span><span class="token function">setContextAttribute</span><span class="token punctuation">(</span>contextAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//通过ServletContext注册DelegatingFilterProxy这个Filter</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerFilter</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> filterName<span class="token punctuation">,</span> springSecurityFilterChain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要目的就是注册了一个 <code>DelegatingFilterProxy</code>, 它本质上也是一个Filter，但是是多个Filter的集合</p><h4 id="delegatingfilterproxy" tabindex="-1"><a class="header-anchor" href="#delegatingfilterproxy"><span><code>DelegatingFilterProxy</code></span></a></h4><p>我们接着来看看，<code>DelegatingFilterProxy</code>在做什么：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 这个是初始化方法，它由GenericFilterBean（父类）定义，在afterPropertiesSet方法中被调用</span>\n<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initFilterBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegateMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetBeanName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>targetBeanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token class-name">WebApplicationContext</span> wac <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//耐心点，套娃很正常</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initDelegate</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Filter</span> <span class="token function">initDelegate</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> wac<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> targetBeanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTargetBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>targetBeanName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;No target bean name set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//这里通过WebApplicationContext获取了一个Bean</span>\n    <span class="token class-name">Filter</span> delegate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Filter</span><span class="token punctuation">)</span>wac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>targetBeanName<span class="token punctuation">,</span> <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isTargetFilterLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        delegate<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFilterConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//返回Filter</span>\n    <span class="token keyword">return</span> delegate<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们需要添加一个断点来查看到底获取到了什么Bean。</p><p>通过断点调试，我们发现这里放回的对象是一个<code>FilterChainProxy</code>类型的，并且调用了它的初始化方法。</p><p>我们倒回去看，当Filter返回之后，<code>DelegatingFilterProxy</code>的一个成员变量<code>delegate</code>被赋值为得到的Filter，也就是FilterChainProxy对象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initDelegate</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="dofilter-操作" tabindex="-1"><a class="header-anchor" href="#dofilter-操作"><span><code>doFilter</code> 操作</span></a></h5><p>接着我们来看看，<code>DelegatingFilterProxy</code>是如何执行doFilter方法的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Filter</span> delegateToUse <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>delegateToUse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//非正常情况，这里省略...</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//这里才是真正的调用，别忘了delegateToUse就是初始化的FilterChainProxy对象</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invokeDelegate</span><span class="token punctuation">(</span>delegateToUse<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> filterChain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">invokeDelegate</span><span class="token punctuation">(</span><span class="token class-name">Filter</span> delegate<span class="token punctuation">,</span> <span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n  <span class="token comment">//最后实际上调用的是FilterChainProxy的doFilter方法</span>\n    delegate<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> filterChain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上就相当于 <code>DelegatingFilterProxy</code> 的 <code>doFilter</code> 自己不实现功能，只是一个代理，真正是让 <code>FilterChainProxy</code> 类中的 <code>doFilter</code> 实现</p><h4 id="filterchainproxy" tabindex="-1"><a class="header-anchor" href="#filterchainproxy"><span><code>FilterChainProxy</code></span></a></h4><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>所以我们接着来看，<code>FilterChainProxy</code>的<code>doFilter</code>方法又在干什么：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">boolean</span> clearContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token constant">FILTER_APPLIED</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clearContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//真正的过滤在这里执行</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doFilterInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">//...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">FirewalledRequest</span> firewallRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firewall<span class="token punctuation">.</span><span class="token function">getFirewalledRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">HttpServletResponse</span> firewallResponse <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firewall<span class="token punctuation">.</span><span class="token function">getFirewalledResponse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 这里获取了一个Filter列表，实际上SpringSecurity就是由N个过滤器实现的，这里获取的都是SpringSecurity提供的过滤器</span>\n    <span class="token comment">// 但是请注意，经过我们之前的分析，实际上真正注册的Filter只有DelegatingFilterProxy</span>\n    <span class="token comment">// 而这里的Filter列表中的所有Filter并没有被注册，而是在这里进行内部调用</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span> filters <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>firewallRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 只要Filter列表不是空，就依次执行内置的Filter</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>filters <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> filters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">&quot;Securing &quot;</span> <span class="token operator">+</span> <span class="token function">requestLine</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 这里创建一个虚拟的过滤链，过滤流程是由SpringSecurity自己实现的 (内部的类)</span>\n        <span class="token comment">// 以前的是直接用 FilterChainProxy.VirtualFilterChain 创建</span>\n        <span class="token comment">// 现在绕了一下</span>\n        <span class="token class-name">FilterChain</span> reset <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Secured &quot;</span> <span class="token operator">+</span> <span class="token function">requestLine</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            firewallRequest<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>filterChainDecorator<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>reset<span class="token punctuation">,</span> filters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">,</span> firewallResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">&quot;No security for &quot;</span> <span class="token operator">+</span> <span class="token function">requestLine</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        firewallRequest<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">,</span> firewallResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>List&lt;Filter&gt; filters</code> 有很多, 实际上真正注册的Filter只有DelegatingFilterProxy，这里的Filter列表中的所有Filter并没有被注册，而是在这里进行内部调用： <img src="'+p+'" alt="alt text" loading="lazy"></p><p>以前的源码是直接创建虚拟队列，然后就进行 <code>doFilter</code> 操作</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">FilterChainProxy<span class="token punctuation">.</span>VirtualFilterChain</span> virtualFilterChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterChainProxy<span class="token punctuation">.</span>VirtualFilterChain</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> filters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//调用虚拟过滤链的doFilter</span>\nvirtualFilterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">,</span> firewallResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但现在改成这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">FilterChain</span> reset <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Secured &quot;</span> <span class="token operator">+</span> <span class="token function">requestLine</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    firewallRequest<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>filterChainDecorator<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>reset<span class="token punctuation">,</span> filters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">,</span> firewallResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>FilterChain</code> 是一个接口，只需要提供实现对应的 <code>doFilter</code> 方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FilterChain</span> <span class="token punctuation">{</span>\n    <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先创建一个内联函数 <code>reset</code>，然后利用初始化时创建的 <code>this.filterChainDecorator</code> 来创建虚拟队列</p><h5 id="this-filterchaindecorator" tabindex="-1"><a class="header-anchor" href="#this-filterchaindecorator"><span><code>this.filterChainDecorator</code></span></a></h5><p>在 <code>FilterChainProxy</code> 初始化时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">private</span> <span class="token class-name">FilterChainDecorator</span> filterChainDecorator<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token class-name">FilterChainProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>securityContextHolderStrategy <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>filterChainValidator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NullFilterChainValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>firewall <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictHttpFirewall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>requestRejectedHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpStatusRequestRejectedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>throwableAnalyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>filterChainDecorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VirtualFilterChainDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">VirtualFilterChainDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">FilterChainDecorator</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">FilterChain</span> <span class="token function">decorate</span><span class="token punctuation">(</span><span class="token class-name">FilterChain</span> original<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> original<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">FilterChain</span> <span class="token function">decorate</span><span class="token punctuation">(</span><span class="token class-name">FilterChain</span> original<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span> filters<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VirtualFilterChain</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> filters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样创建了虚拟过滤器链 <code>FilterChainProxy.VirtualFilterChain</code>, 然后执行 <code>doFilter</code></p><h5 id="虚拟过滤器链-filterchainproxy-virtualfilterchain" tabindex="-1"><a class="header-anchor" href="#虚拟过滤器链-filterchainproxy-virtualfilterchain"><span>虚拟过滤器链 <code>FilterChainProxy.VirtualFilterChain</code></span></a></h5><p>我们来看一下虚拟过滤链的doFilter是怎么处理的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 看似没有任何循环，实际上就是一个循环，是一个递归调用</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 判断是否已经通过全部的内置过滤器，定位是否等于当前大小</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentPosition <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FilterChainProxy</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">FilterChainProxy</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">&quot;Secured &quot;</span> <span class="token operator">+</span> <span class="token class-name">FilterChainProxy</span><span class="token punctuation">.</span><span class="token function">requestLine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>firewalledRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>firewalledRequest<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 所有的内置过滤器已经完成，按照正常流程走DelegatingFilterProxy的下一个Filter</span>\n        <span class="token comment">// 也就是说这里之后就与DelegatingFilterProxy没有任何关系了，该走其他过滤器就走其他地方配置的过滤器，SpringSecurity的过滤操作已经结束</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>originalChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 定位自增</span>\n        <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentPosition<span class="token punctuation">;</span>\n        <span class="token comment">// 获取当前定位的Filter</span>\n        <span class="token class-name">Filter</span> nextFilter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Filter</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>additionalFilters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentPosition <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FilterChainProxy</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">FilterChainProxy</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Invoking %s (%d/%d)&quot;</span><span class="token punctuation">,</span> nextFilter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentPosition<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 执行内部过滤器的doFilter方法，传入当前对象本身作为Filter，执行如果成功，那么一定会再次调用当前对象的doFilter方法</span>\n        <span class="token comment">// 可能最不理解的就是这里，执行的难道不是内部其他Filter的doFilter方法吗，怎么会让当前对象的doFilter方法递归调用呢？</span>\n        <span class="token comment">// 没关系，下面我们接着了解了其中一个内部过滤器就明白了</span>\n        nextFilter<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们差不多已经了解了整个SpringSecurity的实现机制了，那么我们来随便看一个内部的过滤器在做什么。</p><h4 id="具体内部过滤器举例-usernamepasswordauthenticationfilter" tabindex="-1"><a class="header-anchor" href="#具体内部过滤器举例-usernamepasswordauthenticationfilter"><span>具体内部过滤器举例 <code>UsernamePasswordAuthenticationFilter</code></span></a></h4><p>比如用于处理登陆的过滤器<code>UsernamePasswordAuthenticationFilter</code>，它继承自<code>AbstractAuthenticationProcessingFilter</code></p><p>我们来看看它是怎么进行过滤的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span>response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果不是登陆请求，那么根本不会理这个请求</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requiresAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 直接调用传入的FilterChain的doFilter方法</span>\n        <span class="token comment">// 而这里传入的正好是VirtualFilterChain对象</span>\n        <span class="token comment">// 这下知道为什么上面说是递归了吧</span>\n        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 如果是登陆请求，那么会执行登陆请求的相关逻辑，注意执行过程中出现任何问题都会抛出异常</span>\n        <span class="token comment">// 比如用户名和密码错误，我们之前也已经测试过了，会得到一个BadCredentialsException</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">//进行认证</span>\n            <span class="token class-name">Authentication</span> authenticationResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>authenticationResult <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">this</span><span class="token punctuation">.</span>sessionStrategy<span class="token punctuation">.</span><span class="token function">onAuthentication</span><span class="token punctuation">(</span>authenticationResult<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>continueChainBeforeSuccessfulAuthentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token comment">// 如果一路绿灯，没有报错，那么验证成功，执行successfulAuthentication</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">successfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> authenticationResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span><span class="token punctuation">,</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 验证失败，会执行unsuccessfulAuthentication</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="successfulauthentication和unsuccessfulauthentication" tabindex="-1"><a class="header-anchor" href="#successfulauthentication和unsuccessfulauthentication"><span><code>successfulAuthentication和unsuccessfulAuthentication</code></span></a></h5><p>那么我们来看看<code>successfulAuthentication和unsuccessfulAuthentication</code>分别做了什么：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">successfulAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authResult<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n    <span class="token comment">//向SecurityContextHolder添加认证信息，我们可以通过SecurityContextHolder对象获取当前登陆的用户</span>\n    <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Set SecurityContextHolder to %s&quot;</span><span class="token punctuation">,</span> authResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//记住我实现</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>rememberMeServices<span class="token punctuation">.</span><span class="token function">loginSuccess</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> authResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventPublisher <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>eventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InteractiveAuthenticationSuccessEvent</span><span class="token punctuation">(</span>authResult<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//调用默认的或是我们自己定义的AuthenticationSuccessHandler的onAuthenticationSuccess方法</span>\n    <span class="token comment">//这个根据我们配置文件决定</span>\n    <span class="token comment">//到这里其实页面就已经直接跳转了</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>successHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> authResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="unsuccessfulauthentication" tabindex="-1"><a class="header-anchor" href="#unsuccessfulauthentication"><span><code>unsuccessfulAuthentication</code></span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> failed<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n    <span class="token comment">//登陆失败会直接清理掉SecurityContextHolder中的认证信息</span>\n    <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to process authentication request&quot;</span><span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Cleared SecurityContextHolder&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Handling authentication failure&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//登陆失败的记住我处理</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>rememberMeServices<span class="token punctuation">.</span><span class="token function">loginFail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//同上，调用默认或是我们自己定义的AuthenticationFailureHandler</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>failureHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他过滤器" tabindex="-1"><a class="header-anchor" href="#其他过滤器"><span>其他过滤器</span></a></h4><p>了解了整个用户验证实现流程，其实其它的过滤器是如何实现的也就很容易联想到了，SpringSecurity的过滤器从某种意义上来说，更像是一个处理业务的Servlet，它做的事情不像是拦截，更像是完成自己对应的职责，只不过是使用了过滤器机制进行实现罢了，从而将所有的验证提前到进入Controller之前。</p><p>最后附上完整的过滤器清单，这里列出14个常见的内部过滤器：</p><table><thead><tr><th>过滤器名称</th><th>职责</th></tr></thead><tbody><tr><td>DisableEncodeUrlFilter</td><td>禁止 HttpServletResponse 对 URL 进行编码，以防止在 URL 中包含 Session ID，此类 URL 不被视为 URL，因为会话 ID 可能会在 HTTP 访问日志等内容中泄露。</td></tr><tr><td>WebAsyncManagerIntegrationFilter</td><td>实现了对SecurityContext与WebAsyncManager的集成，使 Controller 中能够线程安全地获取到用户上下文认证信息。</td></tr><tr><td>SecurityContextHolderFilter</td><td>通过HttpSessionSecurityContextRepository接口从Session中读取SecurityContext或是直接创建新的，然后存入到SecurityContextHolder中，最后请求结束时会进行清理。</td></tr><tr><td>HeaderWriterFilter</td><td>给HTTP响应添加一些Header属性，如：X-Frame-Options、X-XSS-Protection、X-Content-Type-Options等。</td></tr><tr><td>CsrfFilter</td><td>针对Csrf相关校验。</td></tr><tr><td>LogoutFilter</td><td>对退出登录的请求进行处理，执行登出操作。</td></tr><tr><td>UsernamePasswordAuthenticationFilter</td><td>对登录的请求进行处理，执行登录操作。</td></tr><tr><td>ConcurrentSessionFilter</td><td>检查SessionRegistry保存的Session信息是否过期。</td></tr><tr><td>RequestCacheAwareFilter</td><td>缓存Request请求，可以用于恢复因登录而打断的请求。</td></tr><tr><td>SecurityContextHolderAwareRequestFilter</td><td>对ServletRequest进行进一步包装，让Request具有更加丰富的内容。</td></tr><tr><td>RememberMeAuthenticationFilter</td><td>针对于记住我Cookie进行校验。</td></tr><tr><td>AnonymousAuthenticationFilter</td><td>未验证成功的情况下进行匿名登录操作。</td></tr><tr><td>SessionManagementFilter</td><td>Session管理相关。</td></tr><tr><td>ExceptionTranslationFilter</td><td>异常转换处理，比如最常见的AccessDenied之类的。</td></tr></tbody></table>',58)],c={},i=(0,a(3671).A)(c,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,o)}]]),l=JSON.parse('{"path":"/code/java_ssm/SpringSecurity/ss7.html","title":"Javassm - SpringSecurity7","lang":"zh-CN","frontmatter":{"title":"Javassm - SpringSecurity7","date":"2025-09-17T00:00:00.000Z","category":["code"],"tag":["javassm","Spring"],"order":-0.599,"description":"内部机制探究 授权校验流程 SpringSecurity的实现原理本质上是依靠N个Filter实现的，也就是一个完整的过滤链（注意这里是过滤器，不是拦截器） 主要关注各类对应的 init, doFilter AbstractSecurityWebApplicationInitializer 先从AbstractSecurityWebApplicatio...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_ssm/SpringSecurity/ss7.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - SpringSecurity7"}],["meta",{"property":"og:description","content":"内部机制探究 授权校验流程 SpringSecurity的实现原理本质上是依靠N个Filter实现的，也就是一个完整的过滤链（注意这里是过滤器，不是拦截器） 主要关注各类对应的 init, doFilter AbstractSecurityWebApplicationInitializer 先从AbstractSecurityWebApplicatio..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-17T06:49:34.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javassm"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2025-09-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-17T06:49:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - SpringSecurity7\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-17T06:49:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"内部机制探究","slug":"内部机制探究","link":"#内部机制探究","children":[{"level":3,"title":"授权校验流程","slug":"授权校验流程","link":"#授权校验流程","children":[{"level":4,"title":"AbstractSecurityWebApplicationInitializer","slug":"abstractsecuritywebapplicationinitializer","link":"#abstractsecuritywebapplicationinitializer","children":[]},{"level":4,"title":"DelegatingFilterProxy","slug":"delegatingfilterproxy","link":"#delegatingfilterproxy","children":[{"level":5,"title":"doFilter 操作","slug":"dofilter-操作","link":"#dofilter-操作","children":[]}]},{"level":4,"title":"FilterChainProxy","slug":"filterchainproxy","link":"#filterchainproxy","children":[{"level":5,"title":"this.filterChainDecorator","slug":"this-filterchaindecorator","link":"#this-filterchaindecorator","children":[]},{"level":5,"title":"虚拟过滤器链 FilterChainProxy.VirtualFilterChain","slug":"虚拟过滤器链-filterchainproxy-virtualfilterchain","link":"#虚拟过滤器链-filterchainproxy-virtualfilterchain","children":[]}]},{"level":4,"title":"具体内部过滤器举例 UsernamePasswordAuthenticationFilter","slug":"具体内部过滤器举例-usernamepasswordauthenticationfilter","link":"#具体内部过滤器举例-usernamepasswordauthenticationfilter","children":[{"level":5,"title":"successfulAuthentication和unsuccessfulAuthentication","slug":"successfulauthentication和unsuccessfulauthentication","link":"#successfulauthentication和unsuccessfulauthentication","children":[]},{"level":5,"title":"unsuccessfulAuthentication","slug":"unsuccessfulauthentication","link":"#unsuccessfulauthentication","children":[]}]},{"level":4,"title":"其他过滤器","slug":"其他过滤器","link":"#其他过滤器","children":[]}]}]}],"git":{"createdTime":1758091774000,"updatedTime":1758091774000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":8.5,"words":2549},"filePathRelative":"code/java_ssm/SpringSecurity/ss7.md","localizedDate":"2025年9月17日","excerpt":"<h2>内部机制探究</h2>\\n<h3>授权校验流程</h3>\\n<p>SpringSecurity的实现原理本质上是依靠N个Filter实现的，也就是一个完整的过滤链（注意这里是过滤器，不是拦截器）</p>\\n<blockquote>\\n<p>主要关注各类对应的 <code>init</code>, <code>doFilter</code></p>\\n</blockquote>\\n<h4><code>AbstractSecurityWebApplicationInitializer</code></h4>\\n<p>先从<code>AbstractSecurityWebApplicationInitializer</code>开始下手，也就是在 <code>init</code> 文件夹里的 <code>SecurityInitializer</code> 的父类</p>","autoDesc":true}')}}]);