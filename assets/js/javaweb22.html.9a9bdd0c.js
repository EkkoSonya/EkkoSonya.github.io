"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[760],{83671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},59527:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>c,data:()=>l});var t=s(7847);const e=s.p+"assets/img/32.88ed3020.png",o=[(0,t.Fv)('<h2 id="jul日志系统3" tabindex="-1"><a class="header-anchor" href="#jul日志系统3"><span>JUL日志系统3</span></a></h2><h3 id="日志继承关系" tabindex="-1"><a class="header-anchor" href="#日志继承关系"><span>日志继承关系</span></a></h3><h4 id="rootlogger" tabindex="-1"><a class="header-anchor" href="#rootlogger"><span><code>RootLogger</code></span></a></h4><p>JUL中Logger之间存在父子关系，这种父子关系类似于继承，我们可以通过Logger的<code>getParent</code>方法来获取其父Logger对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们会得到一个：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>java.util.logging.LogManager$RootLogger@24d46ca6\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个<code>RootLogger</code>对象为所有日志记录器的最顶层父级对象，它包含一个默认的<code>ConsoleHandler</code>处理器用于进行控制台打印，而日志在打印时，子Logger会继承父Logger提供的所有<code>Handler</code>进行日志处理，因此我们在默认情况下才能正常使用日志打印：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Logger</span> parent <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改默认情况下的打印等级" tabindex="-1"><a class="header-anchor" href="#修改默认情况下的打印等级"><span>修改默认情况下的打印等级</span></a></h4><p><code>Handler</code>是属于对应的<code>Logger</code>的，即继承的子<code>Logger</code>不能直接修改父<code>Logger</code>的<code>Handler</code></p><p>根据我们上节课学习的知识，在默认情况下如果我们需要修改日志打印等级，那么同时<strong>也需要将父级的Handler也进行日志等级配置</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>parent<span class="token punctuation">.</span><span class="token function">getHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">finest</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重复logger问题" tabindex="-1"><a class="header-anchor" href="#重复logger问题"><span>重复<code>Logger</code>问题</span></a></h4><p>当然，如果我们在不屏蔽父级<code>Handler</code>的情况下为子级配置一个<code>Handler</code>，那么此时两个<code>Handler</code>都会生效</p><p>顺序：先子<code>Logger</code>, 再父<code>Logger</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>logger<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;你干嘛&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>日志中出现了两次：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>8月 28, 2024 12:57:39 上午 com.test.Main main\n信息: 你干嘛\n8月 28, 2024 12:57:39 上午 com.test.Main main\n信息: 你干嘛\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过需要注意一下顺序，当父级和子级都配置时，那么<strong>子级的Handler优先进行处理，接着才是父级。</strong></p><h4 id="名称分级-自动构建继承关系" tabindex="-1"><a class="header-anchor" href="#名称分级-自动构建继承关系"><span>名称分级，自动构建继承关系</span></a></h4><p>除了默认的RootLogger作为父类，实际上Logger还会通过名称进行分级，自动构建一个继承关系，比如下面：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Logger</span> logger1 <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Logger</span> logger2 <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;com.test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Logger</span> logger3 <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;com.test.inner1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Logger</span> logger4 <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;com.test.inner2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logger4<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> logger2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//全true</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logger3<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> logger2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logger2<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> logger1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像包名一样，<strong>日志的名称会按照包的分级，进行自动继承</strong>，就像下面这个图一样：</p><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure>',25)],p={},c=(0,s(83671).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,o)}]]),l=JSON.parse('{"path":"/code/javaweb/5-JUL/javaweb22.html","title":"javaweb - JUL日志3","lang":"zh-CN","frontmatter":{"title":"javaweb - JUL日志3","date":"2025-07-06T00:00:00.000Z","category":["code"],"tag":["javaweb","JUL"],"order":-0.7477,"description":"JUL日志系统3 日志继承关系 RootLogger JUL中Logger之间存在父子关系，这种父子关系类似于继承，我们可以通过Logger的getParent方法来获取其父Logger对象： 这里我们会得到一个： 这个RootLogger对象为所有日志记录器的最顶层父级对象，它包含一个默认的ConsoleHandler处理器用于进行控制台打印，而日志...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/5-JUL/javaweb22.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - JUL日志3"}],["meta",{"property":"og:description","content":"JUL日志系统3 日志继承关系 RootLogger JUL中Logger之间存在父子关系，这种父子关系类似于继承，我们可以通过Logger的getParent方法来获取其父Logger对象： 这里我们会得到一个： 这个RootLogger对象为所有日志记录器的最顶层父级对象，它包含一个默认的ConsoleHandler处理器用于进行控制台打印，而日志..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T16:02:13.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"JUL"}],["meta",{"property":"article:published_time","content":"2025-07-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T16:02:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - JUL日志3\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-07T16:02:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"JUL日志系统3","slug":"jul日志系统3","link":"#jul日志系统3","children":[{"level":3,"title":"日志继承关系","slug":"日志继承关系","link":"#日志继承关系","children":[{"level":4,"title":"RootLogger","slug":"rootlogger","link":"#rootlogger","children":[]},{"level":4,"title":"修改默认情况下的打印等级","slug":"修改默认情况下的打印等级","link":"#修改默认情况下的打印等级","children":[]},{"level":4,"title":"重复Logger问题","slug":"重复logger问题","link":"#重复logger问题","children":[]},{"level":4,"title":"名称分级，自动构建继承关系","slug":"名称分级-自动构建继承关系","link":"#名称分级-自动构建继承关系","children":[]}]}]}],"git":{"createdTime":1751904133000,"updatedTime":1751904133000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":1.8,"words":541},"filePathRelative":"code/javaweb/5-JUL/javaweb22.md","localizedDate":"2025年7月6日","excerpt":"<h2>JUL日志系统3</h2>\\n<h3>日志继承关系</h3>\\n<h4><code>RootLogger</code></h4>\\n<p>JUL中Logger之间存在父子关系，这种父子关系类似于继承，我们可以通过Logger的<code>getParent</code>方法来获取其父Logger对象：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Logger</span> logger <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Logger</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getLogger</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Main</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getParent</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);