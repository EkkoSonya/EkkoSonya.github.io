"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[531],{3671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},8657:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>o,data:()=>c});var t=s(7847);const e=[(0,t.Fv)('<h2 id="mybatis详解4" tabindex="-1"><a class="header-anchor" href="#mybatis详解4"><span>Mybatis详解4</span></a></h2><h3 id="dml-操作" tabindex="-1"><a class="header-anchor" href="#dml-操作"><span>DML 操作</span></a></h3><p>前面我们介绍了<strong>查询操作</strong>，我们接着来看修改相关操作(<strong>增、删、改</strong>)。</p><p><code>Mybatis</code>为我们的<code>DML</code>操作提供了几个预设方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这些方法默认情况下返回的结果都是<code>int</code>类型的，这与我们之前JDBC中是一样的，它代表<strong>执行<code>SQL</code>后受影响的行数</strong>。</p><h4 id="插入-insert标签" tabindex="-1"><a class="header-anchor" href="#插入-insert标签"><span>插入 <code>insert</code>标签</span></a></h4><p>我们来尝试编写一个插入操作</p><p><code>Mybatis</code>为我们提供的插入操作非常快捷，我们可以直接让一个<code>User</code>对象作为参数传入</p><p>即可在配置中直接解析其属性到<code>insert</code>语句中，这里需要用到<code>insert</code>标签：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addUser<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.test.entity.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    insert into user (name, age) values (#{name}, #{age})\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们将<code>parameterType</code>类型设置为我们的实体类型，这样下面在使用<code>#{name}</code>时<code>Mybatis</code>就会自动调用类中对应的Get方法来获取结果</p><p>不过，即使这里不指定具体类型，<code>Mybatis</code>也能完成自动推断，非常智能(<strong>参数名称要与实体类参数对应</strong>)。</p><p>和之前一样，我们也可以直接将其绑定到一个接口上：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意返回类型必须是<code>int</code>或是<code>long</code>这类数字类型</strong>，表示生效的行数，然后这里我们传入的参数直接写成对应的类型即可。</p><h5 id="自增主键id-usegeneratedkeys" tabindex="-1"><a class="header-anchor" href="#自增主键id-usegeneratedkeys"><span>自增主键ID <code>useGeneratedKeys</code></span></a></h5><p>有些时候，我们的数据插入后使用的是一个自增主键ID，那么这个自增的主键值我们该如何获取到呢？</p><p>Mybatis为我们提供了一些参数用于处理这种问题：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addUser<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.test.entity.User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    insert into user (name, age) values (#{name}, #{age})\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里<code>useGeneratedKeys</code>设置为<code>true</code>表示我们希望获取数据库生成的键</p><p><code>keyProperty</code>设置为User类中的需要获取自增结果的属性名，<code>keyColumn</code>为数据库中自增的字段名称</p><p>但是一般情况下不需要手动设置，但是某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，必须设置。</p><p>这样我们就可以获取到自增后的值了，接着我们什么都不需要做，Mybatis会在查询完后自动为我们的User对象赋值：</p><h4 id="修改-update标签" tabindex="-1"><a class="header-anchor" href="#修改-update标签"><span>修改 <code>update</code>标签</span></a></h4><p>我们接着来看修改操作，比如要根据ID修改用户的年龄：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>setUserAgeById<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    update user set age = #{age} where id = #{id}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">setUserAgeById</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的参数我们依然选择使用<code>User</code>，和之前<code>insert</code>一样，<code>Mybatis</code>会从传入的对象中自动获取需要的参数，当然我们也可以将此方法设计为两个参数的形式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">setUserAgeById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h4><p>删除操作则更为简单，假设我们要根据用户的id进行数据的删除：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deleteUserById<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    delete from user where id = #{id}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些操作相比查询操作来说非常简单就可以实现，这里就不多做介绍了。</p><h3 id="事务操作" tabindex="-1"><a class="header-anchor" href="#事务操作"><span>事务操作</span></a></h3><p>我们可以在获取<code>SqlSession</code>关闭自动提交来开启事务模式，和JDBC其实都差不多</p><p>在创建<code>SqlSession</code>的时候不填写参数默认使用的就是事务模式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们发现，在关闭自动提交后，我们的内容是没有进入到数据库的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TestMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    mapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//虽然日志中已经提示生效1行，但是并没有提交</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SqlSession</code>接口中为我们提供了事务操作相关的方法，这里我们可以直接尝试进行事务的提交：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TestMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//通过SqlSession进行事务提交</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果我们在提交事务之前，没有进行任何的DML操作，也就是删除、更新、插入的其中任意一种操作，那么调用<code>commit</code>方法则不会进行提交，当然如果仍然需要提交的话也可以使用<code>commit(true)</code>来强制提交。</p><p>我们接着来测试一下回滚操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TestMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//此时由于数据被删除，无法查到</span>\nsession<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//进行回滚操作</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//之前被删除的数据回来了</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事务相关操作非常简单，这里就暂时先介绍这么多。</p>',46)],p={},o=(0,s(3671).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),c=JSON.parse('{"path":"/code/javaweb/4-Mybatis/javaweb16.html","title":"javaweb - Mybatis6","lang":"zh-CN","frontmatter":{"title":"javaweb - Mybatis6","date":"2025-06-15T00:00:00.000Z","category":["code"],"tag":["javaweb","mybatis"],"order":-0.7484,"description":"Mybatis详解4 DML 操作 前面我们介绍了查询操作，我们接着来看修改相关操作(增、删、改)。 Mybatis为我们的DML操作提供了几个预设方法： 可以看到，这些方法默认情况下返回的结果都是int类型的，这与我们之前JDBC中是一样的，它代表执行SQL后受影响的行数。 插入 insert标签 我们来尝试编写一个插入操作 Mybatis为我们提供...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/4-Mybatis/javaweb16.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - Mybatis6"}],["meta",{"property":"og:description","content":"Mybatis详解4 DML 操作 前面我们介绍了查询操作，我们接着来看修改相关操作(增、删、改)。 Mybatis为我们的DML操作提供了几个预设方法： 可以看到，这些方法默认情况下返回的结果都是int类型的，这与我们之前JDBC中是一样的，它代表执行SQL后受影响的行数。 插入 insert标签 我们来尝试编写一个插入操作 Mybatis为我们提供..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T16:02:13.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"mybatis"}],["meta",{"property":"article:published_time","content":"2025-06-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T16:02:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - Mybatis6\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-07T16:02:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"Mybatis详解4","slug":"mybatis详解4","link":"#mybatis详解4","children":[{"level":3,"title":"DML 操作","slug":"dml-操作","link":"#dml-操作","children":[{"level":4,"title":"插入 insert标签","slug":"插入-insert标签","link":"#插入-insert标签","children":[{"level":5,"title":"自增主键ID useGeneratedKeys","slug":"自增主键id-usegeneratedkeys","link":"#自增主键id-usegeneratedkeys","children":[]}]},{"level":4,"title":"修改 update标签","slug":"修改-update标签","link":"#修改-update标签","children":[]},{"level":4,"title":"删除","slug":"删除","link":"#删除","children":[]}]},{"level":3,"title":"事务操作","slug":"事务操作","link":"#事务操作","children":[]}]}],"git":{"createdTime":1751904133000,"updatedTime":1751904133000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":3.86,"words":1159},"filePathRelative":"code/javaweb/4-Mybatis/javaweb16.md","localizedDate":"2025年6月15日","excerpt":"<h2>Mybatis详解4</h2>\\n<h3>DML 操作</h3>\\n<p>前面我们介绍了<strong>查询操作</strong>，我们接着来看修改相关操作(<strong>增、删、改</strong>)。</p>\\n<p><code>Mybatis</code>为我们的<code>DML</code>操作提供了几个预设方法：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> statement<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> statement<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span> parameter<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">update</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> statement<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">update</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> statement<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span> parameter<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">delete</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> statement<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">delete</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> statement<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span> parameter<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);