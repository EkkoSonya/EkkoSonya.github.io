"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[6702],{3671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},4479:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>l,data:()=>i});var t=s(7847);const e=s.p+"assets/img/10.8f892df0.png",p=s.p+"assets/img/11.a8bedb54.png",o=[(0,t.Fv)('<h2 id="mybatis1" tabindex="-1"><a class="header-anchor" href="#mybatis1"><span>Mybatis1</span></a></h2><p>在前面JDBC的学习中，虽然我们能够通过JDBC来连接和操作数据库，但是哪怕只是完成一个SQL语句的执行，都需要编写大量的代码，更不用说如果我还需要进行实体类映射，将数据转换为我们可以直接操作的实体类型，JDBC很方便，但是还不够方便，我们需要一种更加简洁高效的方式来和数据库进行交互。</p><p><strong>再次强调：</strong> 学习厉害的框架或是厉害的技术，并不是为了一定要去使用它，而是它们能够使得我们在不同的开发场景下，合理地使用这些技术，以灵活地应对需要解决的问题。</p><figure><img src="'+e+'" alt="image-20230306163528771" tabindex="0" loading="lazy"><figcaption>image-20230306163528771</figcaption></figure><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</p><h3 id="xml语言" tabindex="-1"><a class="header-anchor" href="#xml语言"><span>XML语言</span></a></h3><p>在开始介绍Mybatis之前，XML语言发明最初是用于<strong>数据的存储和传输</strong>，它可以长这样：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outer</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿伟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>desc</span><span class="token punctuation">&gt;</span></span>怎么又在玩电动啊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>desc</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inner</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inner</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outer</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>HTML</code>主要用于通过编排来展示数据，而<code>XML</code>主要是存放数据，它更像是一个配置文件！当然，浏览器也是可以直接打开<code>XML</code>文件的。</p><p>一个XML文件存在以下的格式规范：</p><ul><li>必须存在一个根节点，将所有的子标签全部包含。</li><li>可以但不必须包含一个头部声明（主要是可以设定编码格式）</li><li>所有的标签必须成对出现，可以嵌套但<strong>不能交叉嵌套</strong></li><li>区分大小写。</li><li>标签中可以存在属性，比如上面的<code>type=&quot;1&quot;</code>就是<code>inner</code>标签的一个属性，属性的值由单引号或双引号包括。</li></ul><p>XML文件也可以使用注释：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>\n<span class="token comment">&lt;!-- 注释内容 --&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过IDEA我们可以使用<code>Ctrl</code>+<code>/</code>来快速添加注释文本（不仅仅适用于XML，还支持很多种类型的文件）</p><h4 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符"><span>转义字符</span></a></h4><figure><img src="'+p+'" alt="image-20230306163528771" tabindex="0" loading="lazy"><figcaption>image-20230306163528771</figcaption></figure><p>如果嫌一个一个改太麻烦，也可以使用CDATA <code>&lt;![CDATA[ xxxxx ]</code> 来快速创建不解析区域：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[我看你&lt;&gt;&lt;&gt;&lt;&gt;是一点都不懂哦&gt;&gt;&gt;]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解析xml文件" tabindex="-1"><a class="header-anchor" href="#解析xml文件"><span>解析XML文件</span></a></h4><p>如何将定义好的XML文件读取到Java程序中</p><p>JDK为我们内置了一个叫做<code>org.w3c</code>的XML解析库：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建DocumentBuilderFactory对象</span>\n<span class="token class-name">DocumentBuilderFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 创建DocumentBuilder对象</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token class-name">DocumentBuilder</span> builder <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Document</span> d <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;file:mappers/test.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 每一个标签都作为一个节点</span>\n    <span class="token class-name">NodeList</span> nodeList <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token comment">// 可能有很多个名字为test的标签</span>\n    <span class="token class-name">Node</span> rootNode <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取首个</span>\n\n    <span class="token class-name">NodeList</span> childNodes <span class="token operator">=</span> rootNode<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token comment">// 一个节点下可能会有很多个节点，比如根节点下就囊括了所有的节点</span>\n    <span class="token comment">// 节点可以是一个带有内容的标签（它内部就还有子节点），也可以是一段文本内容</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childNodes<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Node</span> child <span class="token operator">=</span> childNodes<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">ELEMENT_NODE</span><span class="token punctuation">)</span>  \n        <span class="token comment">//过滤换行符之类的内容，因为它们都被认为是一个文本节点</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;：&quot;</span> <span class="token operator">+</span>child<span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 输出节点名称，也就是标签名称，以及标签内部的文本</span>\n        <span class="token comment">// （内部的内容都是子节点，所以要获取内部的节点）</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，学习和使用XML只是为了更好地去认识<code>Mybatis</code>的工作原理，以及如何使用<code>XML</code>来作为<code>Mybatis</code>的配置文件，这是在开始之前必须要掌握的内容（使用<code>Java</code>读取XML内容不要求掌握，但是需要知道<code>Mybatis</code>就是通过这种方式来读取配置文件的）</p><p>不仅仅是<code>Mybatis</code>，包括后面的<code>Spring</code>等众多框架都会用到<code>XML</code>来作为框架的配置文件！</p>',24)],c={},l=(0,s(3671).A)(c,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,o)}]]),i=JSON.parse('{"path":"/code/javaweb/4-Mybatis/javaweb11.html","title":"javaweb - Mybatis1","lang":"zh-CN","frontmatter":{"title":"javaweb - Mybatis1","date":"2025-06-09T00:00:00.000Z","category":["code"],"tag":["javaweb","mybatis"],"order":-0.7489,"description":"Mybatis1 在前面JDBC的学习中，虽然我们能够通过JDBC来连接和操作数据库，但是哪怕只是完成一个SQL语句的执行，都需要编写大量的代码，更不用说如果我还需要进行实体类映射，将数据转换为我们可以直接操作的实体类型，JDBC很方便，但是还不够方便，我们需要一种更加简洁高效的方式来和数据库进行交互。 再次强调： 学习厉害的框架或是厉害的技术，并不是...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/javaweb/4-Mybatis/javaweb11.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"javaweb - Mybatis1"}],["meta",{"property":"og:description","content":"Mybatis1 在前面JDBC的学习中，虽然我们能够通过JDBC来连接和操作数据库，但是哪怕只是完成一个SQL语句的执行，都需要编写大量的代码，更不用说如果我还需要进行实体类映射，将数据转换为我们可以直接操作的实体类型，JDBC很方便，但是还不够方便，我们需要一种更加简洁高效的方式来和数据库进行交互。 再次强调： 学习厉害的框架或是厉害的技术，并不是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T16:02:13.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"javaweb"}],["meta",{"property":"article:tag","content":"mybatis"}],["meta",{"property":"article:published_time","content":"2025-06-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T16:02:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaweb - Mybatis1\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-07T16:02:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"Mybatis1","slug":"mybatis1","link":"#mybatis1","children":[{"level":3,"title":"XML语言","slug":"xml语言","link":"#xml语言","children":[{"level":4,"title":"转义字符","slug":"转义字符","link":"#转义字符","children":[]},{"level":4,"title":"解析XML文件","slug":"解析xml文件","link":"#解析xml文件","children":[]}]}]}],"git":{"createdTime":1751904133000,"updatedTime":1751904133000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":3.53,"words":1060},"filePathRelative":"code/javaweb/4-Mybatis/javaweb11.md","localizedDate":"2025年6月9日","excerpt":"<h2>Mybatis1</h2>\\n<p>在前面JDBC的学习中，虽然我们能够通过JDBC来连接和操作数据库，但是哪怕只是完成一个SQL语句的执行，都需要编写大量的代码，更不用说如果我还需要进行实体类映射，将数据转换为我们可以直接操作的实体类型，JDBC很方便，但是还不够方便，我们需要一种更加简洁高效的方式来和数据库进行交互。</p>\\n<p><strong>再次强调：</strong> 学习厉害的框架或是厉害的技术，并不是为了一定要去使用它，而是它们能够使得我们在不同的开发场景下，合理地使用这些技术，以灵活地应对需要解决的问题。</p>\\n<figure><figcaption>image-20230306163528771</figcaption></figure>","autoDesc":true}')}}]);