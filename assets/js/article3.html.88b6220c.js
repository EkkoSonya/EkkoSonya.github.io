"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[3615],{83671:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},76545:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>r});var e=a(7847);const t=a.p+"assets/img/10.78c93f77.png",p=a.p+"assets/img/11.e16908ed.png",o=a.p+"assets/img/12.0f299252.png",l=a.p+"assets/img/13.6636085e.png",c=[(0,e.Fv)('<h2 id="苍穹外卖" tabindex="-1"><a class="header-anchor" href="#苍穹外卖"><span>苍穹外卖</span></a></h2><h3 id="实现功能" tabindex="-1"><a class="header-anchor" href="#实现功能"><span>实现功能</span></a></h3><ul><li>新增员工</li><li>员工分页查询</li><li>启用禁用员工账号</li><li>编辑员工</li><li>导入分类模块功能代码</li></ul><h3 id="_1-新增员工-admin-employee" tabindex="-1"><a class="header-anchor" href="#_1-新增员工-admin-employee"><span>1. 新增员工 <code>/admin/employee</code></span></a></h3><h4 id="产品原型" tabindex="-1"><a class="header-anchor" href="#产品原型"><span>产品原型</span></a></h4><figure><img src="'+t+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ol><li>账号必须是唯一的</li><li>手机号为合法的11位手机号码</li><li>身份证号为合法的18位身份证号码</li><li>密码默认为123456</li></ol><h4 id="接口设计" tabindex="-1"><a class="header-anchor" href="#接口设计"><span>接口设计</span></a></h4><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>明确新增员工接口的<strong>请求路径、请求方式、请求参数、返回数据</strong>。</p><p>约定：</p><ul><li><strong>管理端</strong>发出的请求，统一使用**/admin**作为前缀。</li><li><strong>用户端</strong>发出的请求，统一使用**/user**作为前缀。</li></ul><h4 id="表设计" tabindex="-1"><a class="header-anchor" href="#表设计"><span>表设计</span></a></h4><p>新增员工，其实就是将我们新增页面录入的员工数据插入到employee表。</p><p><strong>employee表结构：</strong></p><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>姓名</td><td></td></tr><tr><td>username</td><td>varchar(32)</td><td>用户名</td><td>唯一</td></tr><tr><td>password</td><td>varchar(64)</td><td>密码</td><td></td></tr><tr><td>phone</td><td>varchar(11)</td><td>手机号</td><td></td></tr><tr><td>sex</td><td>varchar(2)</td><td>性别</td><td></td></tr><tr><td>id_number</td><td>varchar(18)</td><td>身份证号</td><td></td></tr><tr><td>status</td><td>Int</td><td>账号状态</td><td>1正常 0锁定</td></tr><tr><td>create_time</td><td>Datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table><p>其中，employee表中的status字段已经设置了默认值1，表示状态正常。</p><h4 id="代码开发" tabindex="-1"><a class="header-anchor" href="#代码开发"><span>代码开发</span></a></h4><h5 id="dto设计" tabindex="-1"><a class="header-anchor" href="#dto设计"><span>DTO设计</span></a></h5><p>当前端提交的数据和实体类中对应的属性差别比较大时，建议使用DTO来封装数据</p><p><code>EmployeeDTO</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>dto</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>\n<span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeDTO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> idNumber<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="controller层创建方法" tabindex="-1"><a class="header-anchor" href="#controller层创建方法"><span><code>Controller</code>层创建方法</span></a></h5><p><code>@RequestBody</code>: 把前端发送的 JSON（或 XML、表单数据等）自动反序列化成 Java 对象。</p><p>EmployeeController中创建新增员工方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token doc-comment comment">/**\n     * 新增员工\n     * <span class="token keyword">@param</span> <span class="token parameter">employeeDTO</span>\n     * <span class="token keyword">@return</span>\n     */</span>\n    <span class="token annotation punctuation">@PostMapping</span>\n    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;新增员工&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">EmployeeDTO</span> employeeDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;新增员工：{}&quot;</span><span class="token punctuation">,</span> employeeDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        employeeService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>employeeDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="service层" tabindex="-1"><a class="header-anchor" href="#service层"><span><code>Service</code>层</span></a></h5><h6 id="接口部分" tabindex="-1"><a class="header-anchor" href="#接口部分"><span>接口部分</span></a></h6><p>在EmployeeService接口中声明新增员工方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token doc-comment comment">/**\n     * 新增员工\n     * <span class="token keyword">@param</span> <span class="token parameter">employeeDTO</span>\n     */</span>\n    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">EmployeeDTO</span> employeeDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="实现类部分" tabindex="-1"><a class="header-anchor" href="#实现类部分"><span>实现类部分</span></a></h6><p>在EmployeeServiceImpl中实现新增员工方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token doc-comment comment">/**\n     * 新增员工\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">employeeDTO</span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">EmployeeDTO</span> employeeDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//对象属性拷贝</span>\n        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>employeeDTO<span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//设置账号的状态，默认正常状态 1表示正常 0表示锁定</span>\n        employee<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">StatusConstant</span><span class="token punctuation">.</span><span class="token constant">ENABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//设置密码，默认密码123456</span>\n        employee<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5DigestAsHex</span><span class="token punctuation">(</span><span class="token class-name">PasswordConstant</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_PASSWORD</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//设置当前记录的创建时间和修改时间</span>\n        employee<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        employee<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//设置当前记录创建人id和修改人id</span>\n        employee<span class="token punctuation">.</span><span class="token function">setCreateUser</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//目前写个假数据，后期修改</span>\n        employee<span class="token punctuation">.</span><span class="token function">setUpdateUser</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        employeeMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后续步骤定义</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="mapper层" tabindex="-1"><a class="header-anchor" href="#mapper层"><span><code>Mapper</code>层</span></a></h5><p>在EmployeeMapper中声明insert方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token doc-comment comment">/**\n     * 插入员工数据\n     * <span class="token keyword">@param</span> <span class="token parameter">employee</span>\n     */</span>\n    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into employee (name, username, password, phone, sex, id_number, create_time, update_time, create_user, update_user,status) &quot;</span> <span class="token operator">+</span>\n    <span class="token string">&quot;values &quot;</span> <span class="token operator">+</span>\n    <span class="token string">&quot;(#{name},#{username},#{password},#{phone},#{sex},#{idNumber},#{createTime},#{updateTime},#{createUser},#{updateUser},#{status})&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="功能测试" tabindex="-1"><a class="header-anchor" href="#功能测试"><span>功能测试</span></a></h4><p>代码已经发开发完毕，对新增员工功能进行测试。</p><p><strong>功能测试实现方式：</strong></p><ul><li>通过接口文档测试</li><li>通前后端联调测试</li></ul><h4 id="代码完善" tabindex="-1"><a class="header-anchor" href="#代码完善"><span>代码完善</span></a></h4><p>目前，程序存在的问题主要有两个：</p><ul><li>录入的用户名已存，抛出的异常后没有处理</li><li>新增员工时，创建人id和修改人id设置为固定值</li></ul><p>接下来，我们对上述两个问题依次进行分析和解决。</p><h5 id="_1-捕获重复命名异常" tabindex="-1"><a class="header-anchor" href="#_1-捕获重复命名异常"><span>1. 捕获重复命名异常</span></a></h5><p>通过全局异常处理器来处理。</p><p>进入到sky-server模块，com.sky.hander包下，GlobalExceptionHandler.java添加方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**\n     * 处理SQL异常\n     * <span class="token keyword">@param</span> <span class="token parameter">ex</span>\n     * <span class="token keyword">@return</span>\n     */</span>\n    <span class="token annotation punctuation">@ExceptionHandler</span>\n    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">SQLIntegrityConstraintViolationException</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//Duplicate entry &#39;zhangsan&#39; for key &#39;employee.idx_username&#39;</span>\n        <span class="token class-name">String</span> message <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Duplicate entry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> username <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> msg <span class="token operator">=</span> username <span class="token operator">+</span> <span class="token class-name">MessageConstant</span><span class="token punctuation">.</span><span class="token constant">ALREADY_EXISTS</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">MessageConstant</span><span class="token punctuation">.</span><span class="token constant">UNKNOWN_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入到sky-common模块，在MessageConstant.java添加</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ALREADY_EXISTS</span> <span class="token operator">=</span> <span class="token string">&quot;已存在&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-新增员工对应修改人id同步" tabindex="-1"><a class="header-anchor" href="#_2-新增员工对应修改人id同步"><span>2. 新增员工对应修改人id同步</span></a></h5><p>通过<code>ThreadLocal</code>在每次请求时动态存取当前登录员工的id。</p><p>ThreadLocal 并不是一个Thread，而是Thread的局部变量。 ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p><p><strong>常用方法：</strong></p><ul><li>public void set(T value) 设置当前线程的线程局部变量的值</li><li>public T get() 返回当前线程所对应的线程局部变量的值</li><li>public void remove() 移除当前线程的线程局部变量</li></ul><p>在拦截器中解析出当前登录员工id，并放入线程局部变量中：</p><p>在sky-server模块中，拦截器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>interceptor</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * jwt令牌校验的拦截器\n */</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenAdminInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">JwtProperties</span> jwtProperties<span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 校验jwt\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">request</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">response</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">handler</span>\n     * <span class="token keyword">@return</span>\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        \n      <span class="token comment">//.............................</span>\n       \n        <span class="token comment">//2、校验令牌</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">//.................</span>\n            <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">parseJWT</span><span class="token punctuation">(</span>jwtProperties<span class="token punctuation">.</span><span class="token function">getAdminSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Long</span> empId <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">JwtClaimsConstant</span><span class="token punctuation">.</span><span class="token constant">EMP_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;当前员工id：&quot;</span><span class="token punctuation">,</span> empId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">/////将用户id存储到ThreadLocal////////</span>\n            <span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">setCurrentId</span><span class="token punctuation">(</span>empId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">////////////////////////////////////</span>\n            <span class="token comment">//3、通过，放行</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//......................</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Service中获取线程局部变量中的值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token doc-comment comment">/**\n     * 新增员工\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">employeeDTO</span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">EmployeeDTO</span> employeeDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//.............................</span>\n\n        <span class="token comment">//设置当前记录创建人id和修改人id</span>\n        employee<span class="token punctuation">.</span><span class="token function">setCreateUser</span><span class="token punctuation">(</span><span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">getCurrentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目前写个假数据，后期修改</span>\n        employee<span class="token punctuation">.</span><span class="token function">setUpdateUser</span><span class="token punctuation">(</span><span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">getCurrentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        employeeMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-员工分页查询-admin-employee-page" tabindex="-1"><a class="header-anchor" href="#_2-员工分页查询-admin-employee-page"><span>2. 员工分页查询 <code>/admin/employee/page?</code></span></a></h3><h4 id="产品原型-1" tabindex="-1"><a class="header-anchor" href="#产品原型-1"><span>产品原型</span></a></h4><p>系统中的员工很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。而在我们的分页查询页面中, 除了分页条件以外，还有一个查询条件 &quot;员工姓名&quot;。</p><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>根据页码展示员工信息</li><li>每页展示10条数据</li><li>分页查询时可以根据需要，输入员工姓名进行查询</li></ul><h4 id="接口设计-1" tabindex="-1"><a class="header-anchor" href="#接口设计-1"><span>接口设计</span></a></h4><figure><img src="'+l+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>请求参数类型为Query，不是json格式提交，在路径后直接拼接。/admin/employee/page?name=zhangsan</li><li>返回数据中records数组中使用Employee实体类对属性进行封装。</li></ul><h4 id="代码开发-1" tabindex="-1"><a class="header-anchor" href="#代码开发-1"><span>代码开发</span></a></h4><h5 id="dto设计-1" tabindex="-1"><a class="header-anchor" href="#dto设计-1"><span>DTO设计</span></a></h5><p>根据请求参数进行封装，在sky-pojo模块中</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeePageQueryDTO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token comment">//员工姓名</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token comment">//页码</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> page<span class="token punctuation">;</span>\n    <span class="token comment">//每页显示记录数</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="封装pageresult" tabindex="-1"><a class="header-anchor" href="#封装pageresult"><span>封装<code>PageResult</code></span></a></h5><p>后面所有的分页查询，统一都封装为PageResult对象。</p><p>在sky-common模块</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>result</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * 封装分页查询结果\n */</span>\n<span class="token annotation punctuation">@Data</span>\n<span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token annotation punctuation">@NoArgsConstructor</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageResult</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">long</span> total<span class="token punctuation">;</span> <span class="token comment">//总记录数</span>\n    <span class="token keyword">private</span> <span class="token class-name">List</span> records<span class="token punctuation">;</span> <span class="token comment">//当前页数据集合</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后传给前端，对应为 <code>Result&lt;PageResult&gt;</code>，也就对应最终返回的情况</p><p>data里面的内容 —— <code>PageResult</code></p><p>sql limit 关键字</p><h5 id="controller层" tabindex="-1"><a class="header-anchor" href="#controller层"><span>Controller层</span></a></h5><p>在sky-server模块中，com.sky.controller.admin.EmployeeController中添加分页查询方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 员工分页查询\n * <span class="token keyword">@param</span> <span class="token parameter">employeePageQueryDTO</span>\n * <span class="token keyword">@return</span>\n */</span>\n<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/page&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;分页查询&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PageResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token class-name">EmployeePageQueryDTO</span> employeePageQueryDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;员工分页查询，参数为：{}&quot;</span><span class="token punctuation">,</span> employeePageQueryDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token class-name">PageResult</span> pageResult <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">pageQuery</span><span class="token punctuation">(</span>employeePageQueryDTO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后续定义</span>\n   <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>pageResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="service层接口" tabindex="-1"><a class="header-anchor" href="#service层接口"><span>Service层接口</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 分页查询\n * <span class="token keyword">@param</span> <span class="token parameter">employeePageQueryDTO</span>\n * <span class="token keyword">@return</span>\n */</span>\n<span class="token class-name">PageResult</span> <span class="token function">pageQuery</span><span class="token punctuation">(</span><span class="token class-name">EmployeePageQueryDTO</span> employeePageQueryDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="service层实现类" tabindex="-1"><a class="header-anchor" href="#service层实现类"><span>Service层实现类</span></a></h5><p>此处使用 mybatis 的分页插件 PageHelper 来简化分页代码的开发。底层基于 mybatis 的拦截器实现。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 分页查询\n *\n * <span class="token keyword">@param</span> <span class="token parameter">employeePageQueryDTO</span>\n * <span class="token keyword">@return</span>\n */</span>\n<span class="token keyword">public</span> <span class="token class-name">PageResult</span> <span class="token function">pageQuery</span><span class="token punctuation">(</span><span class="token class-name">EmployeePageQueryDTO</span> employeePageQueryDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">// select * from employee limit 0,10</span>\n   <span class="token comment">//开始分页查询</span>\n   <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>employeePageQueryDTO<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> employeePageQueryDTO<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">pageQuery</span><span class="token punctuation">(</span>employeePageQueryDTO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后续定义</span>\n\n   <span class="token keyword">long</span> total <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageResult</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> records<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="mapper层-1" tabindex="-1"><a class="header-anchor" href="#mapper层-1"><span>Mapper层</span></a></h5><p>在 EmployeeMapper 中声明 pageQuery 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 分页查询\n * <span class="token keyword">@param</span> <span class="token parameter">employeePageQueryDTO</span>\n * <span class="token keyword">@return</span>\n */</span>\n<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">pageQuery</span><span class="token punctuation">(</span><span class="token class-name">EmployeePageQueryDTO</span> employeePageQueryDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>src/main/resources/mapper/EmployeeMapper.xml</code> 中编写SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">&quot;pageQuery&quot;</span> resultType<span class="token operator">=</span><span class="token string">&quot;com.sky.entity.Employee&quot;</span><span class="token operator">&gt;</span>\n    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee\n    <span class="token operator">&lt;</span><span class="token keyword">where</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;name != null and name != &#39;&#39;&quot;</span><span class="token operator">&gt;</span>\n            <span class="token operator">and</span> name <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token string">&#39;%&#39;</span><span class="token punctuation">,</span><span class="token comment">#{name},&#39;%&#39;)</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">where</span><span class="token operator">&gt;</span>\n    <span class="token keyword">order</span> <span class="token keyword">by</span> create_time <span class="token keyword">desc</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码完善-1" tabindex="-1"><a class="header-anchor" href="#代码完善-1"><span>代码完善</span></a></h4><p><strong>问题描述</strong>：操作时间字段显示有问题。</p><h5 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一"><span>方法一</span></a></h5><p>在属性上加上注解，对日期进行格式化</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span>\n<span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但这种方式，需要在每个时间属性上都要加上该注解，使用较麻烦，不能全局处理。</p><h5 id="方法二-扩展springmvc的消息转换器" tabindex="-1"><a class="header-anchor" href="#方法二-扩展springmvc的消息转换器"><span>方法二 (扩展SpringMVC的消息转换器)</span></a></h5><p>在WebMvcConfiguration中扩展SpringMVC的消息转换器，统一对日期类型进行格式处理</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 扩展Spring MVC框架的消息转化器\n * <span class="token keyword">@param</span> <span class="token parameter">converters</span>\n */</span>\n<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;扩展消息转换器...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment">//创建一个消息转换器对象</span>\n   <span class="token class-name">MappingJackson2HttpMessageConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment">//需要为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span>\n   converter<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JacksonObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment">//将自己的消息转化器加入容器中</span>\n   converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象\n * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]\n * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonObjectMapper</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectMapper</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_DATE_FORMAT</span> <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">//public static final String DEFAULT_DATE_TIME_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_DATE_TIME_FORMAT</span> <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_TIME_FORMAT</span> <span class="token operator">=</span> <span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">JacksonObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//收到未知属性时不报异常</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//反序列化时，属性不存在的兼容处理</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDeserializationConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withoutFeatures</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">SimpleModule</span> simpleModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateTimeDeserializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_DATE_TIME_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateDeserializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_DATE_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalTimeDeserializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_TIME_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateTimeSerializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_DATE_TIME_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateSerializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_DATE_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalTimeSerializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_TIME_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span>simpleModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',102)],i={},u=(0,a(83671).A)(i,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,c)}]]),r=JSON.parse('{"path":"/code/java_item/1-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/article3.html","title":"Javassm - item1-3 (新增员工 + 员工分页查询)","lang":"zh-CN","frontmatter":{"title":"Javassm - item1-3 (新增员工 + 员工分页查询)","date":"2025-10-18T00:00:00.000Z","category":["code"],"tag":["java_item"],"order":-0.6,"description":"苍穹外卖 实现功能 新增员工 员工分页查询 启用禁用员工账号 编辑员工 导入分类模块功能代码 1. 新增员工 /admin/employee 产品原型 alt textalt text 账号必须是唯一的 手机号为合法的11位手机号码 身份证号为合法的18位身份证号码 密码默认为123456 接口设计 alt textalt text 明确新增员工接口的...","head":[["meta",{"property":"og:url","content":"http://ekkosonya.cn/code/java_item/1-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/article3.html"}],["meta",{"property":"og:site_name","content":"EkkoSonya\'s Blog"}],["meta",{"property":"og:title","content":"Javassm - item1-3 (新增员工 + 员工分页查询)"}],["meta",{"property":"og:description","content":"苍穹外卖 实现功能 新增员工 员工分页查询 启用禁用员工账号 编辑员工 导入分类模块功能代码 1. 新增员工 /admin/employee 产品原型 alt textalt text 账号必须是唯一的 手机号为合法的11位手机号码 身份证号为合法的18位身份证号码 密码默认为123456 接口设计 alt textalt text 明确新增员工接口的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T16:00:49.000Z"}],["meta",{"property":"article:author","content":"EkkoSonya"}],["meta",{"property":"article:tag","content":"java_item"}],["meta",{"property":"article:published_time","content":"2025-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T16:00:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javassm - item1-3 (新增员工 + 员工分页查询)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-19T16:00:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EkkoSonya\\",\\"url\\":\\"http://ekkosonya.cn\\"}]}"]]},"headers":[{"level":2,"title":"苍穹外卖","slug":"苍穹外卖","link":"#苍穹外卖","children":[{"level":3,"title":"实现功能","slug":"实现功能","link":"#实现功能","children":[]},{"level":3,"title":"1. 新增员工 /admin/employee","slug":"_1-新增员工-admin-employee","link":"#_1-新增员工-admin-employee","children":[{"level":4,"title":"产品原型","slug":"产品原型","link":"#产品原型","children":[]},{"level":4,"title":"接口设计","slug":"接口设计","link":"#接口设计","children":[]},{"level":4,"title":"表设计","slug":"表设计","link":"#表设计","children":[]},{"level":4,"title":"代码开发","slug":"代码开发","link":"#代码开发","children":[{"level":5,"title":"DTO设计","slug":"dto设计","link":"#dto设计","children":[]},{"level":5,"title":"Controller层创建方法","slug":"controller层创建方法","link":"#controller层创建方法","children":[]},{"level":5,"title":"Service层","slug":"service层","link":"#service层","children":[]},{"level":5,"title":"Mapper层","slug":"mapper层","link":"#mapper层","children":[]}]},{"level":4,"title":"功能测试","slug":"功能测试","link":"#功能测试","children":[]},{"level":4,"title":"代码完善","slug":"代码完善","link":"#代码完善","children":[{"level":5,"title":"1. 捕获重复命名异常","slug":"_1-捕获重复命名异常","link":"#_1-捕获重复命名异常","children":[]},{"level":5,"title":"2. 新增员工对应修改人id同步","slug":"_2-新增员工对应修改人id同步","link":"#_2-新增员工对应修改人id同步","children":[]}]}]},{"level":3,"title":"2. 员工分页查询 /admin/employee/page?","slug":"_2-员工分页查询-admin-employee-page","link":"#_2-员工分页查询-admin-employee-page","children":[{"level":4,"title":"产品原型","slug":"产品原型-1","link":"#产品原型-1","children":[]},{"level":4,"title":"接口设计","slug":"接口设计-1","link":"#接口设计-1","children":[]},{"level":4,"title":"代码开发","slug":"代码开发-1","link":"#代码开发-1","children":[{"level":5,"title":"DTO设计","slug":"dto设计-1","link":"#dto设计-1","children":[]},{"level":5,"title":"封装PageResult","slug":"封装pageresult","link":"#封装pageresult","children":[]},{"level":5,"title":"Controller层","slug":"controller层","link":"#controller层","children":[]},{"level":5,"title":"Service层接口","slug":"service层接口","link":"#service层接口","children":[]},{"level":5,"title":"Service层实现类","slug":"service层实现类","link":"#service层实现类","children":[]},{"level":5,"title":"Mapper层","slug":"mapper层-1","link":"#mapper层-1","children":[]}]},{"level":4,"title":"代码完善","slug":"代码完善-1","link":"#代码完善-1","children":[{"level":5,"title":"方法一","slug":"方法一","link":"#方法一","children":[]},{"level":5,"title":"方法二 (扩展SpringMVC的消息转换器)","slug":"方法二-扩展springmvc的消息转换器","link":"#方法二-扩展springmvc的消息转换器","children":[]}]}]}]}],"git":{"createdTime":1760889649000,"updatedTime":1760889649000,"contributors":[{"name":"EkkoSonya","email":"ekkosonya@163.com","commits":1}]},"readingTime":{"minutes":7.82,"words":2345},"filePathRelative":"code/java_item/1-苍穹外卖/article3.md","localizedDate":"2025年10月18日","excerpt":"<h2>苍穹外卖</h2>\\n<h3>实现功能</h3>\\n<ul>\\n<li>新增员工</li>\\n<li>员工分页查询</li>\\n<li>启用禁用员工账号</li>\\n<li>编辑员工</li>\\n<li>导入分类模块功能代码</li>\\n</ul>\\n<h3>1. 新增员工 <code>/admin/employee</code></h3>\\n<h4>产品原型</h4>\\n<figure><figcaption>alt text</figcaption></figure>\\n<ol>\\n<li>账号必须是唯一的</li>\\n<li>手机号为合法的11位手机号码</li>\\n<li>身份证号为合法的18位身份证号码</li>\\n<li>密码默认为123456</li>\\n</ol>","autoDesc":true}')}}]);